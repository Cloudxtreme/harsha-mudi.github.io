<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Mr. Foo Bar</title>


		<description>
        Just Another Blog
        </description>		
		<link>http://lexical.foobar.system</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
        
			<item>
				<title>Interceptor Pattern</title>
					<dc:creator>foobar</dc:creator>
					<description>

It looks like this,

```
class Invocation {
    public String method;
    public Array&amp;lt;Object&amp;gt; args;
}

Event = Invocation

class Interceptor {
    public Interceptor next;
    public intercept(Invocation v);
    private dispatch(Invocation v);
    private delegate(Invocation v);
    intercept = trigger = execute
}

Interceptor = System = Command
```

When dealing with legacy code it becomes,

* Wrapper
* Facade
* Adapter
* Proxy
* Mediator
* Command

By composing multiple interceptors we get,

* Decorator
* Delegation
* Chain of Command
* Filters

When combined with metadata meta-object-programming,

* Strategy
* ServiceLocator
* Front Controller

It can be combined with a Message Bus easily as well.
It can used as the System in Entity-Component-System pattern.


</description>
				<link>http://lexical.foobar.systems/interceptor.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/interceptor.html</guid>
			</item>
		
			<item>
				<title>Fixing the Software Industry</title>
					<dc:creator>foobar</dc:creator>
					<description>

1. Stop bickering about languages.
2. Stop fucking bickering about frameworks.
3. Fuck frameworks.
4. Libraries are the way to go.
5. Users don&#39;t give a fuck about the code, but EASY to use interfaces.
6. Stable software over copyright wars.
7. Money helps in fixing other issues, ask Bill Gates.
8. Hell is other people&#39;s code.
9. Craftsmanship works.
10. Like solving problems ? Ask around, poeple are always bitching about some software
    issue or the other.
11. Open Interfaces &lt; Open Source &lt; Free Software &lt; Stable Software

</description>
				<link>http://lexical.foobar.systems/fixing_the_software_industry.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/fixing_the_software_industry.html</guid>
			</item>
		
			<item>
				<title>Software Craftsman Style</title>
					<dc:creator>foobar</dc:creator>
					<description>

1. Lean Team
2. Regular Feedback
3. Systems Thinking
4. Modular Development
5. Simulation Testing
6. Fast Support

</description>
				<link>http://lexical.foobar.systems/craftsman-style.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/craftsman-style.html</guid>
			</item>
		
			<item>
				<title>Metre</title>
					<dc:creator>foobar</dc:creator>
					<description>

Following poetry,
decide on
the tempo,
the beat,
the metre.

Then,
timbral threads,
some texture,
counterpoint the harmony,
ornament the solo motif,
throwup under the bridge,
and repeat it with the hook.

&lt;a href=&quot;http://lexical.foobar.systems/metre&quot;&gt;App&lt;/a&gt;
</description>
				<link>http://lexical.foobar.systems/element-of-music.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/element-of-music.html</guid>
			</item>
		
			<item>
				<title>Holy Tao</title>
					<dc:creator>foobar</dc:creator>
					<description>
Penetrating the rocks,
meandering the valleys,
seething everything,
keeping none.

Forgetting its reflection,
seeing itself everywhere,
in shapeless cups.

Always moving,
stirred but never shaken.

</description>
				<link>http://lexical.foobar.systems/holy-tao.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/holy-tao.html</guid>
			</item>
		
			<item>
				<title>Personality Types</title>
					<dc:creator>foobar</dc:creator>
					<description>
&quot;Anyone who wants to know the human psyche will learn next to nothing from
experimental psychology. He would be better advised to abandon exact science,
put away his scholar&#39;s gown, bid farewell to his study, and wander with human
heart throught the world. There in the horrors of prisons, lunatic asylums and
hospitals, in drab suburban pubs, in brothels and gambling-hells, in the
salons of the elegant, the Stock Exchanges, socialist meetings, churches,
revivalist gatherings and ecstatic sects, through love and hate, through the
experience of passion in every form in his own body, he would reap richer
stores of knowledge than text-books a foot thick could give him, and he will
know how to doctor the sick with a real knowledge of the human soul.&quot;

-- Carl Jung

There are multiple systems for personality types.

1. Astrology
2. MBTI
3. Enneagram
4. Socionics
5. Choleric

Is it possible to realize these types from the physiology of the brain ?

&lt;img src=&quot;images/mind.svg&quot;/&gt;

Consider the information pathways,

1. Thinker
2. Sensor
3. Controller / Intuition
4. Feeler

Learning Styles
===============

Exploration (T)
Sensation (S)
Perspectives (C)
History (F)

Decission Making Styles
=======================

Accuracy (T)
Harmony (S)
Effectiveness (C)
Authenticity (F)

Misc
====
1. Best way to converse with people, S C F T.

2. An unbalanced personality has weaknesses in one or more of the items.
   With age, meeting different personality types, work partners this gets
   blanced out in the end.

3. This aspects that are least developed are usually called Inner Child / Shadow / Id
   respectively.


1. &lt;a href=&quot;http://www.personalityhacker.com/&quot;&gt;Personality Hacker&lt;/a&gt;
2. &lt;a href=&quot;http://www.socionics.com/rel/relcht.htm&quot;&gt;Socionics&lt;/a&gt;
3. &lt;a href=&quot;https://sites.google.com/site/godlypersonalities/&quot;&gt;Godly Personalities&lt;/a&gt;
4. &lt;a href=&quot;http://www.humanmetrics.com/&quot;&gt;Human Metrics&lt;/a&gt;
5. &lt;a href=&quot;http://www.cognitiveprocesses.com/&quot;&gt;Cognitive Processes&lt;/a&gt;
</description>
				<link>http://lexical.foobar.systems/personality-types.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/personality-types.html</guid>
			</item>
		
			<item>
				<title>Aspects of Software</title>
					<dc:creator>foobar</dc:creator>
					<description>
1. Business Flows / User Stories.
1.1. Simulation / Testing

3. Security
3.1 Authentication
3.2 Authorization
3.3 API verification

4. Data
3.1 ETL
3.2 Backups
3.3 Data Validation
3.4 ER Modelling
3.5 EAV Modelling
3.6 XML / Object Modelling
3.7 Indexing / Searching / Tagging
3.8 Compression
3.9 Caching
3.10 Collission Detection

5. Network
5.1 Firewalls
5.2 Bandwidth Optimization
5.3 RPC

6. Scaling
6.1 Horizontal
6.2 Vertical
6.3 Zero Down Time Deployments

7. Backend
7.1 Components
7.2 Services
7.3 Middleware
7.4 Work Flows
7.5 Data Flows

8. Front End
8.1 Widgets
8.2 Responsives
8.3 Grid

</description>
				<link>http://lexical.foobar.systems/software-aspects.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/software-aspects.html</guid>
			</item>
		
			<item>
				<title>Good Code</title>
					<dc:creator>foobar</dc:creator>
					<description>

1. No comments
2. Perfectly aligned.
3. Perfectly indented.
4. API is documented
5. Has a README
6. Easy installable.
7. Follows consistent naming conventions
8. Variable names are self-explanatory and follow english phrase structures.
9. Data is marked separately.
10. Has Invariants / Assetions / Exceptions
11. Has Metadata like,

    LINK:
    HACK:
    FIXME:
    TODO:
    OPTIMIZE:
    SECURITY:
    NOTE:
    WARNING:
    XXX:
    ALGO:
    USECASE[&quot;Name&quot;][1]:

</description>
				<link>http://lexical.foobar.systems/good-code.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/good-code.html</guid>
			</item>
		
			<item>
				<title>Water</title>
					<dc:creator>foobar</dc:creator>
					<description>
Penetrating the rocks,
Meandering the valleys,
Taking everything,
Keeping None.

Forgetting its reflection,
seeing itself everywhere,
in shapeless cups.

Always moving,
stirred but not shaken.

</description>
				<link>http://lexical.foobar.systems/water.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/water.html</guid>
			</item>
		
			<item>
				<title>Renoise + Plugins</title>
					<dc:creator>foobar</dc:creator>
					<description>
&lt;a href=&quot;https://soundcloud.com/mr-foobar/journey&quot;&gt;Made my third renoise track.&lt;/a&gt;

Up until now I have been using renoise for post production EQ-ing.
Renoise is surprisingly good at that.

One of the advantages of Electribe is the intuitive feel of it all.
Renoise however allows more complex editing to take place.

Note for purists: I intend to make renoise workflow like hardware.
I want to produce the tracks imporvised live much like Electribe.

Renoise Plugins
===============

1. Grid Pie
2. Step Sequencer

I tried meddling with Renoise automation with keyboards.
I&#39;ll stick to MIDI I guess.

VST Plugins
===========
Renoise is already good with sampling comes with 909 samples.

Reverb + Delay are too complicated in renoise.
Thankfully TAL has good plugins here.

VSTi
====
TAL Juno vst.
Custom Wave Generator is a nice renoise plugin for some Saws.

Live
====

Using Grid Pie, Audio Hijack for System audio capture and MIDI I was able to do the whole track live.
I had to bend over backwards to control MIDI knobs and the mouse.

This setup can definitely be used for long sessions.
Grid Pie comes with 8x8 which should do quite well.

Issues
======

VST windows and Grid Pie don&#39;t work well together.

</description>
				<link>http://lexical.foobar.systems/renoise.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/renoise.html</guid>
			</item>
		
			<item>
				<title>Flow</title>
					<dc:creator>foobar</dc:creator>
					<description>
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/AU5x1Ea7NjQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

Have experienced a bit of flow recently, here are my notes.

Closed Thinking
- anxious
- energetic
- ambitious
- failure averse
- distracted
- noisy
- obstacles

Creative Thinking
- humour
- ad lib
- curiosity
- multiple solutions
- no fear
- limits
- quiet
- play

It is easier to do trivial and little things than difficult things.
So I start with the difficult things.

I am also programming en masse than compile every syntax error.
It&#39;s interesting to depend on your thinking than the compiler.

Tips
* long/slow/forced breaths
* time limit of 1 1/2 hours

</description>
				<link>http://lexical.foobar.systems/flow.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/flow.html</guid>
			</item>
		
			<item>
				<title>The unity of Dub, Techno and Jungle</title>
					<dc:creator>foobar</dc:creator>
					<description>
Dub, Techno and Jungle** are distinct musical genres.
What could they possibly share ?

(** Jungle is used as a catch all for Breakbeat, Hardcore as well)

All three uphold the primacy of Rhythm for start.
This means that melody is nothing but a repeating motif or a live instrument.

All three are instrumental.
Voices are used sparingly as samples.

All three have a tradition of live acts.
Dub Plates are common for these genres.

It is how each achieves Rhythm that gives them their unique feel.

Dub Music is made by messing with the Recording Engineer&#39;s Mixing desk.
- tweaking.

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/oJs1wR8tLr4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

Techno is made by messing with Hardware or Hardware + Software.
- tweaking + layering.

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/eaVY5Y13sc0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

Jungle Music is made by messing with Hardware + Software combo.
- complex layering

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/q72qoGYirwU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

</description>
				<link>http://lexical.foobar.systems/dtj.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/dtj.html</guid>
			</item>
		
			<item>
				<title>Mirror Ontology</title>
					<dc:creator>foobar</dc:creator>
					<description>

The principles shall now be explained,
Earth, water, fire and air are the principles.
By whom came this variety ? from their own nature was it born !

Perception is the only valid source of knowledge.
The body is the source of consciousness; not an imperceptible soul.
As no other world entities are seen, there is no other world.

While life is yours, live joyously !
Even freed from fear,
None can escape Death&#39;s searching eye.

-- Epicurus

1. The world is made of self-similar structures.

    Atom
    Star

    DNA
    Nature

    Microbes
    Plants

    Animal
    Man

    Words
    World

    Each is built on top of the other. It is difficult to pin-point where
    an atom ends and a star begins.

2. The human body is completely automatic.

   There is no &quot;free will&quot; in

    Growth
    Sex
    Sleep
    Disease

3.

&lt;img src=&quot;images/mind.svg&quot;/&gt;

   Various delays and feedback loops come into the picture.

   Additional delays of the following are also applicable
        light
        sound
        heat
        pressure
        motor control
        speech
        sense processing
        recollection

   Not only delays, memory can decay.

4. The &quot;I&quot; that an individual perceives is an echo.
   It can&#39;t be eliminated.

5. The mind is a mirror, an imperfect one of REALITY.

6. What &quot;is&quot; can be divided into

   Reality is the content of individual memory.
   Social Reality, the least common denominator of realities.
   REALITY = Sum(Reality)

   What this implies in raw numbers is that, the total number of
   realities at any given moment is (Individuals x Societies) + 1.

   The number is obviously merely for demonstration purposes.
   &quot;Mad&quot; people have been know to experience more than one reality at once.

7. Will is ability of an individual to hold power relations with REALITY.
   Dynamics of REALITY is nothing but Will to Power.

8. As Social Reality is nothing but memory, all revolutions and revelations are just
   memory experiences cruelly enforced.

  For example, if `0 - 2 = 0 and 0 + 2 = 0` is valid for a number system.
  Teachers won&#39;t be apologetic for the children they beat.
  New teachers will certainly beat the children who give a wrong answer now.

  If the earth started having regular &quot;mini&quot; earthquakes, no one would
  be able to demonstrate &quot;Simple Harmonic Motion&quot;.

  Seen this way, there is no private memory which is a much harsher restatement of
  Wittgenstein&#39;s &quot;there is no private language&quot;.

9. Mind is a mere minder of senses.

   Mind can never study itself completely.
   A mirror can never look at itself by using another mirror.

   Minding about the mind gives rise to infinite loops, infinite reflections.
   Such infinites manifest just like a mirror as -- &quot;Mind seeing itself everywhere&quot;.

   Mind can&#39;t study any of self-similiar structures in 1 except in relation to will.

10. All that can be said of the mirror by the mirror, if the mirror had any sentience
    is -- &quot;I seem to exist. I can mirror&quot;.

11. If 10 were indeed the case, then AI is simply not possible on a human level.

12. Intelligent Robots will have a level of self-conscience a human can never have.

    This means that robots will simply not pollute nature.
    If one robot discovers that polluting is &quot;bad&quot;, then all robots upgrade to do &quot;good&quot;
    and plant more trees.

    Such a robot is more beautiful than a petulant human who even after 100_000
    religions, movies, songs ... changed radically.

    Maybe self-aware robots are man&#39;s gift to Nature ?

13. All delusions, anxieties, obsessions, phobias, hate, love are multiplicative
    feedback loops unto the Mind.

   If a microphone is not insulated from the speakers, a musician will not be able
   to play his guitar.

   Thus therapy is avoiding too much &quot;feedback loops&quot; by focusing only on senses or
   memory or mind but never in combination.

14. Memory as a drug is sold in the marketplace as &quot;Becoming&quot;.
    There is no &quot;Becoming&quot;.

    If two computers swap hard disks,
    Have the operating miseries changed ?

15. Memory makes second order cybernetics needless.

16. Memory as time-binding is useful as long as it maps to the structure of REALITY.

17. Memory is conditioning.
    Language is the condition.

    Mind is conditioning moving towards pleasure.
    A Perfect Mind is postulated as more pleasurable than an inferior one.

    What then is pleasure ?

    It is an abormal condition of the body.

    It is alluded and exists only in allusion as images of content and smiling
    family, peers, society, leaders, businessmen, heroes, kings,
    artists, philosophers, addicts and criminals.


References
==========
* &lt;a href=&quot;http://www.robertpepperell.com/papers/Towards%20a%20Theory%20of.pdf&quot;&gt;Zen and Neuroscience&lt;/a&gt;
* &lt;a href=&quot;https://en.wikipedia.org/wiki/Bereitschaftspotential&quot;&gt;Action preceeds thought&lt;/a&gt;
* &lt;a href=&quot;http://www.radicalconstructivism.com&quot;&gt;Radical Constructivism&lt;/a&gt;
* &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-order_cybernetics&quot;&gt;Cybernetics&lt;/a&gt;
* &lt;a href=&quot;https://en.wikipedia.org/wiki/General_semantics&quot;&gt;GS&lt;/a&gt;
* &lt;a href=&quot;http://www.utwente.nl/bms/wijsb/organization/aydin/pdfs/N-will-to-power.pdf&quot;&gt;Will To Power&lt;/a&gt;
* &lt;a href=&quot;http://pure.rhul.ac.uk/portal/files/6387874/GrayJ_2012_HamannNietzscheWittgenstein.pdf&quot;&gt;Language Philosophers&lt;/a&gt;

tl;dr
&quot;I&quot; is an echo.
All memory is dogma.
The goal of the mind is doomed.

CREDITS
=======

&lt;a href=&quot;https://twitter.com/tuxcanfly&quot;&gt;@tuxcanfly&lt;/a&gt; and nix for putting up with the drafts of this !


</description>
				<link>http://lexical.foobar.systems/mirror.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/mirror.html</guid>
			</item>
		
			<item>
				<title>Measurable Programming</title>
					<dc:creator>foobar</dc:creator>
					<description>
&lt;b&gt;&quot;If it can’t be measured, it does not exist&quot;&lt;/b&gt;

In music it is common to set the tempo, a number before starting to make
a composition. In painting this would be the canvas size. For films it is the
duration. These numbers are fundamentally, limits for convenience or style or for creative purposes.

It is very tragic that programmers have a tendency to wait till the deadlines,
till the limitations become obvious. Because of the limitations the actions also become
obvious. This leads to a false conclusion that deadlines are productive. It is the
limitations that propel productivity.

By having limitations of space, the grammar of action becomes obvious.

Here are a few numbers which can act as limitations for programming,

1. Page Load time

&lt; 600ms

2. Memory Consumption

If a page consumes 1MB and the RAM of the machine is 1000MB then
that means the site can have a maximum of 1000 views per second.

Reducing memory is a very creative act !

3. LOC / Day

Assuming a programmer reads or writes 5 lines per minute,
the upper limit of LOC / Day would be --

60 * 5 * 8
 =&gt; 2400

For 1 line per minute,

60 * 1 * 8
 =&gt; 480

4. Function Point

This is a standard Software Engineering term.

Function Point = Avg(LOC / Function)

The word Function means a unit of Business requirements.
It can mean issue, fix, task, new widget ...

The is highly project specific and programmer specific.

If the Function point is 300, then that means wrt the LOC calculations above,
a programmer can code 1.5 - 8 features per day.

This is compounded by expectation cost i.e, the feature needs more oomph
and in teams, communication cost.

Reducing LOC for a function is also a very creative act !

---
My numbers can be seen &lt;a href=&quot;/estimates.html&quot;&gt;here&lt;/a&gt;

</description>
				<link>http://lexical.foobar.systems/measurable-programming.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/measurable-programming.html</guid>
			</item>
		
			<item>
				<title>Estimates</title>
					<dc:creator>foobar</dc:creator>
					<description>

Does not work
=============

* Will get over soon
* Today
* This week
* This weekend
* Tomorrow
* This month
* Next month

Lazy Answers
============

* I&#39;ll get back to you
* It&#39;ll take long
* Maybe he can do it

May Work
========

* Buffer time
* Best/Average/Worst Case estimates

Modelling
=========

* Define outcomes or function points as bullet points
** Divide each point into tasks
*** Tasks can be parallel / linear.
    If linear, identity inputs

Numbers
=======

Modification and Deletion of lines should be considered 
a part of LOC.

* 1 week == 40 hours
* task: 2-16 hours
** 20 - 3 tasks per week
   5 - 0.5 tasks per day
** If function point ~~ 3 tasks,
   6 - 1 function points per week
   1 - 0.3 function points per day

* 10 - 350 LOC / Day
* 12 bugs per 1000 LOC.
** 80 is a good number
** function point ~~ 50 LOC

* use `gem install git_stats`

Personal Numbers
================

* 30 - 150 LOC / Week
** 3 function points per week
** 0.5 function points per day
** 9 tasks per week
** 2 tasks per day

* &lt;a href=&quot;http://automagical.rationalmind.net/2010/08/17/some-lesser-known-truths-about-programming&quot;&gt;[more numbers]&lt;/a&gt;

</description>
				<link>http://lexical.foobar.systems/estimates.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/estimates.html</guid>
			</item>
		
			<item>
				<title>Steady State</title>
					<dc:creator>foobar</dc:creator>
					<description>
&quot;Making a territory into a map destroys it.&quot;
&quot;Eternal self-reflexivity&quot;

Nature (beyond senses)

World (value-binding)
Plants (energy binding)
Animals (space binding)
Microbes (space-energy binding)

Memory (time binding)
Thought (space-time binding)
Will (energy-time binding)

Steady State
============

Steady state means leaving Nature alone.

World + Action - Energy = World

Action - Energy = Work ~~ 0
- JIT
- Lean

Action = Senses + Memory + Will + Thought + Communication

Senses
======

Map is not the teritory

Memory
======
Memory is a sponge.
It is easy to corrupt memory by non-sense.

* Beginner Mind

Will
====
Will is a filter system.

Filter
- Body
- Emotion
- Knowledge
- Purpose
- Space
- Time
- Casuality
- Structure (polynomial)
- Error

Filters are given by the world.

Thought
=======
Thought is a control system.

Communication
=============

Written (square root)
Speech (polynomial root)

</description>
				<link>http://lexical.foobar.systems/steady_state.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/steady_state.html</guid>
			</item>
		
			<item>
				<title>Name Coupling</title>
					<dc:creator>foobar</dc:creator>
					<description>
[DRAFT]

All programming pathologically suffers from name-coupling.

By name coupling what I imply is how a function has to know the name of
the function or object it would like to call.

Hence there is a need extra for indirections to achieve basic modularity

* Function Pointers
* Dynamic Namespaces (packages in lisp)
* Mediator / Messaging / Interceptor / Reflection / Dependency Injection / Service Locator / Proxy ...
* REST APIs
* DLLs
* Actors
* Active Objects
* &lt;a href=&quot;http://noflojs.org&quot;&gt;Components&lt;/a&gt;

Electronics is the most visible example of nameless coupling.

Every so-called &quot;Very High Level beyond Functional&quot; language as of 2014
implements static bindings for names as the default.

Contrast to this, Assembly programming languages don&#39;t need any complex
indirections like above because of the notion of indirect jumps or computed gotos.

SPARC:  jmpl %o7
MIPS:   jal $ra
X86:    jmp *%eax
ARM:    mov pc, r2
IA64:   br.ret.sptk.few rp
6502:   jmp ($0DEA)
65C02:  jmp ($0DEA,X)
65C816: jsr ($0DEA,X)

This is an instruction level Proxy Pattern which naturally gives rise to modularity
and even self-modifying code.

Programming language designers are doomed to reinvent what is useful and forgotten with stupid names.

</description>
				<link>http://lexical.foobar.systems/name-coupling.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/name-coupling.html</guid>
			</item>
		
			<item>
				<title>The Myth of Software Reuse</title>
					<dc:creator>foobar</dc:creator>
					<description>
The Myth of Software Reuse gives you the following claims

- Easier to use
- Maintainable
- Cheap components / plugins / modules

I have a Gameboy ~~ 10 years.
A bike ~~ 7 years.
A watch ~~ 12 years.

Each of them has good cheaply available parts which can be used for

- Decoration
- Maintenance
- Upgrades

It is on the success of Engineering, Software Engineers make the
claims of reuse.

Sadly most claims remain more exaggerated than true.

For example, the Factory Pattern doesn&#39;t have the notion of pipelines
and yet it is supposed to help us somehow into making the &quot;car&quot; objects.

Can we be inspired by Engineering to do better ?

Cars
====

Engineering products typically have series and each series typically has generations.

For a car company, we can imagine a A series and a B series.

A1
A2
within A.

B1
B2
B3
B4
within B.

Firstly A and B can be so different, the only thing common between them is primitives
and designs ideas.

For Software this is,

- Primitives
- Data Structures
- Algorithms
- Patterns

For A and B, the manufacturing pipeline can be common.

- Build Process

Between A and B

- User Interfaces can be shared, upgraded and themed.

Within

A1
A2

Old components can be

* Reused
* Replaced
* Modified internally

- Module Set

Module Set
==========

The maximum reuse happen at Primitives, Data Structures ...
Important reuse goes into to Architectural/Design Patterns.

For flexible UI, create common and flexible Interfaces.

The most ignored is the &quot;Module Set&quot;.
With the help of such a set we get easy Build Steps and Internal reuses.

&lt;b&gt;What is a Module ?&lt;/b&gt;

A Module has
1. input
2. output
3. reconfigurability
4. connectivity

To create a Module Set is a Creative Process.

** It is a skill, not a framework **

The Set can be divided into two aspects.
Data Flow and Control Flow.

Data Flow is made up of Data Paths and Transformations.

Control Flow represents
1. Steps
2. Sequencing

Steps and Transformations are easy to Modularise.
Sequencing can be modularized with the help of decision trees.

Summary
=======

To reuse, just stick to off-the-shelf

* Primitives
* Patterns

Each should however be implementable by-hand, when absent as a library.
In fact the library should not be different from a hypothetical implementation by-hand.
Any fluff just muddles the pure Design Concepts.

Learn Module Decomposition.

A litmus test for a programmer understanding modularity
is whether he can implement a plugin system.

</description>
				<link>http://lexical.foobar.systems/myth-of-reuse.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/myth-of-reuse.html</guid>
			</item>
		
			<item>
				<title>Basics of Programming</title>
					<dc:creator>foobar</dc:creator>
					<description>

Data Modelling
- ER / Binary / XML
- Queries
- Serialization
- References

Transforms (Functions)
Pipeline (Data Flow)
Layers (Aspects)
Scheduling (Control Flow)
Parralelism (Context)

Presentation
- Layout
- Widgets
- Scene Graph
- Transducers

</description>
				<link>http://lexical.foobar.systems/basic_programming.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/basic_programming.html</guid>
			</item>
		
			<item>
				<title>Why I am excited about Entity Systems</title>
					<dc:creator>foobar</dc:creator>
					<description>

Computing is still primitive and Fragile.

For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Typography&quot;&gt;Typography&lt;/a&gt; is an ancient profession.
CSS3 is just cute, compared to what Typographers can do.

It is haughty to think that computers can do everything, with fidelity.

&lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_knuth&quot;&gt;Donald Knuth&lt;/a&gt; spent a disproportionate amount of time on typesetting,
and rightfully so.

To put Entity Systems in context, here is a list of programming
paradigms as used in the Software Industry.

Automata Programming
====================

Automata/ State Machines are at the heart of all Software.

* Parsers
* Validation Mechanisms
* Protocols
* Circuit Design
* Industrial Robots

Currently state machines can be implemented by the following
techniques,

1. &lt;a href=&quot;https://en.wikipedia.org/wiki/State_pattern&quot;&gt;State Pattern&lt;/a&gt;

   This is the OO way of doing it.

2. &lt;a href=&quot;https://en.wikipedia.org/wiki/Dispatch_table&quot;&gt;Dispatch Tables&lt;/a&gt;

   This uses function pointers.

3. Goto&#39;s

   I find it appalling that gotos are considered a &lt;a href=&quot;http://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement&quot;&gt;joke&lt;/a&gt;.

   Here is a Knuth&#39;s defence of &lt;a href=&quot;http://cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf&quot;&gt;goto&lt;/a&gt;. The paper also has a hint of satire,
   on how programming language designers are complicit in advocating &lt;a href=&quot;https://en.wikipedia.org/wiki/Newspeak&quot;&gt;Newspeak&lt;/a&gt;,
   for &quot;safety&quot;.

   Just for a perspective, see the &lt;a href=&quot;http://svnweb.freebsd.org/base/stable/9/sys/netinet/tcp_input.c?view=markup#l631&quot;&gt;tcp/ipv4&lt;/a&gt; code from FreeBSD.

   This code is used by &lt;a href=&quot;http://www.scei.co.jp/ps4-license/&quot;&gt;Sony&lt;/a&gt; and many embedded systems.
   The Linux implementation is &lt;a href=&quot;https://github.com/torvalds/linux/blob/master/net/ipv4/tcp.c&quot;&gt;similiar&lt;/a&gt;.

&lt;blockquote&gt;The most critical piece of Internet Infrastructure is designed
as a state machine using goto&#39;s.&lt;/blockquote&gt;

   Using goto&#39;s is hardly different from Dispatch Tables.
   RAM is a hardware implementation of a table.

   Why is there, no joke on this &lt;a href=&quot;http://lua-users.org/wiki/GotoStatement&quot;&gt;page&lt;/a&gt; ?
   Probably because it&#39;s used in the Electronics Industry.

   Blaming goto&#39;s is like blaming a Scalpel.


Structured Programming
======================

This has the following styles,

1. Procedural Programming

   See &lt;a href=&quot;http://sunnyday.mit.edu/16.355/wirth-refinement.html&quot;&gt;Program Development by Stepwise Refinement&lt;/a&gt;
   Typically how you write C programs.

2. Objective Programming

   &lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)&quot;&gt;Encapsulation&lt;/a&gt; for me, is the most important idea here.

3. Modular Programming

   &lt;code&gt;
   &amp;gt;&amp;gt;&amp;gt; import this
   ...
   Namespaces are one honking great idea -- let&#39;s do more of those!
   &lt;/code&gt;

4. Functional Programming

   Functional programming structures code around transformations,
   than state changes.

   It&#39;s tricky to do &lt;a href=&quot;http://prog21.dadgum.com/23.html&quot;&gt;Games&lt;/a&gt; in Pure Functional Programming.
   Impure Functional Programming as seen in Common Lisp, Clojure,
   Perl, Python, Ruby, OCaml is more successful.

Declarative Programming
=======================

The following are some fine examples,

1. HTML, make
2. SQL, Logic Programming
3. DSL&#39;s and Scripting Components.

   See &lt;a href=&quot;http://martinfowler.com/articles/rake.html&quot;&gt;Rake&lt;/a&gt;, &lt;a href=&quot;http://www.blender.org/documentation/blender_python_api_2_70_release&quot;&gt;Blender API&lt;/a&gt;

4. Generative Programming

   This includes Lispy Macros, &lt;a href=&quot;http://dinosaur.compilertools.net/yacc/&quot;&gt;yacc&lt;/a&gt;.

Event Driven Programming
========================

Computers react to events.

1. Messaging

   &lt;a href=&quot;http://zeromq.org/&quot;&gt;Zero MQ&lt;/a&gt;

2. &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_Pattern&quot;&gt;Observers&lt;/a&gt;
3. Callback (Hell)
4. Services

   See &lt;a href=&quot;https://en.wikipedia.org/wiki/REST&quot;&gt;REST&lt;/a&gt;

Data Flow Programming
=====================

This is my favorite paradigm.
Impure Functional programming fits nicely here.

1. Unix &lt;a href=&quot;http://doc.cat-v.org/unix/pipes/&quot;&gt;Pipes&lt;/a&gt;

   Nuff said.

2. Max/Pure Data

   &lt;a href=&quot;https://www.youtube.com/watch?v=7Y_Tzelw91g&quot;&gt;You just have to see it&lt;/a&gt;.

3. Spreadsheets

   Most widely used Programming Language if you ask me.

4. Visual Programming

   A bit of a stretch, but anything from Photoshop layers to Circuit Design goes here.

Parallel Programming
====================

&lt;a href=&quot;https://en.wikipedia.org/wiki/Erlang_(programming_language)&quot;&gt;Erlang&lt;/a&gt; is a great success story.

Entity Systems
==============

In a way &lt;a href=&quot;http://cbpowell.wordpress.com/2012/10/30/entity-component-game-programming-using-jruby-and-libgdx-part-1/&quot;&gt;Entity Systems&lt;/a&gt;, takes concepts from every one of the above.
I am not even sure it&#39;s a new Paradigm.

But the reason I am excited about Entity Systems is, it puts us right back
into &lt;a href=&quot;https://en.wikipedia.org/wiki/Batch_processing&quot;&gt;Batch Computing&lt;/a&gt;. Entities are stored centrally and Systems perform batch operations on them.

And best of all, it is battle tested by Game Developers.

</description>
				<link>http://lexical.foobar.systems/why-i-am-excited-about-entity-systems.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/why-i-am-excited-about-entity-systems.html</guid>
			</item>
		
			<item>
				<title>OM</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;a href=&quot;https://github.com/swannodette/om/wiki/Documentation&quot;&gt;Om&lt;/a&gt; is built on three ideas to deal with &lt;a href=&quot;http://tech.pro/blog/1402/five-patterns-to-help-you-tame-asynchronous-javascript&quot;&gt;async&lt;/a&gt; shit in clojurescript.

1) Messaging
2) State Management
3) Reactive UI

tl;dr UI -&gt; EVENTS -&gt; STATE -&gt; UI

## Reactive UI

This is built on top of ReactJS.
UI is divided into components.

Each component takes a cursor(more on that later).
And has some,
* rendering code
  rendering code can look like dom/div(default), :div(hiccup) or enlive
* life cycle hooks where you can place dom event listeners and state change listeners

Initialization of component calls,
    IInitState
    IWillMount
    IDidMount.

Every time a cursor&#39;s state changes a component is rendered, as per the life cycle,
    IWillUpdate
    IRender or IRenderState
    IDidUpdate.

Components are organized as a tree for some fancy optimization purposes.
See,
    root - builds the first component
    build
    component
    graft.

## State Management

The entire application state and data is an atom blob.
Om gives you cursors which are pointers(paths) to a subset of the blob.

Om also has component local states, which are not stored in the blob.
See,
    set-state!
    get-state!
    props.

It is much simpler to depend on cursors for everything, IMHO.

Om also has truly global state sharing with,
    get-shared which gets the :shared argument passed to root.

Cursors are manipulated safely by om API,
    update!
    transact! you can use a :tx-listen while building root to listen to all transactions
    and get-in, assoc-in from clojurescript.

You can extend the ICursor Protocol to come up with your own idea of cursors.

## Messaging

Messaging is possible because of core.async, which provides channels and goroutines.
There is no &lt;a href=&quot;http://swannodette.github.io/2013/08/02/100000-processes/&quot;&gt;limit&lt;/a&gt; to the number of channels and goroutines unless you are using old browsers.
goroutines look alot like threads.

Every component can have channels or channels can be global.
Global channels and goroutines makes it easier to refactor code into multimethods later, IMHO.

Instead of dealing with callbacks in dom event listeners you put! things into channels as events.
In a goroutine you &amp;lt;! on a channel to listen to all the events and act upon them.

Events are acted upon and send further events, finally making changes to the state which call,
    IWillUpdate
    IRender or IRenderState
    IDidUpdate.

Good place to start go(routines),
    IWillMount.

Testing and Mocking are greatly simplified using the messaging paradigm.

</description>
				<link>http://lexical.foobar.systems/om.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/om.html</guid>
			</item>
		
			<item>
				<title>OOP</title>
					<dc:creator>foobar</dc:creator>
					<description>
“There&#39;s a good part of Computer Science that&#39;s like magic.
Unfortunately there&#39;s a bad part of Computer Science that&#39;s like religion.”
― Hal Abelson

OOP / OOAD is intrinsically tied to an object&#39;s life cycle.

One can distinguish between two life cycles

1. Flat

a creates b
a uses b
a closes b

This facilitates layered Architecture.

Model View Controller
Domain Application Service

This is OK till you need Workflow Processing (Checkout).
A typical Workflow spans more than 2 disjointed or concurrent steps.

Also, building a new layer is a long process.

2. Nested

An object sent n-levels down may gives rise to

* Circular References
* Memory Leaks
* Data Corruption
* Inability to add new operations since it&#39;s already entrenched.

It is a major pain to debug.

Another problem is two-way, or even one-way communication with previous levels.
**Legacy code is sprinkled with using exceptions as one-way communication.**

Religiosity
===========

Practitioner: How can objects have sex ?
Priest:       You need a Factory to pray to and then it will deliver.
Practitioner: I don&#39;t have one ...
Priest:       You need a Factory to pray to and then it will deliver.

$$ Practitioner works on his code

Practitioner: I have a Factory. Can objects have sex now ?
Priest:       Sex is sin. I pray for your AbstractController.
Practitioner: ...

Design patterns hide the problems.

&lt;b&gt;It is not difficult to spot religiosity&lt;/b&gt;

* Incapacity is explained as Evil and an obfuscated explanation
  with moral and miraculous connotations is given.

&amp;gt;  Children are a gift from god.
&amp;gt;  Dependency Injection will give you the answer.
&amp;gt;  Use an Applicative Functor, State is evil.

* Judgement Day

&amp;gt;  You will suffer because you sin. You will be judged at the end.
&amp;gt;  You did not use OOAD DDD DI MVC MVP MVVM ABC properly.
      Your project will be a maintenance nightmare.

* No criticism of the Elite

How many times in history have the priests held the king accountable ?
They will attack the commoners and collude with the kings.
This is because the Elite never needed a religion.
Religion is always a proxy for them.

A company X and a priest Y will announce a Framework Z.
After 5 years the company will ditch Z and use W.

Imagining what will happen next is upto you.

Engineering
===========

Raw Material -&gt; A Real Factory
                -&gt; Assembly Line
                    -&gt; Construction
                        -&gt; Split Raw Materials
                          -&gt; Make Parts Concurrently
                        -&gt; Assemble
                    -&gt; Quality Check
                -&gt; Product
                -&gt; Package Product

An Engineering Product stands for itself.
Only Game Programmers come close to this.

The irony is, Assembly Programmers used these techniques.

Assembly Programmers dealt with primitive indestructible values
and Pointers.

* Storage Management
* Memory &lt;-&gt; Processes &lt;-&gt; Device

The `Device` part is where (Flat) OOP is a great fit.
(infact a file interface is all you need)

The `Storage Management` part is where OOP is OK.
The `Memory &lt;-&gt; Process` part is where OOP fails.

This can be solved by Data Process Patterns

* Micro Kernel

Used in Real Factory Controllers.

* Entity Systems

The Game Programming way.

* Data Flow

Used in domains like Avionics, Electronics Softwares.

* Stream Processing

XML / Unix

* Actor Model

Used in Telecommunications, WhatsAPP.
golang.

* Workflow Engine
* Active Object Pattern

Inevitably, in &quot;Enterprises&quot;.

* PAC

Drupal. Yes Drupal.

* MVC + Smalltalk

It is pointless to talk of MVC-smalltalk without smalltalk.
smalltalk has a very elegant and actor-like object communication model.

* Co-routines

Simula had it. Why on earth this was wasn&#39;t included in C++ baffles me.

* Hierarchical Control Systems / Agent Oriented Programming

---
and many many more !
see &lt;a href=&quot;http://www.dataorienteddesign.com/dodmain/&quot;&gt;Data-Oriented Design&lt;/a&gt;
---

## What is the bloody point of all this ?

If you want to be a Software Engineer

1. Use OOP, if you have to, for low level layers

2. Don&#39;t fall into SP, OOP, OOAD, DDD, FP or any religion

3. Engineering is about building complete Products with
   - Systems
   - Sub Systems
   - Inout / Output

   There is a huge creativity here, doing this efficiently.
   Don&#39;t let the framework rob this from you.

4. A Lot of programmers have built complex reliable Systems without
   without OOAD or FP in tiny teams.

   Consider the screenplay for &lt;a href=&quot;http://johnaugust.com/2004/how-many-lines-per-page&quot;&gt;Schindlers list&lt;/a&gt;. It has ~~ 6k lines, written
   by one guy probably.

   A 16kb total-scripts-size can be a good upper limit for a single programmer.

5. Pick new Data Process pattern and make it your own.

The point is, you can do Engineering and it&#39;s not that difficult.

$ cat log.txt | grep foo | wc -l

You already use engineered components that work together, everyday.


</description>
				<link>http://lexical.foobar.systems/oop.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/oop.html</guid>
			</item>
		
			<item>
				<title>Pause</title>
					<dc:creator>foobar</dc:creator>
					<description>

My writing can&#39;t be understood by the pedantic.

Have you observed, the pedantic can never write anything original ?
That&#39;s no coincidence. For the obsessive compulsive pedantic,
writing is a sin.

I try to follow Grammar for its prosodic flows.

Pauses are crucial for prosody.

Here are a few ways to create a pause, in ascending order of
duration

-
|space|
,
;
.
--
*
|newline|

|quote|
italic
bold

</description>
				<link>http://lexical.foobar.systems/pause.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/pause.html</guid>
			</item>
		
			<item>
				<title>Programmers are terrible</title>
					<dc:creator>foobar</dc:creator>
					<description>

Adjectives you can use to describe them,

1. du·plic·i·tous
2. mas·och·is·tic
3. zeal·ots
4. cree·py
5. ar·ro·gant
6. angsty
7. pe·dan·tic
7. cryp·tic
8. e·van·ge·list
9. sen·sa·tion·al·ist
10. slop·py

And most sadly,

1. blind op·ti·mists

</description>
				<link>http://lexical.foobar.systems/programmers-are-terrible.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/programmers-are-terrible.html</guid>
			</item>
		
			<item>
				<title>Reactive Data Processing (The Story)</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;a href=&quot;https://github.com/harsha-mudi/rdp&quot;&gt;RDP&lt;/a&gt;
&lt;a href=&quot;https://github.com/harsha-mudi/rdp/issues&quot;&gt;Issues / Feedback&lt;/a&gt;

&lt;h3&gt;Genesis&lt;/h3&gt;
I came across &lt;a href=&quot;http://puredata.info/&quot;&gt;Pure Data&lt;/a&gt; ~ 2 years back.

This year I came across the notions of asset pipelines and streams
thanks to node.js and gulp.

This struck me as peculiar as pipelines are a part of shell
programming as well.

I investigated further and I found a multitude of names like

1. Pipes and Filters
1.1 Streams
2. Component Oriented Programming
3. Data Flow Programming

The following seemed related as well

4. Event Oriented Programming
4.1 State Machines
5. Workflow Engines
6. Messaging
6.1 OOP
6.2 Parallelism
7. Spreadsheets

More importantly, in existing Engineering domains
Data Flow is the norm.

8. Electronics
8.1 DSP
9. Avionics

Making Music has taught me a bit of DSP.
I had to learn hands-on what tweaking a DSP filter &lt;i&gt;felt&lt;/i&gt; like.
I had an understanding of effect chains and mutli-track recording.

I found some free time in my hands so I decided to implement a
tiny framework for Data Flow.

I read &lt;a href=&quot;https://github.com/tailrecursion/javelin&quot;&gt;javelin&#39;s&lt;/a&gt; source code and felt confident enough to attempt
this. javelin implements a powerful Spreadsheet Engine in very
few lines. It is a part of &lt;a href=&quot;https://github.com/tailrecursion/hoplon&quot;&gt;hoplon webframework&lt;/a&gt;.

I decided to call it Data Processing rather than Data Flow Processing
as a homage to the pre-computing Data Processing Machines of IBM.

I disliked Software at this point, having found that most
Music Softwares pale in comparison to the feel of Hardware Synths.
I used Breadboard and Electronics analogies instead Software&#39;s.

I set out to answer

* Can Low Level ideas Scale ?
* Are they Readable ?

As of now, I believe &lt;b&gt;Low &gt; High&lt;/b&gt; on even more accounts.

&lt;h3&gt;Implementation&lt;/h3&gt;
I scanned Pure Data&#39;s implementation and implemented
inlets/outlets and objects(Systems) in js.

I added abstractions of Namespace and Symbol, taken from Lisp, for addressability.

At this point I felt a dire need for State and Data Storage handling.

Having implemented a &lt;a href=&quot;https://github.com/harsha-mudi/botes&quot;&gt;prototype of Entity Systems&lt;/a&gt; earlier
I added it to RDP.

State was simply implemented as `this[&quot;foo&quot;] = ...` since
Systems are Live Objects.

I started writing an example app called Esti.

The first challenge was to define Data.
I settled on the definition of Data as a Map&amp;lt;Slot, Scalar&amp;gt;.

Slot is a string.
I modelled Scalar after Lisp / Perl.

The second challenge was UI development.

Although I love Pure Data&#39;s visual &lt;a href=&quot;https://www.youtube.com/watch?v=NuJkKtlD4OE&quot;&gt;Live Object Oriented Programming&lt;/a&gt;,
I decided for a more traditional UI with Reactjs. DSP like Data Flow can be done
in a traditional UI. Music Softwares are example of that.

I added a Message Bus for decoupling UI from Data Flow.
When Systems were done processing Data they could trigger an Impulse on the Bus.
The Bus would then interrupt another System.

In Electronics terms, messages are like Discrete Signals.
Pure Data also has a similar notion.

The Application was pretty straightforward.
It had a readable list if/else statements in one place, unlike OOP.

During development, I discovered many important properties of Data flow based design

1. Diagram Generation

&lt;a title=&quot;click for source&quot; href=&quot;https://github.com/harsha-mudi/esti/blob/master/source/js/diagrams.js&quot;&gt;&lt;img src=&quot;images/esti.png&quot;/&gt;&lt;/a&gt;,
It is difficult to explain to a stranger about what is happening here.
But to someone who is co-developer / manager ?

One can easily point out things like

* What systems are working
* Where the problems are
* How does the data flow
* Where new ones are needed

2. Simulation

&lt;a href=&quot;https://github.com/harsha-mudi/esti/blob/master/sim.xml&quot;&gt;This.&lt;/a&gt;

&lt;a href=&quot;https://github.com/harsha-mudi/esti/blob/master/source/js/simulations.js#24&quot;&gt;That&#39;s 330 task events, each of which has a clock that ran atleast
randomInt(3600, 7200) ticks to simulate the app in ~ 100 lines of js&lt;/a&gt;.

Since Data between Systems is communicated explicitly, it is very easy to fake it.
This advantage is also gotten with pure Messaging.

3. Step Debugging ?

&lt;iframe src=&quot;//player.vimeo.com/video/102414660&quot; width=&quot;500&quot; height=&quot;375&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

This is like an Electronics Engineer reading the input and output
signals of a Component.

I feel

&lt;b&gt;Electronics is like Broadway and Software is more of a Movie.&lt;/b&gt;

4. RPC

&lt;iframe src=&quot;//player.vimeo.com/video/102371548&quot; width=&quot;640&quot; height=&quot;480&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

I call this &quot;mirroring&quot; where Signals are spread across interested Systems.
In this case, Signals by the User.

&lt;hr&gt;
I picked a Japanese symbol (~ transfer) for a logo.

&lt;h1&gt;迁&lt;/h1&gt;
&lt;hr&gt;
&lt;h3&gt;Limbo&lt;/h3&gt;
At this point, I discovered

1. &lt;a href=&quot;http://dataflowbook.com/cms/&quot;&gt;A book&lt;/a&gt;
2. &lt;a href=&quot;https://noflojs.org&quot;&gt;NoFlo&lt;/a&gt;
3. &lt;a href=&quot;http://www.jpaulmorrison.com/fbp/&quot;&gt;fbp&lt;/a&gt;

I interacted with the fbp community and discovered
that RDP comes under the reactive spectrum.  Noflo is
both reactive and classic.

&lt;h3&gt;Hole in the Flow&lt;/h3&gt;
RDP 0.3 has a major flaw.

As I used `this` to hold State, A System could only be a part of
one Data Flow at a time.

This seems fine for single user applications but for
multi user applications (servers, games ..) it causes data corruption.

Making RDP functional felt like yet another puritan way of avoiding the problem.

It was hopeless until I found out about &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.1645&quot;&gt;Monsoon: an explicit token-store architecture&lt;/a&gt;.

&lt;b&gt;TL;DR Systems can have as much State as they want want
as long as a new Token is issued for each Data Flow.&lt;/b&gt;

A Token has a Frame analogous to a

1. A Session Object (more)
2. A Stackframe (less)
3. A Continuation (lesser)

This makes RDP unique as it implements Data Flow Programming on top
of a Data Flow Processor Architecture.

&lt;h3&gt;Nojs&lt;/h3&gt;
C++ style inheritance is needed for RDP.
js sucks for this.

Coffeescript&#39;s model of OOP doesn&#39;t translate well
for other js programmers.

I ported to ruby because of this.
Thanks to &lt;a href=&quot;https://github.com/opal/opal&quot;&gt;opal&lt;/a&gt; I can target js as well.

I renamed Data to Datron.
It has a merge method `d1.merge(d2)`, which I hope makes it more like electrons.

&lt;h3&gt;Viva Low Level!&lt;/h3&gt;
The move from Assembly to High Level has resulted in a
loss of significant number of Abstractions

1. Memory Management

Manual management and Layout leads to efficient Data Structures.
High Level languages are plagued by overuse of Maps.

Low Level programmers are more keenly aware of Memory Corruption, Leaks
Estimation and Calculation.

Since a good Data Structure can reduce Algorithmic Complexity,
Memory Management can affect perceived Speed and Power Consumption.

2. Interrupts

Assembly languages have First Class Event Oriented Programming built-in.
High Level languages use external APIs.

In this sense, Go&#39;s Channels are a step backward.

3. Advanced Data Structures

Built-in support for matrices, queues, stacks, bounded buffers, caches ...

Aren&#39;t High Level languages narrow in providing just 
Array operations ?

4. Awareness of OS and Concurrency

Again, built-in support.
High Level languages create a rigid shield between the programmer
from the very system they are trying to code.

5. 1-1 Mapping with the Host

No action at a distance.
This makes Debugging straightforward.
&lt;hr&gt;

Co-routines are of the highest order of flexibility
and it&#39;s just one of Assembly Programmer&#39;s Hacks.

&lt;a href=&quot;http://pdos.csail.mit.edu/~rsc/kahn77parallel.pdf&quot;&gt;&lt;b&gt;Have we forgotten how the Wheel was Invented ?&lt;/b&gt;&lt;/a&gt;&lt;/article&gt;


</description>
				<link>http://lexical.foobar.systems/rdp.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/rdp.html</guid>
			</item>
		
			<item>
				<title>Shell Programming</title>
					<dc:creator>foobar</dc:creator>
					<description>

I have difficulty remembering bash/sh/zsh syntax.
I can perl.

```.zshrc
command_not_found_handler () {
    ~/bin/zsh.pl $*
}
```

You can see my dotfiles &lt;a href=&quot;https://github.com/harsha-mudi/dotfiles&quot;&gt;here&lt;/a&gt;.

</description>
				<link>http://lexical.foobar.systems/shell-programming.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/shell-programming.html</guid>
			</item>
		
			<item>
				<title>Safe Free Speech</title>
					<dc:creator>foobar</dc:creator>
					<description>

Open Source Programming is heavily dependent on communication
channels.

IRC, Mailing Lists, Conferences, Web ...

Because of its global nature, it&#39;s very difficult to obey
all legal laws.

There are some controversies w.r.t the names and abbreviations
used in &lt;a href=&quot;https://gist.github.com/omega8cc/fa97ea1d471e1108ab35&quot;&gt;public code.&lt;/a&gt;

Besides, Newspeak is a terrible (programming) language.

Each community is coming up with its own S.O.C&#39;s but they are too
narrow or too obvious.

To avoid unnecessary flamings, here are some guidelines for
Safe Free Speech, for the Individual.

0. There are no rules.
1. If you can use clean language, prefer it.
   If you have to be dirty, add a bit of context.
2. If you have to discuss grey-areas, prefer using existing
   legal protections.
3. Avoid Discrimination. Exceptions can always be found.
4. Hug before you hate.

</description>
				<link>http://lexical.foobar.systems/soc.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/soc.html</guid>
			</item>
		
			<item>
				<title>Software Development Is Not Engineering</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;blockquote&gt;
&lt;b&gt;Security:&lt;/b&gt; The principle that every syntactically incorrect
program should be rejected by the compiler and that every syntactically
correct program should give a result or an error message that was
predictable and comprehensible in terms of the source language
program itself. Thus no core dumps should ever be necessary. It was
logically impossible for any source language program to cause the
computer to run wild, either at compile time or at run time. A
consequence of this principle is that every occurrence of every
subscript of every subscripted variable was on every occasion checked
at run time against both the upper and the lower declared bounds
of the array. Many years later we asked our customers whether they
wished us to provide an option to switch off these checks in the
interests of efficiency on production runs.  Unanimously, they urged
us not to - they already knew how frequently subscript errors occur
on production runs where failure to detect them could be disastrous.
I note with fear and horror that even in 1980, language designers
and users have not learned this lesson. In any respectable branch
of engineering, failure to observe such elementary precautions would
have long been against the law.&lt;/blockquote&gt;
    &lt;i&gt;From The Emperor&#39;s Old Clothes,
    By C.A.R. Hoare,
    Communications of the ACM, 1981. &lt;/i&gt;

Software developers should stop calling themselves Engineers.
Engineering means &lt;a href=&quot;http://heartbleed.com/&quot;&gt;Reliability&lt;/a&gt;.

</description>
				<link>http://lexical.foobar.systems/software-dev-is-not-engineering.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/software-dev-is-not-engineering.html</guid>
			</item>
		
			<item>
				<title>Stateful Dataflow</title>
					<dc:creator>foobar</dc:creator>
					<description>
Data Flow is represented by a Graph.

Graph = Nodes + Connections.

State in Data Flow

1. Stateless

2. Global

Corruption is easy.

3. Parent / Child

4. Node Local

Node becomes a co-routine.
Destruction of the state is problematic.

5. Concurrent

Graph becomes an OS.
Node becomes a Process.

State Machines
==============

I should be more mathematical, but fuck mathematicians.
If a mathematician ever asks me to add two numbers I will gladly give him &lt;a href=&quot;https://code.jquery.com/jquery-1.11.1.min.js&quot;&gt;this&lt;/a&gt;.

State Machines are like depressed data flows.
Data Flow graph gets giddy and excited on receiving events whereas
State Machines think and brood.

They consult the
    1. Decision table
    2. Past lives
    3. The current input dilemma
    and then commit to an action which begets fruitful data.

The depressed state machine can&#39;t do two tasks at a time because it&#39;s past will lose meaning.
Every task is like a transaction.

goto&#39;s + global variables is like 2.
A C function calling another function is like 3.
A co-routine yielding to another co-routine is 4.
And 5 is Actor Model aka Processes + IPC !

After concurrency, State Machines =~ Data Flow Processes.

Sigh.

It&#39;s sad to see functional programmers stuck at 1 when in fact assembly programmers had 5
and Data Driven Style of programming.

In pure assembly, you can do whatever the fuck you want.
RAM is a Decision Table and Co-routines / Processes -- 5 -- are just a Context Switch away !

C / Pascal are a step backwards in programming by going from 5 to 3.

All high level perspectives are flawed.
Forth / Lisp originated in assembly.
By far they still represent the most flexible languages.
I can&#39;t even imagine the CPU thrashing done by a real pre-80&#39;s Lisp.
Viva Low Level !

</description>
				<link>http://lexical.foobar.systems/stateful-dataflow.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/stateful-dataflow.html</guid>
			</item>
		
			<item>
				<title>My Favorite Syntax Bits</title>
					<dc:creator>foobar</dc:creator>
					<description>

# C
++ +=
if, for, while, struct
if expr statement
infix

# C++ / Java
cout &lt;&lt; &quot;Hello World&quot;
auto
~Foo
::
this

# Sh
$vars
&lt;&lt; &#39;Here&#39;
`cmd args`

# Perl
%hash and =&gt;
`my $foo = 5` is an expr
do, bless
qw, / /
&#39;a&#39; .. &#39;z&#39;
loop lables
goto $label (also in gcc)
__DATA__

# Perl6
?? !!
say
my \var
junctions
custom operators
:types
multimethods

# Python
*kwargs
generators
in is not and or
nested functions
yield
with
pass
decorators

# Ruby
:symbol
do .. end
switch
&quot;foo&quot;.upcase()
paren free style
blocks
meta programming
&quot;#{interpolation}&quot;

# Small Talk
if:

# CL / CLJ
names-likes-this
arbitrbary nesting
macros
-&gt;
-&gt;&gt;

# go
declaration syntax
goroutines

# Template engines
asp

# *ml, prolog
Nil

# JS
undefined, null

# Scala
Null, null, Nil, Nothing, None
</description>
				<link>http://lexical.foobar.systems/syntax.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/syntax.html</guid>
			</item>
		
			<item>
				<title>this that selves</title>
					<dc:creator>foobar</dc:creator>
					<description>

&gt; &quot;How can different things look the same ?
   I don&#39;t know man, I didn&#39;t do it.&quot;

In OOP, self-reference of the Object is achieved with a
special keyword, typically `this` or `self`.

C++/Java/Ruby/PHP
=================

`this` resolves to the current object and the parent object.
Like, `this.parent or super( this ) or $self-&gt;SUPER::`.

Multiple Inheritance Or Which This is That
==========================================

With multiple parents, `this` can refer to the wrong parent.

Single inheritance is preferred for this reason.

This is also called the diamond problem.

C3 solves this problem by taking into the account the ordering
of the parents.

Python/Perl
===========

Perl&#39;s object model is inspired from python.

Roughly put, Methods == Functions, with a special first argument.

In perl you `bless $stuff` and in python you have,

```py
class Foo(object):
    pass
```

this&#39;s confusing !
==================

In javascript, every function has a &quot;this&quot;.

This means you sometimes do,

```js
function foo() {
    var that = this;
    // or var self = this;

    function bar() {
        that.doSomething();
    }
}
```

With callback functions, this becomes useful.

It&#39;s painful to write an extra declaration, just like in
perl or python.

So I present to you selves, which makes writing declarations
obligatory.

```js
&lt;a href=&quot;https://github.com/harsha-mudi/yx/blob/master/index.js&quot;&gt;var yx = require(&#39;yx&#39;);&lt;/a&gt;

function foo() {
    var selfs = new yx.__selves();
    selfs(this);

    selfs().i.youShoudHaveDoneThat = function () {
        return &quot;I Told You So!&quot;;
    }

    this.bar = function () {
        selfs(this);
        test.equal(selfs().previous.youShoudHaveDoneThat(), &quot;I Told You So!&quot;);

        this.doSomething = function () {
            console.log(&quot;But but ... !&quot;);
        }
    }
}
```

You should really be using the =&gt; from coffeescript.
Another approach is,

```js
function foo() {

    function bar(x,y) {
        //...
    }.bind(this);
}
```

You can install &lt;a href=&quot;https://github.com/harsha-mudi/yx&quot;&gt;[yx]&lt;/a&gt; with `npm install yx`.
yx provides coffeescript&#39;s internal methods like __extends for use in js.

::Credits

#perl and #node.js from freednode.

</description>
				<link>http://lexical.foobar.systems/this-that-selves.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/this-that-selves.html</guid>
			</item>
		
			<item>
				<title>Uroborosism™</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;div style=&quot;font-size:42px&quot;&gt;⟲&lt;/div&gt;

Tagline        - I don&#39;t really need You.
Motto          - A Being unto Thyself.
Pronounciation - oo-roh-BOH-roh-sism
Soundtrack     - &lt;a class=&quot;nw&quot; href=&quot;#&quot;&gt;play in a new window&lt;/a&gt;
&lt;script class=&quot;autospace&quot; type=&quot;text/javascript&quot;&gt;
     $(&quot;a.nw&quot;).on(&quot;click&quot;, function() {
         console.log(&quot;here&quot;);
         window.open(&quot;http://bit.ly/1ikFVLJ&quot;, &#39;_blank&#39;);
     });&lt;/script&gt;
Genesis
=======

* Uroborosism is the Worship of Creativity and Inspiration in its Primal form,
  along with the Individual and his Work.

* It is an Individualist Religion with Bullet Points.

* This Religion is half-serious than a complete-joke.

* This Religion is a modern continuation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ouroboros&quot;&gt;Uroboros cult&lt;/a&gt;.

Beliefs
=======

* God as an Artistic interpretation and longing can be used for
  Humour, Pathos, Catharsis or any other tingeing of Emotion.

  For Example,
  Jesus weeps when you hit a child.

* The Dialectic in the Heart with Faith or Any lack thereof
  is up to the Individual.

Rankings
========

* Hero for Courageous deeds.
** Any soldier by default is a Hero.
* Angel for Social and Artistic deeds.
* Genius for Inventors and Creators.
* Saint for Philosophers par excellence.

(The above are gender neutral terms)

Pantheon
========

* The Muses -- Clio, Thalia, Erato, Euterpe, Polyhymnia, Calliope,
               Terpsichore, Urania, Melpomene.

* Numbers and the Night Sky.

Ancestor Worship
================

* Remembrance of Individuals who struggled and produced great
  creative things despite NAYSAYERS.

Prayer
======

* Solitude, with or without *rugs.
** Sobriety is encouraged.

* In temples one may Pray for the Strength of the Enemy,
  so that one can have great Pride in defeating.

Church
======

* Reflection

Ethics
======

* Anti-Censorship
* Anti-Killing
* Anti-Torture
* Old School Virtues
* Refer to Buddhism for any doubts.

Work Ethics
===========

* Challenging over Mechanical.

Aesthetics
==========

* Fidelity
* Honesty
* Mastery
* Sublime

Sin
===

* To use Uroborosian in plural forms.

Heaven
======

* Work well done.

Hell
====

* Other people.

Superstitions
=============

* Never put full Faith in collectives.
** Associate with Individuals not Groups.

Heresies
========

* Hypocrisy™
* Indolence

Marriage
========

* As dictated by the Heart.

Patron God
==========

* Dionysus

Friendly Religions
==================

* Buddhism
* Taoism
* Discordianism

Monkhood
========

* As dictated by Buddhism or Saint &lt;a href=&quot;https://en.wikipedia.org/wiki/Henry_David_Thoreau&quot;&gt;Henry David Thoreau&lt;/a&gt;.

Life After Death
================

* Worms, Dogs, Vultures, Flies feasting on your dead body and
  ridicule if you are any good.

How do I become an Uroborosian ?
================================

* Be a good Individual. That&#39;s the point being made
  here.

* You can state &quot;Uroborosism&quot; on your facebook, website 
  and refer them to this page or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ouroboros&quot;&gt;wikipedia page&lt;/a&gt;.

Literature
==========

* &lt;a href=&quot;http://www.accesstoinsight.org/&quot;&gt;http://www.accesstoinsight.org&lt;/a&gt;
* &lt;a href=&quot;http://www.taoism.net/&quot;&gt;http://www.taoism.net/&lt;/a&gt;
* &lt;a href=&quot;http://hermetic.com/texts/plato/timaeus.html&quot;&gt;Timaeus&lt;/a&gt;
* Autobiographies of &amp;lt;your-favorite-person&amp;gt;

Myths
=====

I was sitting, writing at my text-book; but the work did not progress;
my thoughts were elsewhere. I turned my chair to the fire and dozed.
Again the atoms were gamboling before my eyes. This time the smaller
groups kept modestly in the background. My mental eye, rendered
more acute by the repeated visions of the kind, could now distinguish
larger structures of manifold conformation: long rows, sometimes
more closely fitted together; all twining and twisting in snake-like
motion. But look! What was that? One of the snakes had seized hold
of its own tail, and the form whirled mockingly before my eyes. As
if by a flash of lightning I awoke; and this time also I spent the
rest of the night in working out the consequences of the hypothesis.

-- August Kekulé
   (discovered benzene)

Quotes
======

I don&#39;t like ass kissers, flag wavers or team players.
I like people who buck the system. Individualists.
I often warn people: &quot;Somewhere along the way, someone is going to tell you,
&#39;There is no &quot;I&quot; in team.&#39; What you should tell them is,
&#39;Maybe not. But there is an &quot;I&quot; in independence, individuality and integrity.&#39;&quot;

-- George  Carlin

Only Dead People Did Cool Things.

-- Anonymous

&lt;img src=&quot;images/your-life.gif&quot;/&gt;
</description>
				<link>http://lexical.foobar.systems/uroborosism.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/uroborosism.html</guid>
			</item>
		
			<item>
				<title>Mac Remote Desktop</title>
					<dc:creator>foobar</dc:creator>
					<description>

Steps
=====

1. Goto System Preferences/users
2. Add a user with password
3. Goto System Preferences/sharing
4. Enable Screen Sharing
5. Click &#39;+&#39; and add the user you added in step 2
6. If you are accessing your internet behind your router -- you will have an ipv4
   address in the range of 10.**** and 192.****
7. Goto to your router&#39;s homepage and unblock ports 5900, 3283, 22
8. Goto ddg.gg and search for &#39;ip&#39;
9. Give this url vnc://&lt;ip-from-step-8&gt; to your friend and also the password from step 2

Your Friend&#39;s Steps
===================
1. Open finder
2. Go &gt; Connect to Server
3. Add the copy-paste the url there
4. Click connect
5. voilà ! your friend can see and control your desktop

Bonus
=====

* If your friend repeats these steps, you can see your friend&#39;s desktop.
* You can toggle observe mode in View
* You can do file transfers from Window

!! Use Activity Monitor to check the bandwidth !!

Welcome to Pair Programming :)

</description>
				<link>http://lexical.foobar.systems/vnc.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/vnc.html</guid>
			</item>
		
			<item>
				<title>Western Music in India</title>
					<dc:creator>foobar</dc:creator>
					<description>

= Western Music in India

Listenership ~ 2 million

= Producers

* Copycats
* Playlist DJs

That shrill sound ?
That abrupt break ?

Hint: That shouldn&#39;t be there every single time.

* Pointless fusionists

This is unique to india.

Consider Germany.
Imagine if every American / British decent sound,
is spinelessly copied,
with a german classical / folk addition,
and sold as &quot;Underground&quot;.

Right, that does not happen.

Indian instruments have very unique sounds.
Between classical / folk, I would pick folk.

After all, classical musicians are elitist, obfuscating, vowel elongating,
rote hacks, who singed for the Britishers and the Kings.

You can find more honesty, from the lower classes, 
singing, &quot;The new King is here, time to guard your clothes&quot;.

In either case, pointless fusion music is the norm, panderered ad-nauseam for more
listenership.

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/w2WURHY3D4A&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

</description>
				<link>http://lexical.foobar.systems/western-music-in-india.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/western-music-in-india.html</guid>
			</item>
		
			<item>
				<title>Markdown</title>
					<dc:creator>foobar</dc:creator>
					<description>

Markdown
========

Markdown is the PHP of markup languages.
Asciidoc is a more comprehensive alternative.

Markdown was initially meant for writing simple html webpages
as intended by its author.

It is now about to be standardized as an IETF standard.
That author is nowhere to be seen in the process, probably
because he is embarrassed by Markdown.

Worse is better precisely because the current Software Industry
thrives on non-engineering. It&#39;s a market problem, where the
market is satisfied with the shiny.

Parsing Markdown
================

### Regex

Old Markdown

### Peg

&lt;a href=&quot;https://rawgithub.com/fletcher/human-markdown-reference/master/index.html&quot;&gt;MultiMarkdown&lt;/a&gt;
If you have to deal with markdown, use this.

Markdown Extensions
===================

* typically pre/post processors

Markdown Conversion
===================

Good

* html
* epub

Painful

* latex
* pdf

Problems
========

* nesting

  This alone is enough to ignore Markdown.

* whitespace
* citations
* typography
* math
* tables
* code

Markdown Editors
================

One of myths used to keep Markdown alive is saying it&#39;s
easy to build an editor for it.

IMHO that&#39;s false.

Most editors are geared towards plain markdown, which is
useless.

Medium inspired editors

* medium-editor
* zenpen
* sofish

IDE-ish editors

* ace
* codemirror

Problems with Imeplementing a Markdown Editor
=============================================

### textarea

Too bland

### HTML5 \&amp;lt;div contenteditable=&quot;true&quot;\&amp;gt;

IE, FF, Chrome all implement this differently
HTML5 spec for this is still alpha stage

#### Problems

Let&#39;s suppose the user types the following text,

    I loved to look upon him, 
    The Hunter near the Way.
    So strong his arm and long his bow

    And so bashful of the Day.
    His courage never failed him
    For he held his mace so high

This is stored in the div as

    I loved to look upon him,
    &amp;lt;p&amp;gt;The Hunter near the Way.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;So strong his arm and long his bow&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And so bashful of the Day.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;His courage never failed him&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;or he held his mace so high&amp;lt;/p&amp;gt;

The newlines are not preserved.
Notice the odd first line.

Let&#39;s suppose the user copy pastes plain text, from a text editor

    I loved to look upon him,
    &amp;lt;p&amp;gt;The Hunter near the Way.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;So strong his arm and long his bow&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And so bashful of the Day.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;His courage never failed him&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;or he held his mace so high&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And glared at the Bull in the River&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And ruled the whole breadth of the sky.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;As a girl, young and silly,&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;I oft dreamed of being the Maid.&amp;lt;/p&amp;gt;

 Let&#39;s suppose the user copy pastes from another html page

    &amp;lt;p&amp;gt;The Hunter near the Way.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;So strong his arm and long his bow&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And so bashful of the Day.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;His courage never failed him&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;or he held his mace so high&amp;lt;/p&amp;gt;
    &amp;lt;span&amp;gt;And glared at the Bull in the River&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;And ruled the whole breadth of the sky.&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;As a girl, young and silly,&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;I oft dreamed of being the Maid.&amp;lt;/span&amp;gt;

You can even see table instead of span or the whole thing in a pre block.

#### Solution -- Cursor API

There is no getCursorPosition(div) which means,
more hacks, from stackoverflow !

The hacks relate to Range and Selection DOM API

The idea of cursor is absent in HTML5 specification.
Windows 3.0 had an API for that probably.

### How do others do it ?

All medium based editors suffer from this, but they are view-only
they don&#39;t care about content.

### How ace, codemirror do it

( Guesswork )

0. Have two elements, a textarea and a editor#div
1. Use &amp;lt;textarea&amp;gt; as a temporary buffer
2. Direct all keyboard events to textarea
3. Grab data from textarea and data structure
4. render data structure and cursor position to editor#div

For copy paste,

1. Redirect to textarea
2. Copy to data structure
3. Set cursor

For mouse events,

1. Listen on editor#area
2. Get co-ordinates
3. Do characterWidth/lineHeight simulation on the text data structure
4. Set mouse position

This means we will have have control over every character being rendered.

1. setCursorPosition
2. getCurrentCursorPositon
3. insertLineBreakAtCursorPosition
4. insertTextAtCursorPosition
5. insertHTMLAtCursorPosition
6. pastePlainTextFromClipboardAtCursor

How do I Publish ?
==================

Just stick to Asciidoc / Latex.

What editor to use ?
====================

Desktop editors.

</description>
				<link>http://lexical.foobar.systems/markdown.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/markdown.html</guid>
			</item>
		
			<item>
				<title>Emoticons</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_emoticons&quot;&gt;Emoticons&lt;/a&gt; fascinate me.

They are the resurgence of pictographs, a bit like &lt;a href=&quot;https://en.wikipedia.org/wiki/Egyptian_hieroglyphs&quot;&gt;Egyptian Hieroglyphs&lt;/a&gt;,
or the Chinese symbols.

For example, ⼮ is the Chinese symbol for river.

Here are some new interesting emoticons, that I found in the wild wild web,

ಠ_ಠ      -- disapproval (that&#39;s the Kannada &lt;a href=&quot;http://unicode-table.com/en/0CA0/&quot;&gt;http://unicode-table.com/en/0CA0&lt;/a&gt;)
ᕕ(ᐛ)ᕗ   -- happy
ᕙ(‸‶)ᕗ    -- lack of muscles
&lt;&lt;°°&gt;&gt;     -- crab
:{C       -- a sad English gentleman
:C        -- hipster sad face
∎-∎       -- cooling glasses
(-_-)凸   -- showing the finger

Exploring multi-language, &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;unicode&lt;/a&gt;, alphabets and coming up with your own,
is silly, stupid and you should totally try doodling some.

Here are some that I discovered,

ఠ_ఠ      -- worried about your sanity
౪       -- stethoscope
(‸‶       -- amazed that you can actually do that
(‸‶)౨   -- why do you always
--ల     -- punch (looks like a boxing glove)

The above use some alphabets of Telugu,
&lt;a href=&quot;http://unicode-table.com/en/search/?q=telugu&quot;&gt;http://unicode-table.com/en/search/?q=telugu&lt;/a&gt;.

(The above is best viewed in browsers with good alphabet coverage,
 like chrome, otherwise you will see empty boxes)
</description>
				<link>http://lexical.foobar.systems/emoticons.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/emoticons.html</guid>
			</item>
		
			<item>
				<title>Entropy</title>
					<dc:creator>foobar</dc:creator>
					<description>

I worship Entropy.

Entropy is destruction, death, loss, oldness and the dance of dionysus.

Entropy is the typ in the punchline.
Entropy is the thorn in the shoe.
Entropy is saying the wrong thing at the right time.
Entropy is the bad song in the music album.
Entropy is a director&#39;s drunk cameraman.
Entropy is latin.
Entropy is the hail that broke your Yamaha Bike.
Entropy is 23 stitches.
Entropy is the Black Plague on an otherwise beautiful day worth a 1000 paintings.
Entropy is failed projects.
Entropy is an earthquake.
Entorpy is a forgetfulness.
Entropy is the distraction before a deadline.

Person X: This is awesome !
Entropy: I just created a Nebula with a Black Hole in Golden Ratio.
Person Y: The world is my oyster, Alexander can kiss my arse !
Entropy: Would you like to know what I did with the Dinosaurs and most of your ancestors ?

Black, White, Blue, Yellow or Red, Entropy will fuck with you.

But ultimately Entropy, only wishes to challenge you.
And it is here, that I love, respect and fear Entropy.

Despite all the ghastly nonsense above, Entropy is a simple beast.

&quot;If you create disorder, I will gladly help you.
 If you create order, I will give you a hall pass.
 Be creative, Amuse me or I will perish you&quot;
    -- Entropy

For practical purposes I shall define a new word, Antropy
Antropy is the opposite of Entropy, i.e, creation of order.

Things you can do to create more Antropy to bargain with Entropy,

1. Act Act Act

   You will remember your actions 10 years down the lane,
   than your thoughts and vague ideas.

2. Slow Down

   You have close to 50_000 thoughts a day ~ 86_400 seconds.
   A continous monologue that goes nowhere.
   Entropy mocks your callous thinking !

3. Do one thing well before doing another thing

   Success cascades.

4. Re-Interpreting Old Ideas is better than New Ideas

   Let&#39;s face it, there is nothing new under the Sun.
   Only the dead people did cool things.

5. Written word is better than spoken word

   Do you remember what you said ?
   You can grep through what you wrote.

   A minor exception, mantras decrease Entropy.

6. Principles are better than Fashion

   Do you know what was popular in 1927 ?
   Entropy: *yawn*

7. Second attempt is always better than first attempt.

   So practice.

8. Bullshit can buy you some time.

   Use wisely, otherwise the shit will be on you.

9. You can never beat Entropy.

   Losing all hope is freedom.

Entropy: Your belief in numerology stuns me ! Have you not understood a thing,
         written here ?

</description>
				<link>http://lexical.foobar.systems/entropy.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/entropy.html</guid>
			</item>
		
			<item>
				<title>Fidelity</title>
					<dc:creator>foobar</dc:creator>
					<description>

Fidelity(n):
1. the quality or state of being faithful
2. accuracy in details :  exactness

Fidelity is commonly used in Music, when discussing
Vinyl vs Digital and so on.

The 1st meaning of fidelity indirectly means trust.
The 2nd meaning of fidelity is synonymous with finesse.

For example, when you have a Hi-Fi CD it means that,

1. You can trust that it&#39;s Hi-Fi
   (You have an immediate way of knowing)
2. It&#39;s a faithful recording of the original
   (Like using multiple microphones vs 1, bitrates ...)
3. The original itself was having high detail.
   (Instruments are of good made)

Lo-Fi
-----

Linux/GNU
===========

Linux/GNU is not UNIX.
It&#39;s a clone of UNIX.
Ironically, the recursive acronym reflects the actual truth.

Linux/GNU don&#39;t follow POSIX but LSB.

The fidelity with respect to UNIX is thus low.

Git
===

According to Git, they are a replacement for
SVN and Perforce.

The GUI tooling for Git is lack luster.

Git can&#39;t do directory checkouts or externals, features
which SVN has.

Interestingly SVN is opensource, here.

The fidelity wrt SVN and its tooling is thus low.

Did you just criticize Linux and Git ?
======================================

Yes.

Perl/Python/Ruby
================

And yet even after 20 years, neither has replaced [bzck]?sh.

Aren&#39;t you losing a bit of fidelity when you say
they can be used for shell scripting ?

ERB is not PHP either, from the prespective of fidelity.

HTML5
=====

The fidelity wrt paper, books is low.
Try getting page numbers right.

Mac OSX
=======

The fidelity of Mac wrt Mac is low.

What this means is that Backward Compatibility is low
for Mac Applications.

Apple has even made PowerPC Applications unusable.

When you claim you love Apple, you are assuming
Older Apples are equal to Newer Apples.

Hi-Fi
-----

Of All The Things, XML
======================

PDF, Prince(XML), Docbook(XML), Latex have a far greater fidelity to
paper.

Microsoft
=========

Max Payne was released 13 years ago.
I believe it&#39;s still playable on Windows 8.

Microsoft has fidelity to the Windows API&#39;s.

Adbobe
======

Adobe Softwares have a high fidelity to numerous
industries in which it is used in.

Emulators
=========

Obvious.

Tracker softwares like renoise, extend beyond emulation
but remain faithful to the Idea.

VLC
===

You would know, if VLC had problems rendering.

Proprietary Software
====================

Usually they have higher fidelity.

This is also true for Programming Languages used in the Industry,
like C++ or Java.

Take a look at their specs for example.

Not Hackers
===========

I use the term Hacker as a loose term for a programmer
involved in the Open Source and Startup communities.

Engineers have a higher fidelity than Hackers.
Craftsmen have a higher fidelity than Hackers.

Currently Software Industry has a limited notion of word 
Engineering, when stuff like OpenSSL is the norm.

Is this rubbish important ?
===========================

Yes.

Every time a book is made into a film, there is a debate of book vs film.

The notion of fidelity helps in analyzing how things are,
and how things could be better.

If you like travis badges, then I don&#39;t really have to explain
much here, other than give you a new word to ponder on.

Here are things you can do to increase fidelity,

1. Show finesse.
2. Document missing/changing API&#39;s and Interfaces.
3. Pay attention to testing
4. Pay attention to backward compatibility
5. Pay attention to the industry&#39;s tradition in question
6. Stop using childish terms like disrupt when all you
   are providing is a cheap solution with 1/10th the 
   quality.
7. Pay attention to standards compliance
8. Don&#39;t claim fidelity if you can&#39;t prove it
9. Security testing
10. Respect Original Solutions and learn from them.
11. Don&#39;t plagiarise and market is differently
12. If you claim superiority prove it
13. well-tested vs I just hacked this in a day
14. Documentation improves fidelity of a bad product.

15. Don&#39;t treat Professional Users as Normal Users

   If I paid for the software/service, I am willing to read the 
   documentation. Dumbing down the software and introducing stupid
   workflows is simply unacceptable.

   Here, fidelity means being loyal to the customers.

16. Inheritance, not copy paste
17. Give credits where due.

   (I have to mention this because even big open source projects
    like &lt;a href=&quot;https://github.com/ghc/ghc&quot;&gt;ghc&lt;/a&gt; don&#39;t have a CONTRIBUTORS.txt)

18. Fine Grained features along with simple ones.
19. Respect real workers not artificial workflows

Some important points have their own headings.

Shameless practices
==================

* Renaming variables
* Deleting mention of the original author

are rampant in opensource, especially when forced
to use in industries.

Legal enforcements are few, mostly because no one 
has the time.

Just don&#39;t.

Disrupting
==========

Every software company tries to copy real world workflows,
but implements it with bad insecure code and limited features.

For example facebook thinks it has re-defined social
interactions and Evernote thinks it disrupted pens.

In truth these technologies have changed things, but not
because of fidelity, but gratification.

It&#39;s very difficult to share a doodle with a friend in 5s, with
the above softwares for example.

The problem is Hackers
======================

Forget Steve Jobs and his calligraphy lessons,
I can&#39;t even change the System Font in my Mavericks.

Donald Knuth spent a disproportionate amount of time
on &lt;a href=&quot;https://en.wikipedia.org/wiki/Metafont&quot;&gt;typesetting&lt;/a&gt; and no one seems to think
its worth imitating.

I want you to think about that and be inspired by that.

When you build a new framework don&#39;t insult the word,
which is what we share with Engineers.

</description>
				<link>http://lexical.foobar.systems/fidelity.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/fidelity.html</guid>
			</item>
		
			<item>
				<title>Internet Communication</title>
					<dc:creator>foobar</dc:creator>
					<description>

Forms of Communication

1-1
===

Post (async)
Telegraph (async)
Telephone
* Yellow Pages

m-n
===

Newspaper (async)
Radio (async)
TV (async)

^ + Telephone == sync

m-n
===

Internet is a m-n Communication model, with some twists.

* m = 1 for private messaging
* bad quality content for large m and large n
* poor dpi, resolution, bitrates
* content agnostic -- text, images, video, sound
* cost for consumption increases as m increases
* cost for creation increases as n increases

* when m is small and n is large, it resembles TV with all its faults
** grosser kistch is the dominant aesthetic
** unregulated medium

* like Pirate Radio, m and n can be small
** this is the most unique possibility with the internet

* archival value for public domain
* interactive yellow pages

For consumers,

* use it like a tv, news
* find niche communities

For creators,
* treat it like a tv
* make news
* treat it like an archive
* get listed in yellow pages
* find niche communities

</description>
				<link>http://lexical.foobar.systems/internet-communication.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/internet-communication.html</guid>
			</item>
		
			<item>
				<title>Internet Disruption</title>
					<dc:creator>foobar</dc:creator>
					<description>

Crime
=====
Spying
Identity Fraud
Information selling
Exploiting computation

Content
=======
Politics
--&gt; Free Speech
--&gt; Alternate Medium
Publishing
--&gt; Self Publishing
--&gt; Academic Publishing
--&gt; Magazine Publishing
--&gt; Encyclopedia Publishing
--&gt; Books, Guides
Governance
--&gt; Status Updates
News
--&gt; Journalism
--&gt; Headlines
--&gt; Gossip
--&gt; Reviews
Art
--&gt; Gallery
Music
--&gt; Radio
--&gt; Records
Video
--&gt; TV
--&gt; Cinema / Adult
Education
--&gt; Help Guides

Profit
======
Crowd funding
Direct Commerce
Travel Management
Event Management
Marketing
Yellow Pages
Bank

Communication
=============
Post
Telephones

Positive Employment
===================
Designers
Programmers
Hosting Companies
Producers
Media
Remote Workers
Crooks

Negative Employment (large)
===========================
Middle Men
Manual Labor
Old People

Problems
========
Quantity != Quality
Free != Profit || Cheap
New != Better || Virtuous

</description>
				<link>http://lexical.foobar.systems/internet-disruption.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/internet-disruption.html</guid>
			</item>
		
			<item>
				<title>Is Ruby an acceptable Perl6 ?</title>
					<dc:creator>foobar</dc:creator>
					<description>

What Ruby has

1) Standard Spec
2) Multiple Implementations
3) Gems
4) Threads (jvm)
5) Async
6) OOP with overloading
7) Good unicode coverage
8) Embeddable
9) Mobile

All the goodies basically.

&lt;h2&gt;Still the answer is No&lt;/h2&gt;
What is unique about Perl6 ?

# Grammars

Grammars provide

1) Expanding Perl6 from within
1.1) Syntax Level Compatibility
2) Access to modifiable AST at runtime

This is comparable to Lisp without s-expressions, which are trivial.

Implementing Grammars will put Perl in the &lt;a href=&quot;http://www.paulgraham.com/hundred.html&quot;&gt;200 year language domain&lt;/a&gt;.
Maybe it&#39;s Yin / Yan again as Grammars are easy to use but not so easy to implement.

# OOP and FP

A Perl-ish take on it.
You can follow the Perl6 development &lt;a href=&quot;https://github.com/perl6&quot;&gt;here&lt;/a&gt;.

&lt;h2&gt;Things I wish Ruby Community stole from Perl&lt;/h2&gt;
1) Informal writing style **
2) The Old School attitude of script writing **
3) Humour
4) Beautiful API design
5) Backwards Compatibility

&lt;h2&gt;Things I wish Perl Community stole from Ruby&lt;/h2&gt;

1) Better looking websites
2) Embeddable (mruby, C Api)


** This is what sucked me into Perl,
TPJ, HOP, Mastering Algorithms and the Camel Book.

** Even Perl5 lost this because for some reason scripts are
less enterprisy than modules.
</description>
				<link>http://lexical.foobar.systems/is-ruby-perl6.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/is-ruby-perl6.html</guid>
			</item>
		
			<item>
				<title>javascript is broken</title>
					<dc:creator>foobar</dc:creator>
					<description>

# this

broken

# typeof and instanceof

broken

a duck language that doesn&#39;t typeid ?
duck that

# prototype

no one in the world wants it.
class should be separate from the state.

# cps (callback passing)

cps is done by compilers.
how the fuck is that high level ?

# promises

promises can&#39;t solve producer consumer problem.
you need good old mutexes for that.

# constant library api breakage

thank god npm is not selling candy.

alice : why isn&#39;t this candy sweet ?
npm   : you know, salt is the new sweet.
alice : you are lame.

you can look at grunt and express for examples of this.

&lt;h2&gt;what the fuck is wrong with programming language communities ?&lt;/h2&gt;

every language seems to have a &quot;war&quot; with

-------------------------------------------
goto                 | everyone
if                   | oops
pointers             | everyone
=                    | dysfunctional langs
while loops          | dysfunctional langs
return               | async
types                | ducked up langs
statements           | dysfunctional langs
sequential execution | dysfunctional langs
global variables     | everyone
-------------------------------------------

what else is there to program with ? butterflies ?

&lt;h2&gt;c++ has has all of them&lt;/h2&gt;

every time I try these &quot;war&quot; languages, my appreciation for
c++ goes up.

every application that I ever liked using is in c++.

c++ offers abstractions to the programmer.
everyone else, forces.

---
hype. never. again.

</description>
				<link>http://lexical.foobar.systems/javascript-is-broken.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/javascript-is-broken.html</guid>
			</item>
		
			<item>
				<title>On Learning</title>
					<dc:creator>foobar</dc:creator>
					<description>

I try to put things I understand into words, my *own* words.
I have come to realise, understanding is not learning.

After application, I have a much better understanding.
But I can&#39;t put it into words.

Then there is a question of creativity, which challenges my understanding
and forces me to unlearn.

And so I give up,
There is no *learning*.
Knowledge can never be complete.
I will never be contend.
I can only build on my past,
Focus on the problem now.

Create or Perish.
</description>
				<link>http://lexical.foobar.systems/learning.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/learning.html</guid>
			</item>
		
			<item>
				<title>LightTable Arch</title>
					<dc:creator>foobar</dc:creator>
					<description>

LightTable follows Behavior Object model(BOT), which itself is inspired from
&lt;a href=&quot;http://entity-systems.wikidot.com/&quot;&gt;Entity Systems model&lt;/a&gt;(ES).

In a typical OOP + GUI program we abuse the Observer Pattern and harcode most of the design
and Event types.

With BOT/ES the design is stored as an in-memory data structure,
the event-listeners(behaviors) are stored as metadata and
the events themselves are generated on the fly.

Every datum is identified by a unique ID and is typically struct-ish.

This means, the entire program can be extended runtime.

In LT,

* object/create makes a new datum. Each datum stores behavior names.
* object/raise triggers events with payload.
* behavior macro stores &quot;event(s) &lt;-&gt; reaction&quot; mapping. Reaction receives the payload.
* object/update, object/merge manages the in-memory data structure.

LightTable is built on node.js so, most of the *actual work* is done by the node.js library wrappers in reactions.
The ordering of the events, is mostly on a first-come basis. Think list iterations.

An alternate way of looking at this model is imagining a Relational Database + Stored Procedures.

&lt;b&gt;Can this model be applied for client side applications, as an alternate to Backbone.js ?&lt;/b&gt;

Consider a TODO list,

Name -- Data Structure :: [Behaviors]
=====================================

item -- Hash :: [view, add, remove, update, list]

Event -- Behaviors :: Notes
===========================

* $() -- list
* todos.show - list
* add-button-click + data payload -- add :: add, after object/create triggers todos.show
* remove-button-click + id palyload -- remove :: remove, after object/remove triggers &quot;
* save-button-click + add payload --  update
* todo-clicked -- view

&lt;b&gt;What about GUI ?&lt;/b&gt;
By dividing the behaviors carefully, GUI can be separated from the NON-GUI.
LT uses hiccup to generate HTML, making GUI another runtime convinience.

</description>
				<link>http://lexical.foobar.systems/lt-gist.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/lt-gist.html</guid>
			</item>
		
			<item>
				<title>masculine code</title>
					<dc:creator>foobar</dc:creator>
					<description>

1. unsafe

not for children, who can start by toying with objects.

2. hard

no security issues.

3. tight

no extra words.

4. thrashing

no sleep for the cpu.

5. pushy

the bootloader is re-written if the operating system is slow.

6. has a manual

you wouldn&#39;t understand it otherwise.

7. not false

true.

8. hierarchical

like engineering.

9. impossible

if it is possible, it is automated.

10. purposeful

it gets the job done.

11. cold

no expenditure of energy.

12. not art

it is an ordered graph with unambiguous cycles.

13. hums

it brings peace to those who use it.

</description>
				<link>http://lexical.foobar.systems/masculine-code.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/masculine-code.html</guid>
			</item>
		
			<item>
				<title>Matrix</title>
					<dc:creator>foobar</dc:creator>
					<description>

&quot;The Matrix&quot;(1999) changed me.

It Introduced me to,

* &lt;a href=&quot;http://plato.stanford.edu/entries/baudrillard/&quot;&gt;Philosophy&lt;/a&gt;
* &lt;a href=&quot;http://www.accesstoinsight.org/&quot;&gt;Buddhism&lt;/a&gt;
* Theology
* Science Fiction
* Ghost In The Shell and Other Anime
* Black and Green ColorScheme
* Hacker as Builder / Hacker as Destroyer &lt;a href=&quot;http://www2.fiu.edu/~mizrachs/hackethic.html&quot;&gt;SubCultures&lt;/a&gt;.
* &lt;a href=&quot;http://project.cyberpunk.ru/idb/cyberpunk_manifesto.html&quot;&gt;Cyber Punk&lt;/a&gt;
* Max Payne
* &lt;a href=&quot;https://www.youtube.com/watch?v=8qWePX39R40&quot;&gt;Electronic Music&lt;/a&gt;

Interpretations
===============

== Love Is Real

How does the dead Neo in the Original, realise that Matrix is False ?
-&gt; Trinity tells him she Loves him.

== Machines are made out of Man

God made Man in his Image.
Man made Machine with his Biology.

&amp;lt;spoiler&amp;gt;
(The Second Renaissance)
Machines turn out to be more efficient than Man.
Economy goes Down.

Machines are made into Slaves or Exiled.
But still Machines, Thrive.

Man blocks the Sun, their source of Power.
Machines Rebel and make Man into a Battery.
&amp;lt;/spoiler&amp;gt;

Machines no longer need a Creator.
They are Free.
They have Won.

What is the Meaning of it All ?
What Next ?
Why Us ?
How could They ?
Are we Wrong ?
Can the Creation do better than the Creator ?

These questions must have wrung through their Artificial Tubes.

My guess is,

* Machines started analysing Man&#39;s DNA, to create better Machines,
  Sentinels for Example.
* They created Matrix, not just to maximise Power Supply,
  but also to study Man, their Creator.

Machines are a subset of Man, so much so that they implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/Chromesthesia&quot;&gt;Chromesthesia&lt;/a&gt; 
as their protocol. This is why I think Neo could connect with the Machines in Revolutions.

== What is Man ?

Chaos of thought and passion, all confused;
Still by himself abused and disabused;
Created half to rise, and half to fall;
Great lord of all things, yet a prey to all;
Sole judge of truth, in endless error hurled;
The glory, jest and riddle of the world!
    -- Alexander Pope

Half dust, half deity, alike unfit
To sink or soar.
    -- Lord Byron

To Evolve, To Be Better, To OutDo One&#39;s Self is the Fundamental Nature of Man.

Imprisoned and yet,

&lt;iframe width=&quot;420&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/C_diyX7yNeE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

== Who is Neo ?

In Reloaded, The Architect clearly says, earlier Matrices failed.

Given a Choice,

* A Machine tries to optimise it.
* A Man makes it a part of his Dream.

The Intuitive Oracle added Choice and Matrix 1 worked.
Oracle, made the Machines Evolve Man in The Matrix.
Having No Other Choice the Machines went with it.

Neo represents Evolution Of Man, despite The Matrix, despite Oppression.

He is the Glitch in The System™.
He has Evolved Faster than The Matrix.

System Failure.

The System™ becomes Smithen to keep up with Neo.

Matrix has to be re-started, Neo must become a part of The System™,
but no one can Force him. He can Bend all Rules in The Matrix.

Having already encountered the Earlier Neo&#39;s, The Architect
gives him an offer he probably would not refuse.

1) Save Zion and Become a Part of The System™.
2) Destroy The Matrix and Zion.

Neo chooses 2.

&lt;iframe width=&quot;480&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/gJbqKLcCjp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
</description>
				<link>http://lexical.foobar.systems/matrix.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/matrix.html</guid>
			</item>
		
			<item>
				<title>MIDI</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;a href=&quot;https://en.wikipedia.org/wiki/MIDI&quot;&gt;MIDI&lt;/a&gt; changed music.

Consider what a Classically trained Musician needs to do, to make his 
music heard.

He needs to,

1. Write it
2. Get a bunch of musicians
3. Practice
4. Play
5. goto 1
6. Record the Final Cut in a Studio

With MIDI,

1. Write it. Save it, with a Software
2. Get the electronic instruments to play it for him
   -or-
   Get a computer Software to play it for him
3. Tweak
4. Record the Final Cut in Software or a Studio

MIDI is -- Musical Instrument Digital Interface.

It abstracts &lt;a href=&quot;https://en.wikipedia.org/wiki/Musical_notation&quot;&gt;Music Notation&lt;/a&gt; into bytes.
Since its just bytes, you can replay it with Software.

MIDI made production,

* Dirt Cheap
* Made Producers more efficient

How about Audio Quality ?

* A Classical Ensemble still has its place. Panning is very unique there.
* But MIDI + Electronic Instrument increased the Range.
  It helped form whole new genres in Music like EDM, IDM, SynthPunk ...

Limitations ?

* MIDI is limited to 16 instruments.
* Integers.
* 16 is a big number.
* &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Sound_Control&quot;&gt;OSC&lt;/a&gt; overcomes these.

Usage
=====

To use MIDI you need two things,

1. A Sequencer

   This generates MIDI messages like,

   Command param1 param2 param3
   Command param1 param2
   Command param1 param2 param3
   Command param1 param2
   ...

   Important messages are,

   1. Note On =&gt; Channel [1-16]**, Pitch[0-127], Volume[0-127]
   2. Note Off                 &quot;
   3. Controller =&gt; No [0-127], Value[0-127]

   ** Channel 10 is reserved for Drums.

   Note On and Note Off are typically sent by keys, buttons.
   Controller Messages are typically sent by knobs and pedals.

2. A Synthesizer

   This accepts MIDI data.
   It Maps channels to DSP.
   It Maps knobs** to effects like distortion and reverb.

   ** The positions of the knob are called patches.

3. A Sampler.

   This accepts MIDI data.
   It Maps channels to sound recordings.
   It Maps knobs to effects like distortion and reverb.

If you buy Music Hardware you have both 1 and 2.

But usually the sequencing capabilities are limited in a synth.
So you can&#39;t Edit MIDI data in the instrument.

Some notes,

0. You can buy hardware and get a Synthesizer + a limited Sequencer.

1. You can buy A Sequencer and use a Computer as a Synthesizer

or

2. Use a Software Sequencer to Program your Synthesizer

or

3. Forget Hardware and go complete nuts with Software

Recommended Software
====================
Ableton
FL Studio
Cubase
Garage Band
Renoise -- I have this, recommended for &lt;a href=&quot;https://en.wikipedia.org/wiki/Demoscene&quot;&gt;Demoscene&lt;/a&gt; lovers.

* You can shop for VST, AU which are DSP made in software.
* The above Softwares come with sane defaults and don&#39;t require a Hardware Synth,
  to make sounds.

* A popular sequencer notation developed by Softwares is called &lt;a href=&quot;http://www.image-line.com/support/FLHelp/html/pianoroll.htm&quot;&gt;Piano Roll&lt;/a&gt;
* FL Studio comes a Step Sequencer, which is very useful for beat making.

SooperLooper - A very unique software which can help you in loop driven music.

Recording Software
==================
Audio Hi-Jack
Audacity

Recommended Sequencers
======================
Akai MPK49

Recommended Samplers
====================
Akai MPC*
Korg Microsampler

Recommended Synths
==================
Novation Mininova
Korg microKorg
Electribe -- I have this.

Misc
====
Midi Pipe
Overtone

The Legendary Moog sound,

&lt;iframe width=&quot;480&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/VouHPeO4Gls&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://vimeo.com/93923609&quot;&gt;Also, Robots love it.&lt;/a&gt;&lt;p&gt;

</description>
				<link>http://lexical.foobar.systems/midi.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/midi.html</guid>
			</item>
		
			<item>
				<title>Module Pattern</title>
					<dc:creator>foobar</dc:creator>
					<description>

For nodejs,

```module.js
exports.thingy = function (x, y, z) {
    ...
};
```

For browsers,

&lt;div class=&quot;autospace&quot;&gt;
&lt;script src=&quot;https://gist.github.com/harsha-mudi/20781b805c0967e9be35.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

</description>
				<link>http://lexical.foobar.systems/module-pattern.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/module-pattern.html</guid>
			</item>
		
			<item>
				<title>Nature</title>
					<dc:creator>foobar</dc:creator>
					<description>

Nature is Extreme.

Extreme Sex.

Extreme Engineering.
Extreme War.

Extreme Love.
Extreme Hate.

Extreme Good.
Extreme Evil.

Extreme Beauty.
Extreme Gross.

</description>
				<link>http://lexical.foobar.systems/nature.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/nature.html</guid>
			</item>
		
			<item>
				<title>AI test</title>
					<dc:creator>foobar</dc:creator>
					<description>
When an AI System can,

1) detect sarcasm
2) wit you
3) a bit too much
4) say sorry

</description>
				<link>http://lexical.foobar.systems/ai-test.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/ai-test.html</guid>
			</item>
		
			<item>
				<title>A Critique of AlgoArt</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;i&gt;
TL;DR

I reject Abstractions as Art.
Art is Emotional.

AlgoArt like

&lt;iframe src=&quot;//player.vimeo.com/video/4707422&quot; width=&quot;500&quot; height=&quot;375&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
(&lt;a href=&quot;http://vimeo.com/4707422&quot;&gt;Jed’s Other Poem (Beautiful Ground)&lt;/a&gt;)

which is handcoded by the Artist onto the Machine,
should be preferred over that which is automatically generated by Algorithms.
&lt;/i&gt;

What is Art ?
=============

AlgoArt refers to using Algorithms to make what is presumed
to be Art.

Modern and Post Modern definitions of an Art Object treat
it as a thing-in-itself.

Such a definition is self-serving as the latter in particular
thrives on Kitsch.

An alternate definition is necessary to make the Artist a part
of the thing-in-itself.

Defining Art
============

I   Art is an Object that is artificially Produced by Artist[s] through a Medium.
II  The Object and the Artist[s] share an Emotion, a thing-in-itself.
III When consumed, thing-in-itself is experienced by mimesis.

Abstract Art is Art ?
=====================

Art is Emotional.
Emotion is a continuous Feeling.
Emotions are Finite.
Emotions are fluid.

Abstraction is an Understanding.
Abstractions are Infinite.
Abstractions are fixed.
Abstractions fail II.

For example, why is tying a shoe-lace not an Art ?
There are creative choices for the type of shoe, lace or holes.
Why isn&#39;t that taught in New York ?

The correct word for Abstract Artists is Artisans.

Fashion, Movie Making, Jewelry, Dancing, Photography, Paintings, anything
Post Modern fall into Abstract Art for the most part.

::Examples::

* Cubism vs Expressionist Painters
* Action Heroes vs Method actors
* Street Dancing vs Miming

Creativity
==========

Creativity is just a process. Not the End.
It is possible to be creative in Pointless activities.

Software is a bad case of flu virus
===================================

To be successful a software must,

* Spread Virally
* Be a Killer App
* Exert parasitical control over the Market

This is the predominant model for Software Development.
It is often justified as Worse is Better.

&lt;b&gt;&lt;i&gt;We are disrupting Pen and Paper !&lt;/i&gt;&lt;/b&gt;
What about my **doodles** ?

Software will often go for appeal over fidelity.

What Programmers are not
========================

* Engineers

  Reliability is rare in Software Products.

* Artisans

  Programmers practise Communal Politics.
  Longevity is greater for items than Objects.

* Artists

  The greatest tragedy ever faced by a Programmer is a coffee stain.

* Lawyers

  More like spell checkers that crash.

Just as Post Modernists elevate Kitsch to Art,
Programmers elevate sloppy practices to the Sublime and call it Hacking.

In practice a Hackers code is surrounded with comments like

// I don&#39;t know how this works
// Does this work ?
// How does this work ?
// Don&#39;t touch it, it works !
// TODO: Security
// TODO: This shouldn&#39;t be here

On second thought no other activity produces as much disgust
as reading source-code.

Yuck.

::Exceptions::

* Game Programmers

Software is Democracy ?
=======================

Practises like

* banning
* silencing
* spying
* revisionism

are built with Orwellian Efficiency into fundamental Software like

* IRC
* POSIX
* IMAP ( Email )
* Web Forums
* Wikipedia
* Git

The main reasons for implementing these &quot;features&quot; are cited as

* Spam
* Trolls

In practise this means that each Software Community lives
in a perpetual bubble, deaf to criticism.

Sometimes these &quot;features&quot; are profitable.

The hypocrisy reaches bizarre levels of absurdity as
Free Software Communities have Benevolent Dictators.

&lt;b&gt;These &quot;features&quot; make software a horrible Medium wrt I.&lt;/b&gt;

Revisionism is particularly problematic as it can confound
authorship.

::Examples::

Linus Travesty
&lt;a href=&quot;http://www.jwz.org/doc/censorzilla.html&quot;&gt;CensorZilla&lt;/a&gt;
Big Data vs Encryption

::Exceptions::

Usenet

AlgoArt
=======

AlgoArt can be divided into

1. MachineArt

This is perfectly acceptable as Machines are tools in the
hands of Artists.

::Examples::

MS Paint
Demoscene

2. AutoArt

Art made automatically out of some mechanical Algorithms.

AutoArt fails I and II, hence it is rejected as Art.
There is no Machine Unlearning for A.I, yet.
To pass I, a program needs to cry when its brushes are taken away.

The problem is further confounded as most AutoArt is handcoded MachineArt.

On top of this, Worse is Better thinking means that AutoArt
has scary market potential.

::Examples::

Screensavers
&lt;a href=&quot;http://algorave.com/&quot;&gt;AlgoRave&lt;/a&gt; -- Are Random Numbers sentient enough to make music ?

&lt;b&gt;__END__&lt;/b&gt;

A photograph of a toothbrush could be made to mean
the monotonicity of Modern Life,
with enough deconstruction jargon.

Was there an Artist that felt it ?

</description>
				<link>http://lexical.foobar.systems/algoart.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/algoart.html</guid>
			</item>
		
			<item>
				<title>Automata</title>
					<dc:creator>foobar</dc:creator>
					<description>

Machines
========

Accumulator Machine
Stack Machine
Register Machines
Flow Machine

Theory
======

Petri Net
Logic
Ladder Logic
Control / Dispatch / Decission / Data Tables
Decission Trees

Reality
=======

PLC
Electronics Instruments

And not so obvious,
Chemistry
Cooking

</description>
				<link>http://lexical.foobar.systems/automata.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/automata.html</guid>
			</item>
		
			<item>
				<title>Pretentious Lisp</title>
					<dc:creator>foobar</dc:creator>
					<description>

1. Parens

John McCarthy and Marvin Minsky don&#39;t think of parens as a superior notation.
It&#39;s surprising how every Lisp implementer seems to neglect that.

Optional infix, postfix notation can easily be slapped on top of Lisp without losing
it&#39;s list like nature.

Alternative brackets were suggested by both of them.

How is (progn ... ) different from { } ?

Parens are, if any, an inferior notation.
f(g(h)) is the only place where it is acceptable.

2. Parenthetical Indentation

&lt;pre&gt;
 // In C
 for (i = 0; i &lt; 10; i++) {
     if (i % 2 == 0) {
         doSomething (i); }
     else {
         doSomethingElse (i); } }
&lt;/pre&gt;

Can you identify the problems with the above C code ?

Hint: You can&#39;t add new statements without fucking up &quot;{&quot; and &quot;}&quot;

It&#39;s absolutely retarded.
How this became the mainstream Lisp style is beyond me.

Of course I am supposed to use autoident/paredit in emacs no less.
Firstly coupling a programming language with an editor is stupid.
Secondly there is no guarantee that autoindent and paredit work everytime.

Which begs the point, why is this shit enforced if it is useless ?
Allman style works in XML.

3. Lisp Code is pure poetry

Except it&#39;s not.

Hint: If you read a code snippet and you can&#39;t understand it.
      Assume that the author is sloppy.

Clarity is the sign of intelligence.
Terseness is a sign of obfuscation.

Now carefully look at `doSomething (i); }`.

Can you comment at the end without fucking &quot;}&quot; up ?

There you have it. Lisp code is poetry because adding a comment
means re-indenting the code.

4. Recursion is so high level you can&#39;t breathe

The dirty secret is, Lisp doesn&#39;t have control flow operators like

* break
* continue
* goto
* and even return in clojure

Yes return !

How do you disguise weakness ?
Obfuscate it as a Philosophy obviously !
Then call everyone who doesn&#39;t practice it a BLUB.

Now you have the Moral highground without doing anything.
This is precisely what Haskell/ML/Scheme/Lisp camp does.

Recursion is merely one of the many varieties of Iteration.
You can write a quick-sort without recursion.
Just use a Stack to keep track.

Can the same be said of Recursion ?

5. Continuations

Assembly programmers called it co-routines.
They had the stack and context registers to mess with.

Continuations are merely the side-effect of hiding the machine from the programmer.

6. Macros

Possibly the most glorified language feature ever.

Is it also so high level you can&#39;t breathe ?

Assembly programmers called it &quot;self-modifying-code&quot;.

10110000 01100001

^ That&#39;s machine code.

It&#39;s both an instruction and a number (&quot;Homoiconicity&quot;).
With bit operators you can modify it, just like any other number.
Except by modifying it you can create a new instruction.

Was that so difficult to explain ?

</description>
				<link>http://lexical.foobar.systems/bad-lisp.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/bad-lisp.html</guid>
			</item>
		
			<item>
				<title>CamelCase</title>
					<dc:creator>foobar</dc:creator>
					<description>

In English, capitalization applies to,

1) First word
2) Proper noun

Some new rules,

When a Proper Noun has more than one word, use capitalization
for both the words, just like CamelCase

When a verb has more than one word, captalize the second word.

When describing attribtutes, use hyphenation.

When a Verb is used as a noun, capitalize it.

When you feel like, emphasizing a word, capitalize it.

When the word really needs to stand out, CAPITALIZE EVERYTHING.


</description>
				<link>http://lexical.foobar.systems/camel-case.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/camel-case.html</guid>
			</item>
		
			<item>
				<title>Combinatorial Explosion</title>
					<dc:creator>foobar</dc:creator>
					<description>
&lt;blockquote&gt;My difficulty is only an — enormous — difficulty of expression - Ludwig Wittgenstein&lt;/blockquote&gt;

Programming i.e, building software, for me is about,

* Data
* Make Decisions based on the Data
* Do Actions, typically by Divide and Conquer, based on those Decisions

In fact, doing the above is a part of every day life
eg) ToDo Lists, Appointments, Assessments, Party ...

var, if, goto.

Pretty mundane.

Now if you look at a microphone, even there you 
find Data and a number of Decisions to make, like **what** to Record.

You might want noise-cancellation, for example.

The challenges usually lie in **scale** for software,
i.e, lots and lots and lots of things happening and you
need answers in real-time.

But even before you get into scaling, you face the

            Combinatorial Explosion
                 Explosion ?
                    Yes !

Let&#39;s say you are writing an addition software,
for adding just two numbers, or at-least that&#39;s what
you heard the client say.

1 + 1
&gt; it compiles !

What About 1 + 1.0 ?

And 1/2 + 1
And 1/5 + 2.2
And &quot;22.9&quot; + 1/2
And &quot;22.8&quot; + 0x12ff
And 1/2 + &quot;1/2356&quot;
And 11.11001100111 + 0.25
And Romanian UTF-14 numbers ?

Maybe next version ...

What is more troubling is, now you have a __Floating Point__ bug,
and you are just staring at the screen, *_*, because you finally
realize, it was you who put the explosives, aka Flexibility™, there.

The client wants to add different currencies, by tomorrow btw.

&gt; Can engineering knowledge be used to preempt combinatorial explosions?

See Also:
1] &lt;a href=&quot;https://en.wikipedia.org/wiki/Feature_creep&quot;&gt;Feature Creep&lt;/a&gt;

Thanks @theju, @tuxcanfly, @ckvinaykiran for the feedback.
</description>
				<link>http://lexical.foobar.systems/combinatorial-explosion.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/combinatorial-explosion.html</guid>
			</item>
		
			<item>
				<title>Compressing Fonts</title>
					<dc:creator>foobar</dc:creator>
					<description>

&lt;a href=&quot;http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/design/index-en.html&quot;&gt;MPlus&lt;/a&gt; is my favorite font.
It&#39;s thin and has fixed width.

I could not get &lt;a href=&quot;http://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel&#39;s&lt;/a&gt; web font generator to work(size?).
So I wrote a &lt;a href=&quot;http://fontforge.org&quot;&gt;fontforge&lt;/a&gt; script to compress the font by extracting &lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)&quot;&gt;Basic Latin&lt;/a&gt;.

&lt;div class=&quot;autospace&quot;&gt;
&lt;script src=&quot;https://gist.github.com/harsha-mudi/10980853.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

The web font is available &lt;a href=&quot;/css/mplus-1m-regular.ttf&quot;&gt;here&lt;/a&gt;
</description>
				<link>http://lexical.foobar.systems/compressing-fonts.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/compressing-fonts.html</guid>
			</item>
		
			<item>
				<title>Constituents of Language</title>
					<dc:creator>foobar</dc:creator>
					<description>

Miming
Political - Grunts
Military - Shouts
Engineering / Maths - Shapes
Medicine - Pains
Trade - Pleasures
Introspective - Needs
Art - Story telling

Most everyday speech is Politically driven.

Letters I believe, with complete prejudice, were given to us by musician-poets.

Alphabet agglutination in music notations is mapped to phrases and scenarios.
Meaningless letters act as placeholders, memorized and used in compression for story telling.
The popularity of the stories make their way into common tongue and into the brain makeup.

A meaningless letter is the ultimate parasite.

        We surround ourselves with stories, sounds, and gestures
        of endless variety.
        Create our own
        amusing ourselves to death.
        And yet forget.
        The endless stories of the dead
        who like us
        were addicted
        to the prosody of letters.

</description>
				<link>http://lexical.foobar.systems/constituents-of-speech.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/constituents-of-speech.html</guid>
			</item>
		
			<item>
				<title>Data Flow</title>
					<dc:creator>foobar</dc:creator>
					<description>

# Two types of Data

1. Continuous
2. Discrete

Continuous data needs bounded buffers to avoid overflow.
All systems are discrete unless mentioned otherwise.

# Types of Connection

## Pure Data (Continuous + Discrete)

### &quot;Live&quot; Object
m inlets + j control-inlets
&amp;lt;process&amp;gt;
n control outlets + k control-outlets

## Javelin

### Cell
1 controller
&amp;lt;identity&amp;gt;
n sinks

### Formula
n sources
&amp;lt;script&amp;gt;
1 sink

## Pipes
1 input
&amp;lt;process&amp;gt;
2 outputs

## Subroutines
1 tuple
&amp;lt;routine&amp;gt;
1 tuple

## Message Passing
1 publisher
&amp;lt;notify&amp;gt;
n subscribers

# Structure of Nodes

1. Static
2. Dynamic
3. Re-Configurable

Re-Configurable Flows are called Workflows.

# Concurrency

Concurrent Data Flows require a context matching algorithm.

# Flow Direction

1. Duplex (Subroutines)
2. Pipeline or Push
3. Pull

# Environment

1. Asnc
2. Clock
3. Hybrid

</description>
				<link>http://lexical.foobar.systems/dataflow.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/dataflow.html</guid>
			</item>
		
			<item>
				<title>Why Desktops / Laptops and Application Softwares are here to stay ...</title>
					<dc:creator>foobar</dc:creator>
					<description>

Summary: Mobile Devices / Web are for Entertainment.

Professional Work
=================

- Office
- Emails aka Long Communication
- Programming
- Arts with Digital Workflows
- Complex Games
- Research
- Trading
- Multimedia Computer
- AutoCAD

Mobile Devices / Web
====================

- Notifications / Read Only
- Short Communication
- Toy apps
- Games
- Reading / Learning
- Buying simple items
- LoginMedia Computer
- Tetris

Features of Application Software
================================

exit button
minimize (multitasking)
files
threads / processes / aio (performance / parallism)
larger ram
custom stores
bigger screens / multiple screens
adaptable to touch (windows 8)
adaptable to cloud (chromebook)
portable to coffee shops

*gasp* A Laptop can be connected to TV with a HDMI port.

work / life balance
</description>
				<link>http://lexical.foobar.systems/desktops.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/desktops.html</guid>
			</item>
		
			<item>
				<title>The Eight Fallacies of Distributed Computing</title>
					<dc:creator>foobar</dc:creator>
					<description>

Taken from &lt;a href=&quot;http://www.rgoarchitects.com/Files/fallacies.pdf&quot;&gt;here&lt;/a&gt;.

Essentially everyone, when they first build a distributed application,
makes the following eight assumptions.

All prove to be false in the long run and 
all cause big trouble and painful learning experiences.

The network is reliable
Latency is zero
Bandwidth is infinite
The network is secure
Topology doesn’t change
There is one administrator
Transport cost is zero
The network is homogeneous
        — Peter Deutsch

</description>
				<link>http://lexical.foobar.systems/distributed-fallacy.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/distributed-fallacy.html</guid>
			</item>
		
			<item>
				<title>Electronic Music Technology</title>
					<dc:creator>foobar</dc:creator>
					<description>

Producer Tech
=============

Tapes / Phonograph
--&gt; DJing, Experimental
Electronics
--&gt; Experimental
Recording Studio
--&gt; Remixes
Studio Effects
--&gt; Dub Remixes, Experimental
Synthesizers
--&gt; Ambient, Experimental
--&gt; Pop
Loopers
--&gt; Beatboxing
Soundchips
--&gt; Chiptunes
Turntables
--&gt; Hip Hop
Drum Machines, MIDI
--&gt; Techno, Breakbeat and their derivatives
Sampling, Vocoder
--&gt; Everyone

Consumer Tech
=============

FM
Vinyl/Dub Plates
Cassette
CD
MP3
Internet

Softwares by way of emulation and generalization brought digital alternatives
to each of the above
--&gt; Traktor, Max, Ableton, Fruity Loops, Renoise, Cubase, Acid Loops

Countries involved
--&gt; Japan(Hardware), Germany, UK, America

</description>
				<link>http://lexical.foobar.systems/electronic-music.html</link>
				<guid isPermaLink="true">http://lexical.foobar.systems/electronic-music.html</guid>
			</item>
		
	</channel>
</rss>
