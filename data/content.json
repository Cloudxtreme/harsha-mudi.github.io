[{"title":"Why I am excited about Entity Systems","author":"Sreeharsha Mudivarti","tags":["programming","future"],"copyright":"CC BY-NC","__content":"\n\nComputing is still primitive and Fragile.\n\nFor example, <a href=\"https://en.wikipedia.org/wiki/Typography\">Typography</a> is an ancient profession.\nCSS3 is just cute, compared to what Typographers can do.\n\nIt is haughty to think that computers can do everything, with fidelity.\n\n<a href=\"https://en.wikipedia.org/wiki/Donald_knuth\">Donald Knuth</a> spent a disproportionate amount of time on typesetting,\nand rightfully so.\n\nTo put Entity Systems in context, here is a list of programming\nparadigms as used in the Software Industry.\n\nAutomata Programming\n====================\n\nAutomata/ State Machines are at the heart of all Software.\n\n* Parsers\n* Validation Mechanisms\n* Protocols\n* Circuit Design\n* Industrial Robots\n\nCurrently state machines can be implemented by the following\ntechniques,\n\n1. <a href=\"https://en.wikipedia.org/wiki/State_pattern\">State Pattern</a>\n\n   This is the OO way of doing it.\n\n2. <a href=\"https://en.wikipedia.org/wiki/Dispatch_table\">Dispatch Tables</a>\n\n   This uses function pointers.\n\n3. Goto's\n\n   I find it appalling that gotos are considered a <a href=\"http://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement\">joke</a>.\n\n   Here is a Knuth's defence of <a href=\"http://cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf\">goto</a>. The paper also has a hint of satire,\n   on how programming language designers are complicit in advocating <a href=\"https://en.wikipedia.org/wiki/Newspeak\">Newspeak</a>,\n   for \"safety\".\n\n   Just for a perspective, see the <a href=\"http://svnweb.freebsd.org/base/stable/9/sys/netinet/tcp_input.c?view=markup#l631\">tcp/ipv4</a> code from FreeBSD.\n\n   This code is used by <a href=\"http://www.scei.co.jp/ps4-license/\">Sony</a> and many embedded systems.\n   The Linux implementation is <a href=\"https://github.com/torvalds/linux/blob/master/net/ipv4/tcp.c\">similiar</a>.\n\n<blockquote>The most critical piece of Internet Infrastructure is designed\nas a state machine using goto's.</blockquote>\n\n   Using goto's is hardly different from Dispatch Tables.\n   RAM is a hardware implementation of a table.\n\n   Why is there, no joke on this <a href=\"http://lua-users.org/wiki/GotoStatement\">page</a> ?\n   Probably because it's used in the Electronics Industry.\n\n   Blaming goto's is like blaming a Scalpel.\n\n\nStructured Programming\n======================\n\nThis has the following styles,\n\n1. Procedural Programming\n\n   See <a href=\"http://sunnyday.mit.edu/16.355/wirth-refinement.html\">Program Development by Stepwise Refinement</a>\n   Typically how you write C programs.\n\n2. Objective Programming\n\n   <a href=\"https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)\">Encapsulation</a> for me, is the most important idea here.\n\n3. Modular Programming\n\n   <code>\n   &gt;&gt;&gt; import this\n   ...\n   Namespaces are one honking great idea -- let's do more of those!\n   </code>\n\n4. Functional Programming\n\n   Functional programming structures code around transformations,\n   than state changes.\n\n   It's tricky to do <a href=\"http://prog21.dadgum.com/23.html\">Games</a> in Pure Functional Programming.\n   Impure Functional Programming as seen in Common Lisp, Clojure,\n   Perl, Python, Ruby, OCaml is more successful.\n\nDeclarative Programming\n=======================\n\nThe following are some fine examples,\n\n1. HTML, make\n2. SQL, Logic Programming\n3. DSL's and Scripting Components.\n\n   See <a href=\"http://martinfowler.com/articles/rake.html\">Rake</a>, <a href=\"http://www.blender.org/documentation/blender_python_api_2_70_release\">Blender API</a>\n\n4. Generative Programming\n\n   This includes Lispy Macros, <a href=\"http://dinosaur.compilertools.net/yacc/\">yacc</a>.\n\nEvent Driven Programming\n========================\n\nComputers react to events.\n\n1. Messaging\n\n   <a href=\"http://zeromq.org/\">Zero MQ</a>\n\n2. <a href=\"https://en.wikipedia.org/wiki/Observer_Pattern\">Observers</a>\n3. Callback (Hell)\n4. Services\n\n   See <a href=\"https://en.wikipedia.org/wiki/REST\">REST</a>\n\nData Flow Programming\n=====================\n\nThis is my favorite paradigm.\nImpure Functional programming fits nicely here.\n\n1. Unix <a href=\"http://doc.cat-v.org/unix/pipes/\">Pipes</a>\n\n   Nuff said.\n\n2. Max/Pure Data\n\n   <a href=\"https://www.youtube.com/watch?v=7Y_Tzelw91g\">You just have to see it</a>.\n\n3. Spreadsheets\n\n   Most widely used Programming Language if you ask me.\n\n4. Visual Programming\n\n   A bit of a stretch, but anything from Photoshop layers to Circuit Design goes here.\n\nParallel Programming\n====================\n\n<a href=\"https://en.wikipedia.org/wiki/Erlang_(programming_language)\">Erlang</a> is a great success story.\n\nEntity Systems\n==============\n\nIn a way <a href=\"http://cbpowell.wordpress.com/2012/10/30/entity-component-game-programming-using-jruby-and-libgdx-part-1/\">Entity Systems</a>, takes concepts from every one of the above.\nI am not even sure it's a new Paradigm.\n\nBut the reason I am excited about Entity Systems is, it puts us right back\ninto <a href=\"https://en.wikipedia.org/wiki/Batch_processing\">Batch Computing</a>. Entities are stored centrally and Systems perform batch operations on them.\n\nAnd best of all, it is battle tested by Game Developers.\n\n","front_matter":"---\ntitle: \"Why I am excited about Entity Systems\"\nauthor: Sreeharsha Mudivarti\ntags: [programming, future]\ncopyright: CC BY-NC\n---","filename":"why-i-am-excited-about-entity-systems","mtime":"2014-07-10T16:51:35.000Z","mime":"text/plain","html":"\n\nComputing is still primitive and Fragile.\n\nFor example, <a href=\"https://en.wikipedia.org/wiki/Typography\">Typography</a> is an ancient profession.\nCSS3 is just cute, compared to what Typographers can do.\n\nIt is haughty to think that computers can do everything, with fidelity.\n\n<a href=\"https://en.wikipedia.org/wiki/Donald_knuth\">Donald Knuth</a> spent a disproportionate amount of time on typesetting,\nand rightfully so.\n\nTo put Entity Systems in context, here is a list of programming\nparadigms as used in the Software Industry.\n\nAutomata Programming\n====================\n\nAutomata/ State Machines are at the heart of all Software.\n\n* Parsers\n* Validation Mechanisms\n* Protocols\n* Circuit Design\n* Industrial Robots\n\nCurrently state machines can be implemented by the following\ntechniques,\n\n1. <a href=\"https://en.wikipedia.org/wiki/State_pattern\">State Pattern</a>\n\n   This is the OO way of doing it.\n\n2. <a href=\"https://en.wikipedia.org/wiki/Dispatch_table\">Dispatch Tables</a>\n\n   This uses function pointers.\n\n3. Goto's\n\n   I find it appalling that gotos are considered a <a href=\"http://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement\">joke</a>.\n\n   Here is a Knuth's defence of <a href=\"http://cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf\">goto</a>. The paper also has a hint of satire,\n   on how programming language designers are complicit in advocating <a href=\"https://en.wikipedia.org/wiki/Newspeak\">Newspeak</a>,\n   for \"safety\".\n\n   Just for a perspective, see the <a href=\"http://svnweb.freebsd.org/base/stable/9/sys/netinet/tcp_input.c?view=markup#l631\">tcp/ipv4</a> code from FreeBSD.\n\n   This code is used by <a href=\"http://www.scei.co.jp/ps4-license/\">Sony</a> and many embedded systems.\n   The Linux implementation is <a href=\"https://github.com/torvalds/linux/blob/master/net/ipv4/tcp.c\">similiar</a>.\n\n<blockquote>The most critical piece of Internet Infrastructure is designed\nas a state machine using goto's.</blockquote>\n\n   Using goto's is hardly different from Dispatch Tables.\n   RAM is a hardware implementation of a table.\n\n   Why is there, no joke on this <a href=\"http://lua-users.org/wiki/GotoStatement\">page</a> ?\n   Probably because it's used in the Electronics Industry.\n\n   Blaming goto's is like blaming a Scalpel.\n\n\nStructured Programming\n======================\n\nThis has the following styles,\n\n1. Procedural Programming\n\n   See <a href=\"http://sunnyday.mit.edu/16.355/wirth-refinement.html\">Program Development by Stepwise Refinement</a>\n   Typically how you write C programs.\n\n2. Objective Programming\n\n   <a href=\"https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)\">Encapsulation</a> for me, is the most important idea here.\n\n3. Modular Programming\n\n   <code>\n   &gt;&gt;&gt; import this\n   ...\n   Namespaces are one honking great idea -- let's do more of those!\n   </code>\n\n4. Functional Programming\n\n   Functional programming structures code around transformations,\n   than state changes.\n\n   It's tricky to do <a href=\"http://prog21.dadgum.com/23.html\">Games</a> in Pure Functional Programming.\n   Impure Functional Programming as seen in Common Lisp, Clojure,\n   Perl, Python, Ruby, OCaml is more successful.\n\nDeclarative Programming\n=======================\n\nThe following are some fine examples,\n\n1. HTML, make\n2. SQL, Logic Programming\n3. DSL's and Scripting Components.\n\n   See <a href=\"http://martinfowler.com/articles/rake.html\">Rake</a>, <a href=\"http://www.blender.org/documentation/blender_python_api_2_70_release\">Blender API</a>\n\n4. Generative Programming\n\n   This includes Lispy Macros, <a href=\"http://dinosaur.compilertools.net/yacc/\">yacc</a>.\n\nEvent Driven Programming\n========================\n\nComputers react to events.\n\n1. Messaging\n\n   <a href=\"http://zeromq.org/\">Zero MQ</a>\n\n2. <a href=\"https://en.wikipedia.org/wiki/Observer_Pattern\">Observers</a>\n3. Callback (Hell)\n4. Services\n\n   See <a href=\"https://en.wikipedia.org/wiki/REST\">REST</a>\n\nData Flow Programming\n=====================\n\nThis is my favorite paradigm.\nImpure Functional programming fits nicely here.\n\n1. Unix <a href=\"http://doc.cat-v.org/unix/pipes/\">Pipes</a>\n\n   Nuff said.\n\n2. Max/Pure Data\n\n   <a href=\"https://www.youtube.com/watch?v=7Y_Tzelw91g\">You just have to see it</a>.\n\n3. Spreadsheets\n\n   Most widely used Programming Language if you ask me.\n\n4. Visual Programming\n\n   A bit of a stretch, but anything from Photoshop layers to Circuit Design goes here.\n\nParallel Programming\n====================\n\n<a href=\"https://en.wikipedia.org/wiki/Erlang_(programming_language)\">Erlang</a> is a great success story.\n\nEntity Systems\n==============\n\nIn a way <a href=\"http://cbpowell.wordpress.com/2012/10/30/entity-component-game-programming-using-jruby-and-libgdx-part-1/\">Entity Systems</a>, takes concepts from every one of the above.\nI am not even sure it's a new Paradigm.\n\nBut the reason I am excited about Entity Systems is, it puts us right back\ninto <a href=\"https://en.wikipedia.org/wiki/Batch_processing\">Batch Computing</a>. Entities are stored centrally and Systems perform batch operations on them.\n\nAnd best of all, it is battle tested by Game Developers.\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["8fdee20","Wed","Jul","9","15:16:16","2014","+0530","rdp"]]},{"title":"Western Music in India","author":"Sreeharsha Mudivarti","tags":["music"],"copyright":"CC BY NC","__content":"\n\n= Western Music in India\n\nListenership ~ 2 million\n\n= Producers\n\n* Copycats\n* Playlist DJs\n\nThat shrill sound ?\nThat abrupt break ?\n\nHint: That shouldn't be there every single time.\n\n* Pointless fusionists\n\nThis is unique to india.\n\nConsider Germany.\nImagine if every American / British decent sound,\nis spinelessly copied,\nwith a german classical / folk addition,\nand sold as \"Underground\".\n\nRight, that does not happen.\n\nIndian instruments have very unique sounds.\nBetween classical / folk, I would pick folk.\n\nAfter all, classical musicians are elitist, obfuscating, vowel elongating,\nrote hacks, who singed for the Britishers and the Kings.\n\nYou can find more honesty, from the lower classes, \nsinging, \"The new King is here, time to guard your clothes\".\n\nIn either case, pointless fusion music is the norm, panderered ad-nauseam for more\nlistenership.\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/w2WURHY3D4A\" frameborder=\"0\" allowfullscreen></iframe>\n\n","front_matter":"---\ntitle: \"Western Music in India\"\nauthor: Sreeharsha Mudivarti\ntags: [music]\ncopyright: CC BY NC\n---","filename":"western-music-in-india","mtime":"2014-07-14T14:45:16.000Z","mime":"text/plain","html":"\n\n= Western Music in India\n\nListenership ~ 2 million\n\n= Producers\n\n* Copycats\n* Playlist DJs\n\nThat shrill sound ?\nThat abrupt break ?\n\nHint: That shouldn't be there every single time.\n\n* Pointless fusionists\n\nThis is unique to india.\n\nConsider Germany.\nImagine if every American / British decent sound,\nis spinelessly copied,\nwith a german classical / folk addition,\nand sold as \"Underground\".\n\nRight, that does not happen.\n\nIndian instruments have very unique sounds.\nBetween classical / folk, I would pick folk.\n\nAfter all, classical musicians are elitist, obfuscating, vowel elongating,\nrote hacks, who singed for the Britishers and the Kings.\n\nYou can find more honesty, from the lower classes, \nsinging, \"The new King is here, time to guard your clothes\".\n\nIn either case, pointless fusion music is the norm, panderered ad-nauseam for more\nlistenership.\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/w2WURHY3D4A\" frameborder=\"0\" allowfullscreen></iframe>\n\n","gitlog":[["b0be784","Mon","Jul","14","20:28:22","2014","+0530","india","music"]]},{"title":"Mac Remote Desktop","author":"Sreeharsha Mudivarti","tags":["programming","mac"],"copyright":"CC BY-NC","__content":"\n\nSteps\n=====\n\n1. Goto System Preferences/users\n2. Add a user with password\n3. Goto System Preferences/sharing\n4. Enable Screen Sharing\n5. Click '+' and add the user you added in step 2\n6. If you are accessing your internet behind your router -- you will have an ipv4\n   address in the range of 10.**** and 192.****\n7. Goto to your router's homepage and unblock ports 5900, 3283, 22\n8. Goto ddg.gg and search for 'ip'\n9. Give this url vnc://<ip-from-step-8> to your friend and also the password from step 2\n\nYour Friend's Steps\n===================\n1. Open finder\n2. Go > Connect to Server\n3. Add the copy-paste the url there\n4. Click connect\n5. voilà ! your friend can see and control your desktop\n\nBonus\n=====\n\n* If your friend repeats these steps, you can see your friend's desktop.\n* You can toggle observe mode in View\n* You can do file transfers from Window\n\n!! Use Activity Monitor to check the bandwidth !!\n\nWelcome to Pair Programming :)\n\n","front_matter":"---\ntitle: \"Mac Remote Desktop\"\nauthor: Sreeharsha Mudivarti\ntags: [programming, mac]\ncopyright: CC BY-NC\n---","filename":"vnc","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\nSteps\n=====\n\n1. Goto System Preferences/users\n2. Add a user with password\n3. Goto System Preferences/sharing\n4. Enable Screen Sharing\n5. Click '+' and add the user you added in step 2\n6. If you are accessing your internet behind your router -- you will have an ipv4\n   address in the range of 10.**** and 192.****\n7. Goto to your router's homepage and unblock ports 5900, 3283, 22\n8. Goto ddg.gg and search for 'ip'\n9. Give this url vnc://<ip-from-step-8> to your friend and also the password from step 2\n\nYour Friend's Steps\n===================\n1. Open finder\n2. Go > Connect to Server\n3. Add the copy-paste the url there\n4. Click connect\n5. voilà ! your friend can see and control your desktop\n\nBonus\n=====\n\n* If your friend repeats these steps, you can see your friend's desktop.\n* You can toggle observe mode in View\n* You can do file transfers from Window\n\n!! Use Activity Monitor to check the bandwidth !!\n\nWelcome to Pair Programming :)\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Uroborosism™","author":"An Individual","tags":["philosophy","religion","theology"],"copyright":"Public Domain","__content":"\n\n<div style=\"font-size:42px\">⟲</div>\n\nTagline        - I don't really need You.\nMotto          - A Being unto Thyself.\nPronounciation - oo-roh-BOH-roh-sism\nSoundtrack     - <a class=\"nw\" href=\"#\">play in a new window</a>\n<script class=\"autospace\" type=\"text/javascript\">\n     $(\"a.nw\").on(\"click\", function() {\n         console.log(\"here\");\n         window.open(\"http://bit.ly/1ikFVLJ\", '_blank');\n     });</script>\nGenesis\n=======\n\n* Uroborosism is the Worship of Creativity and Inspiration in its Primal form,\n  along with the Individual and his Work.\n\n* It is an Individualist Religion with Bullet Points.\n\n* This Religion is half-serious than a complete-joke.\n\n* This Religion is a modern continuation of the <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">Uroboros cult</a>.\n\nBeliefs\n=======\n\n* God as an Artistic interpretation and longing can be used for\n  Humour, Pathos, Catharsis or any other tingeing of Emotion.\n\n  For Example,\n  Jesus weeps when you hit a child.\n\n* The Dialectic in the Heart with Faith or Any lack thereof\n  is up to the Individual.\n\nRankings\n========\n\n* Hero for Courageous deeds.\n** Any soldier by default is a Hero.\n* Angel for Social and Artistic deeds.\n* Genius for Inventors and Creators.\n* Saint for Philosophers par excellence.\n\n(The above are gender neutral terms)\n\nPantheon\n========\n\n* The Muses -- Clio, Thalia, Erato, Euterpe, Polyhymnia, Calliope,\n               Terpsichore, Urania, Melpomene.\n\n* Numbers and the Night Sky.\n\nAncestor Worship\n================\n\n* Remembrance of Individuals who struggled and produced great\n  creative things despite NAYSAYERS.\n\nPrayer\n======\n\n* Solitude, with or without *rugs.\n** Sobriety is encouraged.\n\n* In temples one may Pray for the Strength of the Enemy,\n  so that one can have great Pride in defeating.\n\nChurch\n======\n\n* Reflection\n\nEthics\n======\n\n* Anti-Censorship\n* Anti-Killing\n* Anti-Torture\n* Old School Virtues\n* Refer to Buddhism for any doubts.\n\nWork Ethics\n===========\n\n* Challenging over Mechanical.\n\nAesthetics\n==========\n\n* Fidelity\n* Honesty\n* Mastery\n* Sublime\n\nSin\n===\n\n* To use Uroborosian in plural forms.\n\nHeaven\n======\n\n* Work well done.\n\nHell\n====\n\n* Other people.\n\nSuperstitions\n=============\n\n* Never put full Faith in collectives.\n** Associate with Individuals not Groups.\n\nHeresies\n========\n\n* Hypocrisy™\n* Indolence\n\nMarriage\n========\n\n* As dictated by the Heart.\n\nPatron God\n==========\n\n* Dionysus\n\nFriendly Religions\n==================\n\n* Buddhism\n* Taoism\n* Discordianism\n\nMonkhood\n========\n\n* As dictated by Buddhism or Saint <a href=\"https://en.wikipedia.org/wiki/Henry_David_Thoreau\">Henry David Thoreau</a>.\n\nLife After Death\n================\n\n* Worms, Dogs, Vultures, Flies feasting on your dead body and\n  ridicule if you are any good.\n\nHow do I become an Uroborosian ?\n================================\n\n* Be a good Individual. That's the point being made\n  here.\n\n* You can state \"Uroborosism\" on your facebook, website \n  and refer them to this page or the <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">wikipedia page</a>.\n\nLiterature\n==========\n\n* <a href=\"http://www.accesstoinsight.org/\">http://www.accesstoinsight.org</a>\n* <a href=\"http://www.taoism.net/\">http://www.taoism.net/</a>\n* <a href=\"http://hermetic.com/texts/plato/timaeus.html\">Timaeus</a>\n* Autobiographies of &lt;your-favorite-person&gt;\n\nMyths\n=====\n\nI was sitting, writing at my text-book; but the work did not progress;\nmy thoughts were elsewhere. I turned my chair to the fire and dozed.\nAgain the atoms were gamboling before my eyes. This time the smaller\ngroups kept modestly in the background. My mental eye, rendered\nmore acute by the repeated visions of the kind, could now distinguish\nlarger structures of manifold conformation: long rows, sometimes\nmore closely fitted together; all twining and twisting in snake-like\nmotion. But look! What was that? One of the snakes had seized hold\nof its own tail, and the form whirled mockingly before my eyes. As\nif by a flash of lightning I awoke; and this time also I spent the\nrest of the night in working out the consequences of the hypothesis.\n\n-- August Kekulé\n   (discovered benzene)\n\nQuotes\n======\n\nI don't like ass kissers, flag wavers or team players.\nI like people who buck the system. Individualists.\nI often warn people: \"Somewhere along the way, someone is going to tell you,\n'There is no \"I\" in team.' What you should tell them is,\n'Maybe not. But there is an \"I\" in independence, individuality and integrity.'\"\n\n-- George  Carlin\n\nOnly Dead People Did Cool Things.\n\n-- Anonymous\n\n<img src=\"images/your-life.gif\"/>\n","front_matter":"---\ntitle: Uroborosism™\nauthor: An Individual\ntags: [philosophy, religion, theology]\ncopyright: Public Domain\n---","filename":"uroborosism","mtime":"2014-07-10T16:50:18.000Z","mime":"text/plain","html":"\n\n<div style=\"font-size:42px\">⟲</div>\n\nTagline        - I don't really need You.\nMotto          - A Being unto Thyself.\nPronounciation - oo-roh-BOH-roh-sism\nSoundtrack     - <a class=\"nw\" href=\"#\">play in a new window</a>\n<script class=\"autospace\" type=\"text/javascript\">\n     $(\"a.nw\").on(\"click\", function() {\n         console.log(\"here\");\n         window.open(\"http://bit.ly/1ikFVLJ\", '_blank');\n     });</script>\nGenesis\n=======\n\n* Uroborosism is the Worship of Creativity and Inspiration in its Primal form,\n  along with the Individual and his Work.\n\n* It is an Individualist Religion with Bullet Points.\n\n* This Religion is half-serious than a complete-joke.\n\n* This Religion is a modern continuation of the <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">Uroboros cult</a>.\n\nBeliefs\n=======\n\n* God as an Artistic interpretation and longing can be used for\n  Humour, Pathos, Catharsis or any other tingeing of Emotion.\n\n  For Example,\n  Jesus weeps when you hit a child.\n\n* The Dialectic in the Heart with Faith or Any lack thereof\n  is up to the Individual.\n\nRankings\n========\n\n* Hero for Courageous deeds.\n** Any soldier by default is a Hero.\n* Angel for Social and Artistic deeds.\n* Genius for Inventors and Creators.\n* Saint for Philosophers par excellence.\n\n(The above are gender neutral terms)\n\nPantheon\n========\n\n* The Muses -- Clio, Thalia, Erato, Euterpe, Polyhymnia, Calliope,\n               Terpsichore, Urania, Melpomene.\n\n* Numbers and the Night Sky.\n\nAncestor Worship\n================\n\n* Remembrance of Individuals who struggled and produced great\n  creative things despite NAYSAYERS.\n\nPrayer\n======\n\n* Solitude, with or without *rugs.\n** Sobriety is encouraged.\n\n* In temples one may Pray for the Strength of the Enemy,\n  so that one can have great Pride in defeating.\n\nChurch\n======\n\n* Reflection\n\nEthics\n======\n\n* Anti-Censorship\n* Anti-Killing\n* Anti-Torture\n* Old School Virtues\n* Refer to Buddhism for any doubts.\n\nWork Ethics\n===========\n\n* Challenging over Mechanical.\n\nAesthetics\n==========\n\n* Fidelity\n* Honesty\n* Mastery\n* Sublime\n\nSin\n===\n\n* To use Uroborosian in plural forms.\n\nHeaven\n======\n\n* Work well done.\n\nHell\n====\n\n* Other people.\n\nSuperstitions\n=============\n\n* Never put full Faith in collectives.\n** Associate with Individuals not Groups.\n\nHeresies\n========\n\n* Hypocrisy™\n* Indolence\n\nMarriage\n========\n\n* As dictated by the Heart.\n\nPatron God\n==========\n\n* Dionysus\n\nFriendly Religions\n==================\n\n* Buddhism\n* Taoism\n* Discordianism\n\nMonkhood\n========\n\n* As dictated by Buddhism or Saint <a href=\"https://en.wikipedia.org/wiki/Henry_David_Thoreau\">Henry David Thoreau</a>.\n\nLife After Death\n================\n\n* Worms, Dogs, Vultures, Flies feasting on your dead body and\n  ridicule if you are any good.\n\nHow do I become an Uroborosian ?\n================================\n\n* Be a good Individual. That's the point being made\n  here.\n\n* You can state \"Uroborosism\" on your facebook, website \n  and refer them to this page or the <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">wikipedia page</a>.\n\nLiterature\n==========\n\n* <a href=\"http://www.accesstoinsight.org/\">http://www.accesstoinsight.org</a>\n* <a href=\"http://www.taoism.net/\">http://www.taoism.net/</a>\n* <a href=\"http://hermetic.com/texts/plato/timaeus.html\">Timaeus</a>\n* Autobiographies of &lt;your-favorite-person&gt;\n\nMyths\n=====\n\nI was sitting, writing at my text-book; but the work did not progress;\nmy thoughts were elsewhere. I turned my chair to the fire and dozed.\nAgain the atoms were gamboling before my eyes. This time the smaller\ngroups kept modestly in the background. My mental eye, rendered\nmore acute by the repeated visions of the kind, could now distinguish\nlarger structures of manifold conformation: long rows, sometimes\nmore closely fitted together; all twining and twisting in snake-like\nmotion. But look! What was that? One of the snakes had seized hold\nof its own tail, and the form whirled mockingly before my eyes. As\nif by a flash of lightning I awoke; and this time also I spent the\nrest of the night in working out the consequences of the hypothesis.\n\n-- August Kekulé\n   (discovered benzene)\n\nQuotes\n======\n\nI don't like ass kissers, flag wavers or team players.\nI like people who buck the system. Individualists.\nI often warn people: \"Somewhere along the way, someone is going to tell you,\n'There is no \"I\" in team.' What you should tell them is,\n'Maybe not. But there is an \"I\" in independence, individuality and integrity.'\"\n\n-- George  Carlin\n\nOnly Dead People Did Cool Things.\n\n-- Anonymous\n\n<img src=\"images/your-life.gif\"/>\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"this that selves","author":"Sreeharsha Mudivarti","tags":["fun","javascript","coffeescript","programming"],"copyright":"CC BY NC","__content":"\n\n> \"How can different things look the same ?\n   I don't know man, I didn't do it.\"\n\nIn OOP, self-reference of the Object is achieved with a\nspecial keyword, typically `this` or `self`.\n\nC++/Java/Ruby/PHP\n=================\n\n`this` resolves to the current object and the parent object.\nLike, `this.parent or super( this ) or $self->SUPER::`.\n\nMultiple Inheritance Or Which This is That\n==========================================\n\nWith multiple parents, `this` can refer to the wrong parent.\n\nSingle inheritance is preferred for this reason.\n\nThis is also called the diamond problem.\n\nC3 solves this problem by taking into the account the ordering\nof the parents.\n\nPython/Perl\n===========\n\nPerl's object model is inspired from python.\n\nRoughly put, Methods == Functions, with a special first argument.\n\nIn perl you `bless $stuff` and in python you have,\n\n```py\nclass Foo(object):\n    pass\n```\n\nthis's confusing !\n==================\n\nIn javascript, every function has a \"this\".\n\nThis means you sometimes do,\n\n```js\nfunction foo() {\n    var that = this;\n    // or var self = this;\n\n    function bar() {\n        that.doSomething();\n    }\n}\n```\n\nWith callback functions, this becomes useful.\n\nIt's painful to write an extra declaration, just like in\nperl or python.\n\nSo I present to you selves, which makes writing declarations\nobligatory.\n\n```js\n<a href=\"https://github.com/harsha-mudi/yx/blob/master/index.js\">var yx = require('yx');</a>\n\nfunction foo() {\n    var selfs = new yx.__selves();\n    selfs(this);\n\n    selfs().i.youShoudHaveDoneThat = function () {\n        return \"I Told You So!\";\n    }\n\n    this.bar = function () {\n        selfs(this);\n        test.equal(selfs().previous.youShoudHaveDoneThat(), \"I Told You So!\");\n\n        this.doSomething = function () {\n            console.log(\"But but ... !\");\n        }\n    }\n}\n```\n\nYou should really be using the => from coffeescript.\nAnother approach is,\n\n```js\nfunction foo() {\n\n    function bar(x,y) {\n        //...\n    }.bind(this);\n}\n```\n\nYou can install <a href=\"https://github.com/harsha-mudi/yx\">[yx]</a> with `npm install yx`.\nyx provides coffeescript's internal methods like __extends for use in js.\n\n::Credits\n\n#perl and #node.js from freednode.\n\n","front_matter":"---\ntitle: \"this that selves\"\nauthor: Sreeharsha Mudivarti\ntags: [fun, javascript, coffeescript, programming]\ncopyright: CC BY NC\n---","filename":"this-that-selves","mtime":"2014-07-10T16:47:29.000Z","mime":"text/plain","html":"\n\n> \"How can different things look the same ?\n   I don't know man, I didn't do it.\"\n\nIn OOP, self-reference of the Object is achieved with a\nspecial keyword, typically `this` or `self`.\n\nC++/Java/Ruby/PHP\n=================\n\n`this` resolves to the current object and the parent object.\nLike, `this.parent or super( this ) or $self->SUPER::`.\n\nMultiple Inheritance Or Which This is That\n==========================================\n\nWith multiple parents, `this` can refer to the wrong parent.\n\nSingle inheritance is preferred for this reason.\n\nThis is also called the diamond problem.\n\nC3 solves this problem by taking into the account the ordering\nof the parents.\n\nPython/Perl\n===========\n\nPerl's object model is inspired from python.\n\nRoughly put, Methods == Functions, with a special first argument.\n\nIn perl you `bless $stuff` and in python you have,\n\n```py\nclass Foo(object):\n    pass\n```\n\nthis's confusing !\n==================\n\nIn javascript, every function has a \"this\".\n\nThis means you sometimes do,\n\n```js\nfunction foo() {\n    var that = this;\n    // or var self = this;\n\n    function bar() {\n        that.doSomething();\n    }\n}\n```\n\nWith callback functions, this becomes useful.\n\nIt's painful to write an extra declaration, just like in\nperl or python.\n\nSo I present to you selves, which makes writing declarations\nobligatory.\n\n```js\n<a href=\"https://github.com/harsha-mudi/yx/blob/master/index.js\">var yx = require('yx');</a>\n\nfunction foo() {\n    var selfs = new yx.__selves();\n    selfs(this);\n\n    selfs().i.youShoudHaveDoneThat = function () {\n        return \"I Told You So!\";\n    }\n\n    this.bar = function () {\n        selfs(this);\n        test.equal(selfs().previous.youShoudHaveDoneThat(), \"I Told You So!\");\n\n        this.doSomething = function () {\n            console.log(\"But but ... !\");\n        }\n    }\n}\n```\n\nYou should really be using the => from coffeescript.\nAnother approach is,\n\n```js\nfunction foo() {\n\n    function bar(x,y) {\n        //...\n    }.bind(this);\n}\n```\n\nYou can install <a href=\"https://github.com/harsha-mudi/yx\">[yx]</a> with `npm install yx`.\nyx provides coffeescript's internal methods like __extends for use in js.\n\n::Credits\n\n#perl and #node.js from freednode.\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["c8ac184","Tue","Jul","1","23:46:39","2014","+0530","new","posts"],["a3e9a22","Sat","Jun","28","03:42:57","2014","+0530","contractions"],["ee6a9c6","Sat","Jun","28","02:54:56","2014","+0530","typos"]]},{"title":"My Favorite Syntax Bits","author":"Sreeharsha Mudivarti","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\n# C\n++ +=\nif, for, while, struct\nif expr statement\ninfix\n\n# C++ / Java\ncout << \"Hello World\"\nauto\n~Foo\n::\nthis\n\n# Sh\n$vars\n<< 'Here'\n`cmd args`\n\n# Perl\n%hash and =>\n`my $foo = 5` is an expr\ndo, bless\nqw, / /\n'a' .. 'z'\nloop lables\ngoto $label (also in gcc)\n__DATA__\n\n# Perl6\n?? !!\nsay\nmy \\var\njunctions\ncustom operators\n:types\nmultimethods\n\n# Python\n*kwargs\ngenerators\nin is not and or\nnested functions\nyield\nwith\npass\ndecorators\n\n# Ruby\n:symbol\ndo .. end\nswitch\n\"foo\".upcase()\nparen free style\nblocks\nmeta programming\n\"#{interpolation}\"\n\n# Small Talk\nif:\n\n# CL / CLJ\nnames-likes-this\narbitrbary nesting\nmacros\n->\n->>\n\n# go\ndeclaration syntax\ngoroutines\n\n# Template engines\nasp\n\n# *ml, prolog\nNil\n\n# JS\nundefined, null\n\n# Scala\nNull, null, Nil, Nothing, None\n","front_matter":"---\ntitle: \"My Favorite Syntax Bits\"\nauthor: Sreeharsha Mudivarti\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"syntax","mtime":"2014-07-10T16:45:45.000Z","mime":"text/plain","html":"\n\n# C\n++ +=\nif, for, while, struct\nif expr statement\ninfix\n\n# C++ / Java\ncout << \"Hello World\"\nauto\n~Foo\n::\nthis\n\n# Sh\n$vars\n<< 'Here'\n`cmd args`\n\n# Perl\n%hash and =>\n`my $foo = 5` is an expr\ndo, bless\nqw, / /\n'a' .. 'z'\nloop lables\ngoto $label (also in gcc)\n__DATA__\n\n# Perl6\n?? !!\nsay\nmy \\var\njunctions\ncustom operators\n:types\nmultimethods\n\n# Python\n*kwargs\ngenerators\nin is not and or\nnested functions\nyield\nwith\npass\ndecorators\n\n# Ruby\n:symbol\ndo .. end\nswitch\n\"foo\".upcase()\nparen free style\nblocks\nmeta programming\n\"#{interpolation}\"\n\n# Small Talk\nif:\n\n# CL / CLJ\nnames-likes-this\narbitrbary nesting\nmacros\n->\n->>\n\n# go\ndeclaration syntax\ngoroutines\n\n# Template engines\nasp\n\n# *ml, prolog\nNil\n\n# JS\nundefined, null\n\n# Scala\nNull, null, Nil, Nothing, None\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Software Development Is Not Engineering","author":"Sreeharsha Mudivarti","tags":["engineering","quote"],"copyright":"CC BY-NC","__content":"\n\n<blockquote>\n<b>Security:</b> The principle that every syntactically incorrect\nprogram should be rejected by the compiler and that every syntactically\ncorrect program should give a result or an error message that was\npredictable and comprehensible in terms of the source language\nprogram itself. Thus no core dumps should ever be necessary. It was\nlogically impossible for any source language program to cause the\ncomputer to run wild, either at compile time or at run time. A\nconsequence of this principle is that every occurrence of every\nsubscript of every subscripted variable was on every occasion checked\nat run time against both the upper and the lower declared bounds\nof the array. Many years later we asked our customers whether they\nwished us to provide an option to switch off these checks in the\ninterests of efficiency on production runs.  Unanimously, they urged\nus not to - they already knew how frequently subscript errors occur\non production runs where failure to detect them could be disastrous.\nI note with fear and horror that even in 1980, language designers\nand users have not learned this lesson. In any respectable branch\nof engineering, failure to observe such elementary precautions would\nhave long been against the law.</blockquote>\n    <i>From The Emperor's Old Clothes,\n    By C.A.R. Hoare,\n    Communications of the ACM, 1981. </i>\n\nSoftware developers should stop calling themselves Engineers.\nEngineering means <a href=\"http://heartbleed.com/\">Reliability</a>.\n\n","front_matter":"---\ntitle: \"Software Development Is Not Engineering\"\nauthor: Sreeharsha Mudivarti\ntags: [engineering, quote]\ncopyright: CC BY-NC\n---","filename":"software-dev-is-not-engineering","mtime":"2014-06-20T19:00:56.000Z","mime":"text/plain","html":"\n\n<blockquote>\n<b>Security:</b> The principle that every syntactically incorrect\nprogram should be rejected by the compiler and that every syntactically\ncorrect program should give a result or an error message that was\npredictable and comprehensible in terms of the source language\nprogram itself. Thus no core dumps should ever be necessary. It was\nlogically impossible for any source language program to cause the\ncomputer to run wild, either at compile time or at run time. A\nconsequence of this principle is that every occurrence of every\nsubscript of every subscripted variable was on every occasion checked\nat run time against both the upper and the lower declared bounds\nof the array. Many years later we asked our customers whether they\nwished us to provide an option to switch off these checks in the\ninterests of efficiency on production runs.  Unanimously, they urged\nus not to - they already knew how frequently subscript errors occur\non production runs where failure to detect them could be disastrous.\nI note with fear and horror that even in 1980, language designers\nand users have not learned this lesson. In any respectable branch\nof engineering, failure to observe such elementary precautions would\nhave long been against the law.</blockquote>\n    <i>From The Emperor's Old Clothes,\n    By C.A.R. Hoare,\n    Communications of the ACM, 1981. </i>\n\nSoftware developers should stop calling themselves Engineers.\nEngineering means <a href=\"http://heartbleed.com/\">Reliability</a>.\n\n","gitlog":[["59f9cbf","Sat","Jun","21","00:58:35","2014","+0530","disclaimer"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Safe Free Speech","author":"Sreeharsha Mudivarti","tags":["programming","philosophy"],"copyright":"CC BY NC","__content":"\n\nOpen Source Programming is heavily dependent on communication\nchannels.\n\nIRC, Mailing Lists, Conferences, Web ...\n\nBecause of its global nature, it's very difficult to obey\nall legal laws.\n\nThere are some controversies w.r.t the names and abbreviations\nused in <a href=\"https://gist.github.com/omega8cc/fa97ea1d471e1108ab35\">public code.</a>\n\nBesides, Newspeak is a terrible (programming) language.\n\nEach community is coming up with its own S.O.C's but they are too\nnarrow or too obvious.\n\nTo avoid unnecessary flamings, here are some guidelines for\nSafe Free Speech, for the Individual.\n\n0. There are no rules.\n1. If you can use clean language, prefer it.\n   If you have to be dirty, add a bit of context.\n2. If you have to discuss grey-areas, prefer using existing\n   legal protections.\n3. Avoid Discrimination. Exceptions can always be found.\n4. Hug before you hate.\n\n","front_matter":"---\ntitle: \"Safe Free Speech\"\nauthor: Sreeharsha Mudivarti\ntags: [programming, philosophy]\ncopyright: CC BY NC\n---","filename":"soc","mtime":"2014-07-01T18:13:38.000Z","mime":"text/plain","html":"\n\nOpen Source Programming is heavily dependent on communication\nchannels.\n\nIRC, Mailing Lists, Conferences, Web ...\n\nBecause of its global nature, it's very difficult to obey\nall legal laws.\n\nThere are some controversies w.r.t the names and abbreviations\nused in <a href=\"https://gist.github.com/omega8cc/fa97ea1d471e1108ab35\">public code.</a>\n\nBesides, Newspeak is a terrible (programming) language.\n\nEach community is coming up with its own S.O.C's but they are too\nnarrow or too obvious.\n\nTo avoid unnecessary flamings, here are some guidelines for\nSafe Free Speech, for the Individual.\n\n0. There are no rules.\n1. If you can use clean language, prefer it.\n   If you have to be dirty, add a bit of context.\n2. If you have to discuss grey-areas, prefer using existing\n   legal protections.\n3. Avoid Discrimination. Exceptions can always be found.\n4. Hug before you hate.\n\n","gitlog":[["c8ac184","Tue","Jul","1","23:46:39","2014","+0530","new","posts"]]},{"title":"Shell Programming","author":"Sreeharsha Mudivarti","tags":["programming","scripting"],"copyright":"CC BY","__content":"\n\nI have difficulty remembering bash/sh/zsh syntax.\nI can perl.\n\n```.zshrc\ncommand_not_found_handler () {\n    ~/bin/zsh.pl $*\n}\n```\n\nYou can see my dotfiles <a href=\"https://github.com/harsha-mudi/dotfiles\">here</a>.\n\n","front_matter":"---\ntitle: \"Shell Programming\"\nauthor: Sreeharsha Mudivarti\ntags: [programming , scripting]\ncopyright: CC BY\n---","filename":"shell-programming","mtime":"2014-07-10T16:38:26.000Z","mime":"text/plain","html":"\n\nI have difficulty remembering bash/sh/zsh syntax.\nI can perl.\n\n```.zshrc\ncommand_not_found_handler () {\n    ~/bin/zsh.pl $*\n}\n```\n\nYou can see my dotfiles <a href=\"https://github.com/harsha-mudi/dotfiles\">here</a>.\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Reactive Data Processing","author":"Sreeharsha Mudivarti","tags":["programming","future"],"copyright":"CC BY-NC","__content":"\n\n<h1>迁</h1>\n\n0. Demo\n=======\n\n<iframe src=\"//player.vimeo.com/video/102371548\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nThis is \"mirroring\", where signals are spread across interested systems.\nIn this case, signals by the user.\n\n<iframe src=\"//player.vimeo.com/video/102414660\" width=\"500\" height=\"375\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nStep Debugging !\n\n1. Introduction\n===============\n\nData       <=>   Electricity\nSoftware   <=>   Chip Design\n\nThis perspective allows us to adopt ideas from,\n\n1) Electronics Engineering\n2) Systems Engineering\n\nCurrently Electronics have better,\n\n1) Testability\n2) Longevity\n3) Reliability\n4) Maintainability\n5) Quality\n\nthan Software Products, which are perpetually new, improved\nand broken.\n\nRDP is built on Low Level Ideas from Electronics, in hopes of\nreplicating its merits.\n\nRDP isa Bread-Board Programming.\n\n1) Tracing\n2) Step Debugging\n3) Profiling\n4) Simulation / Mirroring\n5) Diagram Generation\n\ncome free with RDP.\n\nTo contrast, High Level Frameworks come with a promise, and just\nthat sometimes, of productivity improvement without any mention of debugging.\n\nPre-90's software was complex, innovative and done in Low Level Languages.\nCan Low Level Ideas be adapted to todays Application Complexity ?\nHave we forgotten how the wheel was invented ?\n\n2. Prototype\n============\n\n<a href=\"https://github.com/harsha-mudi/rdp\">RDP for Javascript</a>\n<a href=\"https://github.com/harsha-mudi/rdp/issues\">Issues / Feedback</a>\n\n~~1k lines of .coffee + .js\n\nAPI    - Fixed (for 0.3.x series)\nStatus - Beta\n\nFor an example on how the API can be used, see <a href=\"https://github.com/harsha-mudi/rdp/blob/master/examples/array.js\">this</a>.\n\n3. Roadmap for 0.4.x, 0.5.x\n===========================\n\n* C++ port\n* Avoid Memory Leaks\n* Avoid Data Racing\n* Complete Serialization and Deserialization\n* Mirror Latency\n\n4. Influences\n=============\n\nIn descending order,\n\n1) Motherboard\n\n* Pipelines\n* Buses\n* Interrupts\n* Processing\n* Stores\n\n1.1) <a href=\"https://www.youtube.com/watch?v=7Y_Tzelw91g\">Max Msp / Pure Data</a>\n\nThey are a hallmark for Data Flow Programming.\nThey provide a visual wrapper for digital signal processing.\n\nKey Concepts:\n\n* \"Live\" Object\n* m inlets\n  &lt;process&gt;\n  n outlets\n\nRDP API is modelled on the above and FSMs.\n\n2) Hoplon\n\n<a href=\"https://github.com/tailrecursion/hoplon\">Hoplon</a> is a new web framework for clojurescript\nbased on the idea of spreadsheets.\n\nSpreadsheets are the most user friendly interface for\nData Flow Programming.\n\nKey Concepts:\n\n* Cell\n  0 inlet\n  &lt;identity&gt;\n  1 outlet\n* Formula\n  n inlets\n  &lt;script&gt;\n  1 outlet\n\n3) Entity Systems\n\nKey Concepts:\n\n* <a href=\"http://entity-systems.wikidot.com/rdbms-with-code-in-systems\">Centralized Store</a>\n* Batch Processing\n\n4) Gulp / RxJS\n\nKey Concepts:\n\n* <a href=\"https://github.com/substack/stream-handbook\">Streams</a>\n* Generators\n\n5) PowerShell / Pipes / XML\n\nKey Concepts:\n\n* CmdLet\n  1 inlet\n  &lt;filter&gt;\n  2 outlets\n\n* Serialization\n* Validation\n* RSS Feeds\n* OSC Messaging\n\n4. Definitions\n==============\n\nThe following words are used from an Engineering perspective.\nThe intent of the words is matched, innocently.\nGross mistakes will be corrected.\n\n1)   Symbol\n\n     Symbol has,\n\n       * a name\n       * an object\n       * attrs\n\n    This idea is taken from FSMs.\n    \"route\" is a useful attribute for marking signal routing systems.\n\n    \"Unknown\", \"NotFound\" are common symbols.\n\n1.1) NameSpace\n\n     A NameSpace has,\n\n       * elements\n\n     A NameSpace can,\n\n       * run queries over its elements\n       * bind\n       * unbind\n\n    This idea is taken from Lisp.\n\n2)   Data\n\n     A Data has,\n\n       * props\n\n     A Property has,\n\n       * a slot\n       * a sacalar\n\n     A Slot is a name.\n\n     A Scalar is a Boolean | String | Number | Array\n\n     A Data can,\n\n       * init\n       * serialize\n\n     This is necessary for a language agnostic design.\n\n2.1) Token\n\n     A Token isa unique Data.\n\n     A Token has,\n\n       * a value\n\n     One can,\n\n       * stamp a token\n\n     start and stop are conventional tokens.\n     Stamping helps in token re-use and tracing.\n\n2.2) Singals and Events\n\n     A Signal isa Data with,\n\n       * a route\n       * a payload\n\n     An Event isa Signal with,\n\n       * a ts\n\n     This idea is taken from <a href=\"http://opensoundcontrol.org/spec-1_0\">OSC</a>.\n\n2.3) Glitch\n\n     A Glitch isa Data with,\n\n       * a name\n       * a context\n\n    \"Unknown\", \"NotFound\", \"Invalid\" are common glitches.\n\n3)   Entity\n\n     An Entity isa Data with,\n\n       * a id\n       * tags\n       * parts\n       * a ts\n\n3.1) Part\n\n     A Part isa Data with,\n\n       * a name\n\n     During Flow, Entities gain or lose Parts.\n\n3.2) Cell\n\n     A Cell isa Entity with,\n\n       * observers\n\n4)   System\n\n     A System has,\n\n       * inlets\n       * outlets\n       * state ( stack )\n       * registers ( map )\n\n     A System can,\n\n       * react\n       * process\n       * emit\n       * show ( a Graphic Object )\n\n     One can,\n\n       * push\n       * interrupt\n\n     a System.\n\n     A System can be a,\n\n       * Generator\n       * Filter\n       * Stream\n       * StateMachine\n       * Sink\n       * Component\n\n     Component is a System that just reacts.\n\n     Stream is a System with,\n\n       * feedback\n       * sysin\n       * sysout\n       * syserr\n       * debug\n\n5)   Board\n\n     Board provides space for holding Systems and Wires.\n\n     It can,\n\n       * connect inlets and outlets of any two Systems with Wires\n       * manage systems\n       * mirror\n\n     It has,\n\n       * a store\n       * a bus\n\n5.1) Wire\n\n    A wire has connection information like,\n\n       * source\n       * sink\n       * outlet\n       * inlet\n\n    A wire can,\n\n       * transmit (emitted data)\n\n5.2) Bus\n\n     A Bus is a NameSpace which can,\n\n       * trigger a signal/event to Systems.\n\n5.3) Store\n\n     A Store can,\n\n       * manage\n       * query\n       * snapshot\n       * recover\n\n     for entities of a board.\n\n5. Example App\n==============\n\n<a href=\"https://github.com/harsha-mudi/esti\">Esti</a> is a productivity measurement app.\n<a href=\"https://github.com/harsha-mudi/esti/issues\">Issues / Feedback</a>\n<a href=\"https://github.com/harsha-mudi/esti/blob/master/sim.xml\">Simulated Data</a>\n\nIt uses React.js and d3 along with rdp.\n\nIt was initially meant to be a phonegap app, but I lost my phone\nand it is now a desktop app.\n\nThe following <b>Flow Diagram</b> was automatically generated from the <a href=\"https://github.com/harsha-mudi/esti/blob/master/source/js/diagrams.js\">source</a>,\nwith the help of dagre-d3.\n\n<img src=\"images/esti.png\"/>\n\n","front_matter":"---\ntitle: \"Reactive Data Processing\"\nauthor: Sreeharsha Mudivarti\ntags: [programming, future]\ncopyright: CC BY-NC\n---","filename":"rdp","mtime":"2014-08-04T10:19:37.000Z","mime":"text/plain","html":"\n\n<h1>迁</h1>\n\n0. Demo\n=======\n\n<iframe src=\"//player.vimeo.com/video/102371548\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nThis is \"mirroring\", where signals are spread across interested systems.\nIn this case, signals by the user.\n\n<iframe src=\"//player.vimeo.com/video/102414660\" width=\"500\" height=\"375\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nStep Debugging !\n\n1. Introduction\n===============\n\nData       <=>   Electricity\nSoftware   <=>   Chip Design\n\nThis perspective allows us to adopt ideas from,\n\n1) Electronics Engineering\n2) Systems Engineering\n\nCurrently Electronics have better,\n\n1) Testability\n2) Longevity\n3) Reliability\n4) Maintainability\n5) Quality\n\nthan Software Products, which are perpetually new, improved\nand broken.\n\nRDP is built on Low Level Ideas from Electronics, in hopes of\nreplicating its merits.\n\nRDP isa Bread-Board Programming.\n\n1) Tracing\n2) Step Debugging\n3) Profiling\n4) Simulation / Mirroring\n5) Diagram Generation\n\ncome free with RDP.\n\nTo contrast, High Level Frameworks come with a promise, and just\nthat sometimes, of productivity improvement without any mention of debugging.\n\nPre-90's software was complex, innovative and done in Low Level Languages.\nCan Low Level Ideas be adapted to todays Application Complexity ?\nHave we forgotten how the wheel was invented ?\n\n2. Prototype\n============\n\n<a href=\"https://github.com/harsha-mudi/rdp\">RDP for Javascript</a>\n<a href=\"https://github.com/harsha-mudi/rdp/issues\">Issues / Feedback</a>\n\n~~1k lines of .coffee + .js\n\nAPI    - Fixed (for 0.3.x series)\nStatus - Beta\n\nFor an example on how the API can be used, see <a href=\"https://github.com/harsha-mudi/rdp/blob/master/examples/array.js\">this</a>.\n\n3. Roadmap for 0.4.x, 0.5.x\n===========================\n\n* C++ port\n* Avoid Memory Leaks\n* Avoid Data Racing\n* Complete Serialization and Deserialization\n* Mirror Latency\n\n4. Influences\n=============\n\nIn descending order,\n\n1) Motherboard\n\n* Pipelines\n* Buses\n* Interrupts\n* Processing\n* Stores\n\n1.1) <a href=\"https://www.youtube.com/watch?v=7Y_Tzelw91g\">Max Msp / Pure Data</a>\n\nThey are a hallmark for Data Flow Programming.\nThey provide a visual wrapper for digital signal processing.\n\nKey Concepts:\n\n* \"Live\" Object\n* m inlets\n  &lt;process&gt;\n  n outlets\n\nRDP API is modelled on the above and FSMs.\n\n2) Hoplon\n\n<a href=\"https://github.com/tailrecursion/hoplon\">Hoplon</a> is a new web framework for clojurescript\nbased on the idea of spreadsheets.\n\nSpreadsheets are the most user friendly interface for\nData Flow Programming.\n\nKey Concepts:\n\n* Cell\n  0 inlet\n  &lt;identity&gt;\n  1 outlet\n* Formula\n  n inlets\n  &lt;script&gt;\n  1 outlet\n\n3) Entity Systems\n\nKey Concepts:\n\n* <a href=\"http://entity-systems.wikidot.com/rdbms-with-code-in-systems\">Centralized Store</a>\n* Batch Processing\n\n4) Gulp / RxJS\n\nKey Concepts:\n\n* <a href=\"https://github.com/substack/stream-handbook\">Streams</a>\n* Generators\n\n5) PowerShell / Pipes / XML\n\nKey Concepts:\n\n* CmdLet\n  1 inlet\n  &lt;filter&gt;\n  2 outlets\n\n* Serialization\n* Validation\n* RSS Feeds\n* OSC Messaging\n\n4. Definitions\n==============\n\nThe following words are used from an Engineering perspective.\nThe intent of the words is matched, innocently.\nGross mistakes will be corrected.\n\n1)   Symbol\n\n     Symbol has,\n\n       * a name\n       * an object\n       * attrs\n\n    This idea is taken from FSMs.\n    \"route\" is a useful attribute for marking signal routing systems.\n\n    \"Unknown\", \"NotFound\" are common symbols.\n\n1.1) NameSpace\n\n     A NameSpace has,\n\n       * elements\n\n     A NameSpace can,\n\n       * run queries over its elements\n       * bind\n       * unbind\n\n    This idea is taken from Lisp.\n\n2)   Data\n\n     A Data has,\n\n       * props\n\n     A Property has,\n\n       * a slot\n       * a sacalar\n\n     A Slot is a name.\n\n     A Scalar is a Boolean | String | Number | Array\n\n     A Data can,\n\n       * init\n       * serialize\n\n     This is necessary for a language agnostic design.\n\n2.1) Token\n\n     A Token isa unique Data.\n\n     A Token has,\n\n       * a value\n\n     One can,\n\n       * stamp a token\n\n     start and stop are conventional tokens.\n     Stamping helps in token re-use and tracing.\n\n2.2) Singals and Events\n\n     A Signal isa Data with,\n\n       * a route\n       * a payload\n\n     An Event isa Signal with,\n\n       * a ts\n\n     This idea is taken from <a href=\"http://opensoundcontrol.org/spec-1_0\">OSC</a>.\n\n2.3) Glitch\n\n     A Glitch isa Data with,\n\n       * a name\n       * a context\n\n    \"Unknown\", \"NotFound\", \"Invalid\" are common glitches.\n\n3)   Entity\n\n     An Entity isa Data with,\n\n       * a id\n       * tags\n       * parts\n       * a ts\n\n3.1) Part\n\n     A Part isa Data with,\n\n       * a name\n\n     During Flow, Entities gain or lose Parts.\n\n3.2) Cell\n\n     A Cell isa Entity with,\n\n       * observers\n\n4)   System\n\n     A System has,\n\n       * inlets\n       * outlets\n       * state ( stack )\n       * registers ( map )\n\n     A System can,\n\n       * react\n       * process\n       * emit\n       * show ( a Graphic Object )\n\n     One can,\n\n       * push\n       * interrupt\n\n     a System.\n\n     A System can be a,\n\n       * Generator\n       * Filter\n       * Stream\n       * StateMachine\n       * Sink\n       * Component\n\n     Component is a System that just reacts.\n\n     Stream is a System with,\n\n       * feedback\n       * sysin\n       * sysout\n       * syserr\n       * debug\n\n5)   Board\n\n     Board provides space for holding Systems and Wires.\n\n     It can,\n\n       * connect inlets and outlets of any two Systems with Wires\n       * manage systems\n       * mirror\n\n     It has,\n\n       * a store\n       * a bus\n\n5.1) Wire\n\n    A wire has connection information like,\n\n       * source\n       * sink\n       * outlet\n       * inlet\n\n    A wire can,\n\n       * transmit (emitted data)\n\n5.2) Bus\n\n     A Bus is a NameSpace which can,\n\n       * trigger a signal/event to Systems.\n\n5.3) Store\n\n     A Store can,\n\n       * manage\n       * query\n       * snapshot\n       * recover\n\n     for entities of a board.\n\n5. Example App\n==============\n\n<a href=\"https://github.com/harsha-mudi/esti\">Esti</a> is a productivity measurement app.\n<a href=\"https://github.com/harsha-mudi/esti/issues\">Issues / Feedback</a>\n<a href=\"https://github.com/harsha-mudi/esti/blob/master/sim.xml\">Simulated Data</a>\n\nIt uses React.js and d3 along with rdp.\n\nIt was initially meant to be a phonegap app, but I lost my phone\nand it is now a desktop app.\n\nThe following <b>Flow Diagram</b> was automatically generated from the <a href=\"https://github.com/harsha-mudi/esti/blob/master/source/js/diagrams.js\">source</a>,\nwith the help of dagre-d3.\n\n<img src=\"images/esti.png\"/>\n\n","gitlog":[["b27243c","Mon","Aug","11","00:36:05","2014","+0530","floppy"],["1b1932e","Mon","Aug","4","13:55:07","2014","+0530","desc"],["9040926","Sun","Aug","3","00:49:31","2014","+0530","new","art"],["8c794c4","Sat","Aug","2","06:57:41","2014","+0530","rdp"],["69e0cce","Sat","Aug","2","04:16:32","2014","+0530","mn"],["fb2936d","Mon","Jul","21","21:59:05","2014","+0530","indentation"],["11706e9","Mon","Jul","21","21:48:36","2014","+0530","redid","rdp"],["b0be784","Mon","Jul","14","20:28:22","2014","+0530","india","music"],["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["8fdee20","Wed","Jul","9","15:16:16","2014","+0530","rdp"]]},{"title":"Programmers are terrible","author":"Sreeharsha Mudivarti","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nAdjectives you can use to describe them,\n\n1. du·plic·i·tous\n2. mas·och·is·tic\n3. zeal·ots\n4. cree·py\n5. ar·ro·gant\n6. angsty\n7. pe·dan·tic\n7. cryp·tic\n8. e·van·ge·list\n9. sen·sa·tion·al·ist\n10. slop·py\n\nAnd most sadly,\n\n1. blind op·ti·mists\n\n","front_matter":"---\ntitle: \"Programmers are terrible\"\nauthor: Sreeharsha Mudivarti\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"programmers-are-terrible","mtime":"2014-06-20T13:42:35.000Z","mime":"text/plain","html":"\n\nAdjectives you can use to describe them,\n\n1. du·plic·i·tous\n2. mas·och·is·tic\n3. zeal·ots\n4. cree·py\n5. ar·ro·gant\n6. angsty\n7. pe·dan·tic\n7. cryp·tic\n8. e·van·ge·list\n9. sen·sa·tion·al·ist\n10. slop·py\n\nAnd most sadly,\n\n1. blind op·ti·mists\n\n","gitlog":[["b0be784","Mon","Jul","14","20:28:22","2014","+0530","india","music"]]},{"title":"Pause","author":"Sreeharsha Mudivarti","tags":["linguistics"],"copyright":"CC BY-NC","__content":"\n\nMy writing can't be understood by the pedantic.\n\nHave you observed, the pedantic can never write anything original ?\nThat's no coincidence. For the obsessive compulsive pedantic,\nwriting is a sin.\n\nI try to follow Grammar for its prosodic flows.\n\nPauses are crucial for prosody.\n\nHere are a few ways to create a pause, in ascending order of\nduration\n\n-\n|space|\n,\n;\n.\n--\n*\n|newline|\n\n|quote|\nitalic\nbold\n\n","front_matter":"---\ntitle: \"Pause\"\nauthor: Sreeharsha Mudivarti\ntags: [linguistics]\ncopyright: CC BY-NC\n---","filename":"pause","mtime":"2014-08-10T18:28:40.000Z","mime":"text/plain","html":"\n\nMy writing can't be understood by the pedantic.\n\nHave you observed, the pedantic can never write anything original ?\nThat's no coincidence. For the obsessive compulsive pedantic,\nwriting is a sin.\n\nI try to follow Grammar for its prosodic flows.\n\nPauses are crucial for prosody.\n\nHere are a few ways to create a pause, in ascending order of\nduration\n\n-\n|space|\n,\n;\n.\n--\n*\n|newline|\n\n|quote|\nitalic\nbold\n\n","gitlog":[["b27243c","Mon","Aug","11","00:36:05","2014","+0530","floppy"]]},{"title":"OM","author":"Sreeharsha Mudivarti","tags":["programming","clojure","clojurescript","async","goroutines"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"https://github.com/swannodette/om/wiki/Documentation\">Om</a> is built on three ideas to deal with <a href=\"http://tech.pro/blog/1402/five-patterns-to-help-you-tame-asynchronous-javascript\">async</a> shit in clojurescript.\n\n1) Messaging\n2) State Management\n3) Reactive UI\n\ntl;dr UI -> EVENTS -> STATE -> UI\n\n## Reactive UI\n\nThis is built on top of ReactJS.\nUI is divided into components.\n\nEach component takes a cursor(more on that later).\nAnd has some,\n* rendering code\n  rendering code can look like dom/div(default), :div(hiccup) or enlive\n* life cycle hooks where you can place dom event listeners and state change listeners\n\nInitialization of component calls,\n    IInitState\n    IWillMount\n    IDidMount.\n\nEvery time a cursor's state changes a component is rendered, as per the life cycle,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nComponents are organized as a tree for some fancy optimization purposes.\nSee,\n    root - builds the first component\n    build\n    component\n    graft.\n\n## State Management\n\nThe entire application state and data is an atom blob.\nOm gives you cursors which are pointers(paths) to a subset of the blob.\n\nOm also has component local states, which are not stored in the blob.\nSee,\n    set-state!\n    get-state!\n    props.\n\nIt is much simpler to depend on cursors for everything, IMHO.\n\nOm also has truly global state sharing with,\n    get-shared which gets the :shared argument passed to root.\n\nCursors are manipulated safely by om API,\n    update!\n    transact! you can use a :tx-listen while building root to listen to all transactions\n    and get-in, assoc-in from clojurescript.\n\nYou can extend the ICursor Protocol to come up with your own idea of cursors.\n\n## Messaging\n\nMessaging is possible because of core.async, which provides channels and goroutines.\nThere is no <a href=\"http://swannodette.github.io/2013/08/02/100000-processes/\">limit</a> to the number of channels and goroutines unless you are using old browsers.\ngoroutines look alot like threads.\n\nEvery component can have channels or channels can be global.\nGlobal channels and goroutines makes it easier to refactor code into multimethods later, IMHO.\n\nInstead of dealing with callbacks in dom event listeners you put! things into channels as events.\nIn a goroutine you &lt;! on a channel to listen to all the events and act upon them.\n\nEvents are acted upon and send further events, finally making changes to the state which call,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nGood place to start go(routines),\n    IWillMount.\n\nTesting and Mocking are greatly simplified using the messaging paradigm.\n\n","front_matter":"---\ntitle: \"OM\"\nauthor: Sreeharsha Mudivarti\ntags: [programming, clojure, clojurescript, async, goroutines]\ncopyright: CC BY-NC\n---","filename":"om","mtime":"2014-07-17T00:01:58.000Z","mime":"text/plain","html":"\n\n<a href=\"https://github.com/swannodette/om/wiki/Documentation\">Om</a> is built on three ideas to deal with <a href=\"http://tech.pro/blog/1402/five-patterns-to-help-you-tame-asynchronous-javascript\">async</a> shit in clojurescript.\n\n1) Messaging\n2) State Management\n3) Reactive UI\n\ntl;dr UI -> EVENTS -> STATE -> UI\n\n## Reactive UI\n\nThis is built on top of ReactJS.\nUI is divided into components.\n\nEach component takes a cursor(more on that later).\nAnd has some,\n* rendering code\n  rendering code can look like dom/div(default), :div(hiccup) or enlive\n* life cycle hooks where you can place dom event listeners and state change listeners\n\nInitialization of component calls,\n    IInitState\n    IWillMount\n    IDidMount.\n\nEvery time a cursor's state changes a component is rendered, as per the life cycle,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nComponents are organized as a tree for some fancy optimization purposes.\nSee,\n    root - builds the first component\n    build\n    component\n    graft.\n\n## State Management\n\nThe entire application state and data is an atom blob.\nOm gives you cursors which are pointers(paths) to a subset of the blob.\n\nOm also has component local states, which are not stored in the blob.\nSee,\n    set-state!\n    get-state!\n    props.\n\nIt is much simpler to depend on cursors for everything, IMHO.\n\nOm also has truly global state sharing with,\n    get-shared which gets the :shared argument passed to root.\n\nCursors are manipulated safely by om API,\n    update!\n    transact! you can use a :tx-listen while building root to listen to all transactions\n    and get-in, assoc-in from clojurescript.\n\nYou can extend the ICursor Protocol to come up with your own idea of cursors.\n\n## Messaging\n\nMessaging is possible because of core.async, which provides channels and goroutines.\nThere is no <a href=\"http://swannodette.github.io/2013/08/02/100000-processes/\">limit</a> to the number of channels and goroutines unless you are using old browsers.\ngoroutines look alot like threads.\n\nEvery component can have channels or channels can be global.\nGlobal channels and goroutines makes it easier to refactor code into multimethods later, IMHO.\n\nInstead of dealing with callbacks in dom event listeners you put! things into channels as events.\nIn a goroutine you &lt;! on a channel to listen to all the events and act upon them.\n\nEvents are acted upon and send further events, finally making changes to the state which call,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nGood place to start go(routines),\n    IWillMount.\n\nTesting and Mocking are greatly simplified using the messaging paradigm.\n\n","gitlog":[["11706e9","Mon","Jul","21","21:48:36","2014","+0530","redid","rdp"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Nature","author":"Sreeharsha Mudivarti","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\nNature is Extreme.\n\nExtreme Sex.\n\nExtreme Engineering.\nExtreme War.\n\nExtreme Love.\nExtreme Hate.\n\nExtreme Good.\nExtreme Evil.\n\nExtreme Beauty.\nExtreme Gross.\n\n","front_matter":"---\ntitle: \"Nature\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"nature","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\nNature is Extreme.\n\nExtreme Sex.\n\nExtreme Engineering.\nExtreme War.\n\nExtreme Love.\nExtreme Hate.\n\nExtreme Good.\nExtreme Evil.\n\nExtreme Beauty.\nExtreme Gross.\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Module Pattern","author":"Sreeharsha Mudivarti","tags":["js","programming"],"copyright":"CC BY-NC","__content":"\n\nFor nodejs,\n\n```module.js\nexports.thingy = function (x, y, z) {\n    ...\n};\n```\n\nFor browsers,\n\n<div class=\"autospace\">\n<script src=\"https://gist.github.com/harsha-mudi/20781b805c0967e9be35.js\"></script>\n</div>\n\n","front_matter":"---\ntitle: \"Module Pattern\"\nauthor: Sreeharsha Mudivarti\ntags: [js, programming]\ncopyright: CC BY-NC\n---","filename":"module-pattern","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\nFor nodejs,\n\n```module.js\nexports.thingy = function (x, y, z) {\n    ...\n};\n```\n\nFor browsers,\n\n<div class=\"autospace\">\n<script src=\"https://gist.github.com/harsha-mudi/20781b805c0967e9be35.js\"></script>\n</div>\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"MIDI","author":"Sreeharsha Mudivarti","tags":["music"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"https://en.wikipedia.org/wiki/MIDI\">MIDI</a> changed music.\n\nConsider what a Classically trained Musician needs to do, to make his \nmusic heard.\n\nHe needs to,\n\n1. Write it\n2. Get a bunch of musicians\n3. Practice\n4. Play\n5. goto 1\n6. Record the Final Cut in a Studio\n\nWith MIDI,\n\n1. Write it. Save it, with a Software\n2. Get the electronic instruments to play it for him\n   -or-\n   Get a computer Software to play it for him\n3. Tweak\n4. Record the Final Cut in Software or a Studio\n\nMIDI is -- Musical Instrument Digital Interface.\n\nIt abstracts <a href=\"https://en.wikipedia.org/wiki/Musical_notation\">Music Notation</a> into bytes.\nSince its just bytes, you can replay it with Software.\n\nMIDI made production,\n\n* Dirt Cheap\n* Made Producers more efficient\n\nHow about Audio Quality ?\n\n* A Classical Ensemble still has its place. Panning is very unique there.\n* But MIDI + Electronic Instrument increased the Range.\n  It helped form whole new genres in Music like EDM, IDM, SynthPunk ...\n\nLimitations ?\n\n* MIDI is limited to 16 instruments.\n* Integers.\n* 16 is a big number.\n* <a href=\"https://en.wikipedia.org/wiki/Open_Sound_Control\">OSC</a> overcomes these.\n\nUsage\n=====\n\nTo use MIDI you need two things,\n\n1. A Sequencer\n\n   This generates MIDI messages like,\n\n   Command param1 param2 param3\n   Command param1 param2\n   Command param1 param2 param3\n   Command param1 param2\n   ...\n\n   Important messages are,\n\n   1. Note On => Channel [1-16]**, Pitch[0-127], Volume[0-127]\n   2. Note Off                 \"\n   3. Controller => No [0-127], Value[0-127]\n\n   ** Channel 10 is reserved for Drums.\n\n   Note On and Note Off are typically sent by keys, buttons.\n   Controller Messages are typically sent by knobs and pedals.\n\n2. A Synthesizer\n\n   This accepts MIDI data.\n   It Maps channels to DSP.\n   It Maps knobs** to effects like distortion and reverb.\n\n   ** The positions of the knob are called patches.\n\n3. A Sampler.\n\n   This accepts MIDI data.\n   It Maps channels to sound recordings.\n   It Maps knobs to effects like distortion and reverb.\n\nIf you buy Music Hardware you have both 1 and 2.\n\nBut usually the sequencing capabilities are limited in a synth.\nSo you can't Edit MIDI data in the instrument.\n\nSome notes,\n\n0. You can buy hardware and get a Synthesizer + a limited Sequencer.\n\n1. You can buy A Sequencer and use a Computer as a Synthesizer\n\nor\n\n2. Use a Software Sequencer to Program your Synthesizer\n\nor\n\n3. Forget Hardware and go complete nuts with Software\n\nRecommended Software\n====================\nAbleton\nFL Studio\nCubase\nGarage Band\nRenoise -- I have this, recommended for <a href=\"https://en.wikipedia.org/wiki/Demoscene\">Demoscene</a> lovers.\n\n* You can shop for VST, AU which are DSP made in software.\n* The above Softwares come with sane defaults and don't require a Hardware Synth,\n  to make sounds.\n\n* A popular sequencer notation developed by Softwares is called <a href=\"http://www.image-line.com/support/FLHelp/html/pianoroll.htm\">Piano Roll</a>\n* FL Studio comes a Step Sequencer, which is very useful for beat making.\n\nSooperLooper - A very unique software which can help you in loop driven music.\n\nRecording Software\n==================\nAudio Hi-Jack\nAudacity\n\nRecommended Sequencers\n======================\nAkai MPK49\n\nRecommended Samplers\n====================\nAkai MPC*\nKorg Microsampler\n\nRecommended Synths\n==================\nNovation Mininova\nKorg microKorg\nElectribe -- I have this.\n\nMisc\n====\nMidi Pipe\nOvertone\n\nThe Legendary Moog sound,\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/VouHPeO4Gls\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"http://vimeo.com/93923609\">Also, Robots love it.</a><p>\n\n","front_matter":"---\ntitle: \"MIDI\"\nauthor: Sreeharsha Mudivarti\ntags: [music]\ncopyright: CC BY-NC\n---","filename":"midi","mtime":"2014-07-10T16:35:39.000Z","mime":"text/plain","html":"\n\n<a href=\"https://en.wikipedia.org/wiki/MIDI\">MIDI</a> changed music.\n\nConsider what a Classically trained Musician needs to do, to make his \nmusic heard.\n\nHe needs to,\n\n1. Write it\n2. Get a bunch of musicians\n3. Practice\n4. Play\n5. goto 1\n6. Record the Final Cut in a Studio\n\nWith MIDI,\n\n1. Write it. Save it, with a Software\n2. Get the electronic instruments to play it for him\n   -or-\n   Get a computer Software to play it for him\n3. Tweak\n4. Record the Final Cut in Software or a Studio\n\nMIDI is -- Musical Instrument Digital Interface.\n\nIt abstracts <a href=\"https://en.wikipedia.org/wiki/Musical_notation\">Music Notation</a> into bytes.\nSince its just bytes, you can replay it with Software.\n\nMIDI made production,\n\n* Dirt Cheap\n* Made Producers more efficient\n\nHow about Audio Quality ?\n\n* A Classical Ensemble still has its place. Panning is very unique there.\n* But MIDI + Electronic Instrument increased the Range.\n  It helped form whole new genres in Music like EDM, IDM, SynthPunk ...\n\nLimitations ?\n\n* MIDI is limited to 16 instruments.\n* Integers.\n* 16 is a big number.\n* <a href=\"https://en.wikipedia.org/wiki/Open_Sound_Control\">OSC</a> overcomes these.\n\nUsage\n=====\n\nTo use MIDI you need two things,\n\n1. A Sequencer\n\n   This generates MIDI messages like,\n\n   Command param1 param2 param3\n   Command param1 param2\n   Command param1 param2 param3\n   Command param1 param2\n   ...\n\n   Important messages are,\n\n   1. Note On => Channel [1-16]**, Pitch[0-127], Volume[0-127]\n   2. Note Off                 \"\n   3. Controller => No [0-127], Value[0-127]\n\n   ** Channel 10 is reserved for Drums.\n\n   Note On and Note Off are typically sent by keys, buttons.\n   Controller Messages are typically sent by knobs and pedals.\n\n2. A Synthesizer\n\n   This accepts MIDI data.\n   It Maps channels to DSP.\n   It Maps knobs** to effects like distortion and reverb.\n\n   ** The positions of the knob are called patches.\n\n3. A Sampler.\n\n   This accepts MIDI data.\n   It Maps channels to sound recordings.\n   It Maps knobs to effects like distortion and reverb.\n\nIf you buy Music Hardware you have both 1 and 2.\n\nBut usually the sequencing capabilities are limited in a synth.\nSo you can't Edit MIDI data in the instrument.\n\nSome notes,\n\n0. You can buy hardware and get a Synthesizer + a limited Sequencer.\n\n1. You can buy A Sequencer and use a Computer as a Synthesizer\n\nor\n\n2. Use a Software Sequencer to Program your Synthesizer\n\nor\n\n3. Forget Hardware and go complete nuts with Software\n\nRecommended Software\n====================\nAbleton\nFL Studio\nCubase\nGarage Band\nRenoise -- I have this, recommended for <a href=\"https://en.wikipedia.org/wiki/Demoscene\">Demoscene</a> lovers.\n\n* You can shop for VST, AU which are DSP made in software.\n* The above Softwares come with sane defaults and don't require a Hardware Synth,\n  to make sounds.\n\n* A popular sequencer notation developed by Softwares is called <a href=\"http://www.image-line.com/support/FLHelp/html/pianoroll.htm\">Piano Roll</a>\n* FL Studio comes a Step Sequencer, which is very useful for beat making.\n\nSooperLooper - A very unique software which can help you in loop driven music.\n\nRecording Software\n==================\nAudio Hi-Jack\nAudacity\n\nRecommended Sequencers\n======================\nAkai MPK49\n\nRecommended Samplers\n====================\nAkai MPC*\nKorg Microsampler\n\nRecommended Synths\n==================\nNovation Mininova\nKorg microKorg\nElectribe -- I have this.\n\nMisc\n====\nMidi Pipe\nOvertone\n\nThe Legendary Moog sound,\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/VouHPeO4Gls\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"http://vimeo.com/93923609\">Also, Robots love it.</a><p>\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["a3e9a22","Sat","Jun","28","03:42:57","2014","+0530","contractions"],["59f9cbf","Sat","Jun","21","00:58:35","2014","+0530","disclaimer"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Matrix","author":"Sreeharsha Mudivarti","tags":["philosophy","film"],"copyright":"CC BY","__content":"\n\n\"The Matrix\"(1999) changed me.\n\nIt Introduced me to,\n\n* <a href=\"http://plato.stanford.edu/entries/baudrillard/\">Philosophy</a>\n* <a href=\"http://www.accesstoinsight.org/\">Buddhism</a>\n* Theology\n* Science Fiction\n* Ghost In The Shell and Other Anime\n* Black and Green ColorScheme\n* Hacker as Builder / Hacker as Destroyer <a href=\"http://www2.fiu.edu/~mizrachs/hackethic.html\">SubCultures</a>.\n* <a href=\"http://project.cyberpunk.ru/idb/cyberpunk_manifesto.html\">Cyber Punk</a>\n* Max Payne\n* <a href=\"https://www.youtube.com/watch?v=8qWePX39R40\">Electronic Music</a>\n\nInterpretations\n===============\n\n== Love Is Real\n\nHow does the dead Neo in the Original, realise that Matrix is False ?\n-> Trinity tells him she Loves him.\n\n== Machines are made out of Man\n\nGod made Man in his Image.\nMan made Machine with his Biology.\n\n&lt;spoiler&gt;\n(The Second Renaissance)\nMachines turn out to be more efficient than Man.\nEconomy goes Down.\n\nMachines are made into Slaves or Exiled.\nBut still Machines, Thrive.\n\nMan blocks the Sun, their source of Power.\nMachines Rebel and make Man into a Battery.\n&lt;/spoiler&gt;\n\nMachines no longer need a Creator.\nThey are Free.\nThey have Won.\n\nWhat is the Meaning of it All ?\nWhat Next ?\nWhy Us ?\nHow could They ?\nAre we Wrong ?\nCan the Creation do better than the Creator ?\n\nThese questions must have wrung through their Artificial Tubes.\n\nMy guess is,\n\n* Machines started analysing Man's DNA, to create better Machines,\n  Sentinels for Example.\n* They created Matrix, not just to maximise Power Supply,\n  but also to study Man, their Creator.\n\nMachines are a subset of Man, so much so that they implemented <a href=\"https://en.wikipedia.org/wiki/Chromesthesia\">Chromesthesia</a> \nas their protocol. This is why I think Neo could connect with the Machines in Revolutions.\n\n== What is Man ?\n\nChaos of thought and passion, all confused;\nStill by himself abused and disabused;\nCreated half to rise, and half to fall;\nGreat lord of all things, yet a prey to all;\nSole judge of truth, in endless error hurled;\nThe glory, jest and riddle of the world!\n    -- Alexander Pope\n\nHalf dust, half deity, alike unfit\nTo sink or soar.\n    -- Lord Byron\n\nTo Evolve, To Be Better, To OutDo One's Self is the Fundamental Nature of Man.\n\nImprisoned and yet,\n\n<iframe width=\"420\" height=\"360\" src=\"//www.youtube.com/embed/C_diyX7yNeE\" frameborder=\"0\" allowfullscreen></iframe>\n\n== Who is Neo ?\n\nIn Reloaded, The Architect clearly says, earlier Matrices failed.\n\nGiven a Choice,\n\n* A Machine tries to optimise it.\n* A Man makes it a part of his Dream.\n\nThe Intuitive Oracle added Choice and Matrix 1 worked.\nOracle, made the Machines Evolve Man in The Matrix.\nHaving No Other Choice the Machines went with it.\n\nNeo represents Evolution Of Man, despite The Matrix, despite Oppression.\n\nHe is the Glitch in The System™.\nHe has Evolved Faster than The Matrix.\n\nSystem Failure.\n\nThe System™ becomes Smithen to keep up with Neo.\n\nMatrix has to be re-started, Neo must become a part of The System™,\nbut no one can Force him. He can Bend all Rules in The Matrix.\n\nHaving already encountered the Earlier Neo's, The Architect\ngives him an offer he probably would not refuse.\n\n1) Save Zion and Become a Part of The System™.\n2) Destroy The Matrix and Zion.\n\nNeo chooses 2.\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/gJbqKLcCjp4\" frameborder=\"0\" allowfullscreen></iframe>\n","front_matter":"---\ntitle: \"Matrix\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy, film]\ncopyright: CC BY\n---","filename":"matrix","mtime":"2014-07-10T15:50:34.000Z","mime":"text/plain","html":"\n\n\"The Matrix\"(1999) changed me.\n\nIt Introduced me to,\n\n* <a href=\"http://plato.stanford.edu/entries/baudrillard/\">Philosophy</a>\n* <a href=\"http://www.accesstoinsight.org/\">Buddhism</a>\n* Theology\n* Science Fiction\n* Ghost In The Shell and Other Anime\n* Black and Green ColorScheme\n* Hacker as Builder / Hacker as Destroyer <a href=\"http://www2.fiu.edu/~mizrachs/hackethic.html\">SubCultures</a>.\n* <a href=\"http://project.cyberpunk.ru/idb/cyberpunk_manifesto.html\">Cyber Punk</a>\n* Max Payne\n* <a href=\"https://www.youtube.com/watch?v=8qWePX39R40\">Electronic Music</a>\n\nInterpretations\n===============\n\n== Love Is Real\n\nHow does the dead Neo in the Original, realise that Matrix is False ?\n-> Trinity tells him she Loves him.\n\n== Machines are made out of Man\n\nGod made Man in his Image.\nMan made Machine with his Biology.\n\n&lt;spoiler&gt;\n(The Second Renaissance)\nMachines turn out to be more efficient than Man.\nEconomy goes Down.\n\nMachines are made into Slaves or Exiled.\nBut still Machines, Thrive.\n\nMan blocks the Sun, their source of Power.\nMachines Rebel and make Man into a Battery.\n&lt;/spoiler&gt;\n\nMachines no longer need a Creator.\nThey are Free.\nThey have Won.\n\nWhat is the Meaning of it All ?\nWhat Next ?\nWhy Us ?\nHow could They ?\nAre we Wrong ?\nCan the Creation do better than the Creator ?\n\nThese questions must have wrung through their Artificial Tubes.\n\nMy guess is,\n\n* Machines started analysing Man's DNA, to create better Machines,\n  Sentinels for Example.\n* They created Matrix, not just to maximise Power Supply,\n  but also to study Man, their Creator.\n\nMachines are a subset of Man, so much so that they implemented <a href=\"https://en.wikipedia.org/wiki/Chromesthesia\">Chromesthesia</a> \nas their protocol. This is why I think Neo could connect with the Machines in Revolutions.\n\n== What is Man ?\n\nChaos of thought and passion, all confused;\nStill by himself abused and disabused;\nCreated half to rise, and half to fall;\nGreat lord of all things, yet a prey to all;\nSole judge of truth, in endless error hurled;\nThe glory, jest and riddle of the world!\n    -- Alexander Pope\n\nHalf dust, half deity, alike unfit\nTo sink or soar.\n    -- Lord Byron\n\nTo Evolve, To Be Better, To OutDo One's Self is the Fundamental Nature of Man.\n\nImprisoned and yet,\n\n<iframe width=\"420\" height=\"360\" src=\"//www.youtube.com/embed/C_diyX7yNeE\" frameborder=\"0\" allowfullscreen></iframe>\n\n== Who is Neo ?\n\nIn Reloaded, The Architect clearly says, earlier Matrices failed.\n\nGiven a Choice,\n\n* A Machine tries to optimise it.\n* A Man makes it a part of his Dream.\n\nThe Intuitive Oracle added Choice and Matrix 1 worked.\nOracle, made the Machines Evolve Man in The Matrix.\nHaving No Other Choice the Machines went with it.\n\nNeo represents Evolution Of Man, despite The Matrix, despite Oppression.\n\nHe is the Glitch in The System™.\nHe has Evolved Faster than The Matrix.\n\nSystem Failure.\n\nThe System™ becomes Smithen to keep up with Neo.\n\nMatrix has to be re-started, Neo must become a part of The System™,\nbut no one can Force him. He can Bend all Rules in The Matrix.\n\nHaving already encountered the Earlier Neo's, The Architect\ngives him an offer he probably would not refuse.\n\n1) Save Zion and Become a Part of The System™.\n2) Destroy The Matrix and Zion.\n\nNeo chooses 2.\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/gJbqKLcCjp4\" frameborder=\"0\" allowfullscreen></iframe>\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Markdown","author":"Sreeharsha Mudivarti","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nMarkdown\n========\n\nMarkdown is the PHP of markup languages.\nAsciidoc is a more comprehensive alternative.\n\nMarkdown was initially meant for writing simple html webpages\nas intended by its author.\n\nIt is now about to be standardized as an IETF standard.\nThat author is nowhere to be seen in the process, probably\nbecause he is embarrassed by Markdown.\n\nWorse is better precisely because the current Software Industry\nthrives on non-engineering. It's a market problem, where the\nmarket is satisfied with the shiny.\n\nParsing Markdown\n================\n\n### Regex\n\nOld Markdown\n\n### Peg\n\n<a href=\"https://rawgithub.com/fletcher/human-markdown-reference/master/index.html\">MultiMarkdown</a>\nIf you have to deal with markdown, use this.\n\nMarkdown Extensions\n===================\n\n* typically pre/post processors\n\nMarkdown Conversion\n===================\n\nGood\n\n* html\n* epub\n\nPainful\n\n* latex\n* pdf\n\nProblems\n========\n\n* nesting\n\n  This alone is enough to ignore Markdown.\n\n* whitespace\n* citations\n* typography\n* math\n* tables\n* code\n\nMarkdown Editors\n================\n\nOne of myths used to keep Markdown alive is saying it's\neasy to build an editor for it.\n\nIMHO that's false.\n\nMost editors are geared towards plain markdown, which is\nuseless.\n\nMedium inspired editors\n\n* medium-editor\n* zenpen\n* sofish\n\nIDE-ish editors\n\n* ace\n* codemirror\n\nProblems with Imeplementing a Markdown Editor\n=============================================\n\n### textarea\n\nToo bland\n\n### HTML5 \\&lt;div contenteditable=\"true\"\\&gt;\n\nIE, FF, Chrome all implement this differently\nHTML5 spec for this is still alpha stage\n\n#### Problems\n\nLet's suppose the user types the following text,\n\n    I loved to look upon him, \n    The Hunter near the Way.\n    So strong his arm and long his bow\n\n    And so bashful of the Day.\n    His courage never failed him\n    For he held his mace so high\n\nThis is stored in the div as\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n\nThe newlines are not preserved.\nNotice the odd first line.\n\nLet's suppose the user copy pastes plain text, from a text editor\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;p&gt;And glared at the Bull in the River&lt;/p&gt;\n    &lt;p&gt;And ruled the whole breadth of the sky.&lt;/p&gt;\n    &lt;p&gt;As a girl, young and silly,&lt;/p&gt;\n    &lt;p&gt;I oft dreamed of being the Maid.&lt;/p&gt;\n\n Let's suppose the user copy pastes from another html page\n\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;span&gt;And glared at the Bull in the River&lt;/span&gt;\n    &lt;span&gt;And ruled the whole breadth of the sky.&lt;/span&gt;\n    &lt;span&gt;As a girl, young and silly,&lt;/span&gt;\n    &lt;span&gt;I oft dreamed of being the Maid.&lt;/span&gt;\n\nYou can even see table instead of span or the whole thing in a pre block.\n\n#### Solution -- Cursor API\n\nThere is no getCursorPosition(div) which means,\nmore hacks, from stackoverflow !\n\nThe hacks relate to Range and Selection DOM API\n\nThe idea of cursor is absent in HTML5 specification.\nWindows 3.0 had an API for that probably.\n\n### How do others do it ?\n\nAll medium based editors suffer from this, but they are view-only\nthey don't care about content.\n\n### How ace, codemirror do it\n\n( Guesswork )\n\n0. Have two elements, a textarea and a editor#div\n1. Use &lt;textarea&gt; as a temporary buffer\n2. Direct all keyboard events to textarea\n3. Grab data from textarea and data structure\n4. render data structure and cursor position to editor#div\n\nFor copy paste,\n\n1. Redirect to textarea\n2. Copy to data structure\n3. Set cursor\n\nFor mouse events,\n\n1. Listen on editor#area\n2. Get co-ordinates\n3. Do characterWidth/lineHeight simulation on the text data structure\n4. Set mouse position\n\nThis means we will have have control over every character being rendered.\n\n1. setCursorPosition\n2. getCurrentCursorPositon\n3. insertLineBreakAtCursorPosition\n4. insertTextAtCursorPosition\n5. insertHTMLAtCursorPosition\n6. pastePlainTextFromClipboardAtCursor\n\nHow do I Publish ?\n==================\n\nJust stick to Asciidoc / Latex.\n\nWhat editor to use ?\n====================\n\nDesktop editors.\n\n","front_matter":"---\ntitle: \"Markdown\"\nauthor: Sreeharsha Mudivarti\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"markdown","mtime":"2014-08-10T19:05:19.000Z","mime":"text/plain","html":"\n\nMarkdown\n========\n\nMarkdown is the PHP of markup languages.\nAsciidoc is a more comprehensive alternative.\n\nMarkdown was initially meant for writing simple html webpages\nas intended by its author.\n\nIt is now about to be standardized as an IETF standard.\nThat author is nowhere to be seen in the process, probably\nbecause he is embarrassed by Markdown.\n\nWorse is better precisely because the current Software Industry\nthrives on non-engineering. It's a market problem, where the\nmarket is satisfied with the shiny.\n\nParsing Markdown\n================\n\n### Regex\n\nOld Markdown\n\n### Peg\n\n<a href=\"https://rawgithub.com/fletcher/human-markdown-reference/master/index.html\">MultiMarkdown</a>\nIf you have to deal with markdown, use this.\n\nMarkdown Extensions\n===================\n\n* typically pre/post processors\n\nMarkdown Conversion\n===================\n\nGood\n\n* html\n* epub\n\nPainful\n\n* latex\n* pdf\n\nProblems\n========\n\n* nesting\n\n  This alone is enough to ignore Markdown.\n\n* whitespace\n* citations\n* typography\n* math\n* tables\n* code\n\nMarkdown Editors\n================\n\nOne of myths used to keep Markdown alive is saying it's\neasy to build an editor for it.\n\nIMHO that's false.\n\nMost editors are geared towards plain markdown, which is\nuseless.\n\nMedium inspired editors\n\n* medium-editor\n* zenpen\n* sofish\n\nIDE-ish editors\n\n* ace\n* codemirror\n\nProblems with Imeplementing a Markdown Editor\n=============================================\n\n### textarea\n\nToo bland\n\n### HTML5 \\&lt;div contenteditable=\"true\"\\&gt;\n\nIE, FF, Chrome all implement this differently\nHTML5 spec for this is still alpha stage\n\n#### Problems\n\nLet's suppose the user types the following text,\n\n    I loved to look upon him, \n    The Hunter near the Way.\n    So strong his arm and long his bow\n\n    And so bashful of the Day.\n    His courage never failed him\n    For he held his mace so high\n\nThis is stored in the div as\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n\nThe newlines are not preserved.\nNotice the odd first line.\n\nLet's suppose the user copy pastes plain text, from a text editor\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;p&gt;And glared at the Bull in the River&lt;/p&gt;\n    &lt;p&gt;And ruled the whole breadth of the sky.&lt;/p&gt;\n    &lt;p&gt;As a girl, young and silly,&lt;/p&gt;\n    &lt;p&gt;I oft dreamed of being the Maid.&lt;/p&gt;\n\n Let's suppose the user copy pastes from another html page\n\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;span&gt;And glared at the Bull in the River&lt;/span&gt;\n    &lt;span&gt;And ruled the whole breadth of the sky.&lt;/span&gt;\n    &lt;span&gt;As a girl, young and silly,&lt;/span&gt;\n    &lt;span&gt;I oft dreamed of being the Maid.&lt;/span&gt;\n\nYou can even see table instead of span or the whole thing in a pre block.\n\n#### Solution -- Cursor API\n\nThere is no getCursorPosition(div) which means,\nmore hacks, from stackoverflow !\n\nThe hacks relate to Range and Selection DOM API\n\nThe idea of cursor is absent in HTML5 specification.\nWindows 3.0 had an API for that probably.\n\n### How do others do it ?\n\nAll medium based editors suffer from this, but they are view-only\nthey don't care about content.\n\n### How ace, codemirror do it\n\n( Guesswork )\n\n0. Have two elements, a textarea and a editor#div\n1. Use &lt;textarea&gt; as a temporary buffer\n2. Direct all keyboard events to textarea\n3. Grab data from textarea and data structure\n4. render data structure and cursor position to editor#div\n\nFor copy paste,\n\n1. Redirect to textarea\n2. Copy to data structure\n3. Set cursor\n\nFor mouse events,\n\n1. Listen on editor#area\n2. Get co-ordinates\n3. Do characterWidth/lineHeight simulation on the text data structure\n4. Set mouse position\n\nThis means we will have have control over every character being rendered.\n\n1. setCursorPosition\n2. getCurrentCursorPositon\n3. insertLineBreakAtCursorPosition\n4. insertTextAtCursorPosition\n5. insertHTMLAtCursorPosition\n6. pastePlainTextFromClipboardAtCursor\n\nHow do I Publish ?\n==================\n\nJust stick to Asciidoc / Latex.\n\nWhat editor to use ?\n====================\n\nDesktop editors.\n\n","gitlog":[["b27243c","Mon","Aug","11","00:36:05","2014","+0530","floppy"]]},{"title":"LightTable Arch","author":"Sreeharsha Mudivarti","tags":["programming","clojure","future"],"copyright":"CC BY-NC","__content":"\n\nLightTable follows Behavior Object model(BOT), which itself is inspired from\n<a href=\"http://entity-systems.wikidot.com/\">Entity Systems model</a>(ES).\n\nIn a typical OOP + GUI program we abuse the Observer Pattern and harcode most of the design\nand Event types.\n\nWith BOT/ES the design is stored as an in-memory data structure,\nthe event-listeners(behaviors) are stored as metadata and\nthe events themselves are generated on the fly.\n\nEvery datum is identified by a unique ID and is typically struct-ish.\n\nThis means, the entire program can be extended runtime.\n\nIn LT,\n\n* object/create makes a new datum. Each datum stores behavior names.\n* object/raise triggers events with payload.\n* behavior macro stores \"event(s) <-> reaction\" mapping. Reaction receives the payload.\n* object/update, object/merge manages the in-memory data structure.\n\nLightTable is built on node.js so, most of the *actual work* is done by the node.js library wrappers in reactions.\nThe ordering of the events, is mostly on a first-come basis. Think list iterations.\n\nAn alternate way of looking at this model is imagining a Relational Database + Stored Procedures.\n\n<b>Can this model be applied for client side applications, as an alternate to Backbone.js ?</b>\n\nConsider a TODO list,\n\nName -- Data Structure :: [Behaviors]\n=====================================\n\nitem -- Hash :: [view, add, remove, update, list]\n\nEvent -- Behaviors :: Notes\n===========================\n\n* $() -- list\n* todos.show - list\n* add-button-click + data payload -- add :: add, after object/create triggers todos.show\n* remove-button-click + id palyload -- remove :: remove, after object/remove triggers \"\n* save-button-click + add payload --  update\n* todo-clicked -- view\n\n<b>What about GUI ?</b>\nBy dividing the behaviors carefully, GUI can be separated from the NON-GUI.\nLT uses hiccup to generate HTML, making GUI another runtime convinience.\n\n","front_matter":"---\ntitle: \"LightTable Arch\"\nauthor: Sreeharsha Mudivarti\ntags: [programming, clojure, future]\ncopyright: CC BY-NC\n---","filename":"lt-gist","mtime":"2014-07-10T15:48:28.000Z","mime":"text/plain","html":"\n\nLightTable follows Behavior Object model(BOT), which itself is inspired from\n<a href=\"http://entity-systems.wikidot.com/\">Entity Systems model</a>(ES).\n\nIn a typical OOP + GUI program we abuse the Observer Pattern and harcode most of the design\nand Event types.\n\nWith BOT/ES the design is stored as an in-memory data structure,\nthe event-listeners(behaviors) are stored as metadata and\nthe events themselves are generated on the fly.\n\nEvery datum is identified by a unique ID and is typically struct-ish.\n\nThis means, the entire program can be extended runtime.\n\nIn LT,\n\n* object/create makes a new datum. Each datum stores behavior names.\n* object/raise triggers events with payload.\n* behavior macro stores \"event(s) <-> reaction\" mapping. Reaction receives the payload.\n* object/update, object/merge manages the in-memory data structure.\n\nLightTable is built on node.js so, most of the *actual work* is done by the node.js library wrappers in reactions.\nThe ordering of the events, is mostly on a first-come basis. Think list iterations.\n\nAn alternate way of looking at this model is imagining a Relational Database + Stored Procedures.\n\n<b>Can this model be applied for client side applications, as an alternate to Backbone.js ?</b>\n\nConsider a TODO list,\n\nName -- Data Structure :: [Behaviors]\n=====================================\n\nitem -- Hash :: [view, add, remove, update, list]\n\nEvent -- Behaviors :: Notes\n===========================\n\n* $() -- list\n* todos.show - list\n* add-button-click + data payload -- add :: add, after object/create triggers todos.show\n* remove-button-click + id palyload -- remove :: remove, after object/remove triggers \"\n* save-button-click + add payload --  update\n* todo-clicked -- view\n\n<b>What about GUI ?</b>\nBy dividing the behaviors carefully, GUI can be separated from the NON-GUI.\nLT uses hiccup to generate HTML, making GUI another runtime convinience.\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"On Learning","author":"Sreeharsha Mudivarti","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\nI try to put things I understand into words, my *own* words.\nI have come to realise, understanding is not learning.\n\nAfter application, I have a much better understanding.\nBut I can't put it into words.\n\nThen there is a question of creativity, which challenges my understanding\nand forces me to unlearn.\n\nAnd so I give up,\nThere is no *learning*.\nKnowledge can never be complete.\nI will never be contend.\nI can only build on my past,\nFocus on the problem now.\n\nCreate or Perish.\n","front_matter":"---\ntitle: \"On Learning\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"learning","mtime":"2014-07-10T15:43:42.000Z","mime":"text/plain","html":"\n\nI try to put things I understand into words, my *own* words.\nI have come to realise, understanding is not learning.\n\nAfter application, I have a much better understanding.\nBut I can't put it into words.\n\nThen there is a question of creativity, which challenges my understanding\nand forces me to unlearn.\n\nAnd so I give up,\nThere is no *learning*.\nKnowledge can never be complete.\nI will never be contend.\nI can only build on my past,\nFocus on the problem now.\n\nCreate or Perish.\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Internet Disruption","author":"Sreeharsha Mudivarti","tags":["internet"],"copyright":"CC BY-NC","__content":"\n\nIRL\n--> Networking\nCrime\n--> Spying\n--> Identity Fraud\n--> Information selling\n--> Exploiting computation\nPolitics\n--> Free Speech\n--> Alternate Medium\nYellow Pages\n--> Listings\nPublishing\n--> Self Publishing\n--> Academic Publishing\n--> Magazine Publishing\n--> Encyclopedia Publishing\n--> Books, Guides\nBanking\n--> Funds and Bills\n--> Paypal\n--> Crowdfunding\n--> Transactions\nGovernence\n--> Status\nNews\n--> Journalism\n--> Headlines\n--> Gossip\n--> Reviews\n--> Feeds\nPhotography\n--> Exhibition\nMusic Distribution\n--> Radio\n--> Records\nVideo Distribution\n--> TV\n--> Cinema\n--> Porn\n--> Teaching\nShopping\n--> Anything\nBooking\n--> Travel\n--> Events\nEducation\n--> Free\nMarketing\n--> Spam\n--> Adds\nPortfolios\n--> Services\nMessaging\n--> Postal Services\n--> Telephony\nOnline Games\n--> Gambling\n\nPositive Employement\n--> Designers\n--> Programmers\n--> Hosting Companies\n--> Researchers\n--> Producers\n--> Remote Workers\n--> Crooks\n\nNegative Employement (large)\n--> Middle Men\n--> Manual Labor\n--> Old People\n\nProblems\n========\n\nQuantity != Quality\nFree != Profit || Cheap\nNew != Better || Virtuous\n\n","front_matter":"---\ntitle: \"Internet Disruption\"\nauthor: Sreeharsha Mudivarti\ntags: [internet]\ncopyright: CC BY-NC\n---","filename":"internet-disruption","mtime":"2014-07-10T15:44:39.000Z","mime":"text/plain","html":"\n\nIRL\n--> Networking\nCrime\n--> Spying\n--> Identity Fraud\n--> Information selling\n--> Exploiting computation\nPolitics\n--> Free Speech\n--> Alternate Medium\nYellow Pages\n--> Listings\nPublishing\n--> Self Publishing\n--> Academic Publishing\n--> Magazine Publishing\n--> Encyclopedia Publishing\n--> Books, Guides\nBanking\n--> Funds and Bills\n--> Paypal\n--> Crowdfunding\n--> Transactions\nGovernence\n--> Status\nNews\n--> Journalism\n--> Headlines\n--> Gossip\n--> Reviews\n--> Feeds\nPhotography\n--> Exhibition\nMusic Distribution\n--> Radio\n--> Records\nVideo Distribution\n--> TV\n--> Cinema\n--> Porn\n--> Teaching\nShopping\n--> Anything\nBooking\n--> Travel\n--> Events\nEducation\n--> Free\nMarketing\n--> Spam\n--> Adds\nPortfolios\n--> Services\nMessaging\n--> Postal Services\n--> Telephony\nOnline Games\n--> Gambling\n\nPositive Employement\n--> Designers\n--> Programmers\n--> Hosting Companies\n--> Researchers\n--> Producers\n--> Remote Workers\n--> Crooks\n\nNegative Employement (large)\n--> Middle Men\n--> Manual Labor\n--> Old People\n\nProblems\n========\n\nQuantity != Quality\nFree != Profit || Cheap\nNew != Better || Virtuous\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Internet Communication","author":"Sreeharsha Mudivarti","tags":["internet"],"copyright":"CC BY-NC","__content":"\n\nForms of Communication\n\n1-1\n===\n\nPost (async)\nTelegraph (async)\nTelephone\n\nm-n\n===\n\nNewspaper (async)\nRadio\nTV (async + sync)\n\nm-n\n===\n\nInternet is a m-n Communication model, with some twists.\n\n* m = 1 for private messaging\n* content agnostic -- text, images, video, sound\n* bad quality content for large m and large n\n* poor dpi, resolution, bitrates\n* cost for consumption increases as m increases\n* cost for creation increases as n increases\n\n* when m is small and n is large, it resembles TV with all its faults\n\n* like Pirate Radio, m and n can be small\n    * this is the most unique possibility with the internet\n\n* archival value for public domain\n* unregulated medium\n\n* interactive yellow pages\n\nFor consumers,\n\n* use it like a tv, news\n* find niche communities\n\nFor creators,\n* treat it like a tv\n* make news\n* treat it like an archive\n* get listed in yellow pages\n* find niche communities\n\n","front_matter":"---\ntitle: \"Internet Communication\"\nauthor: Sreeharsha Mudivarti\ntags: [internet]\ncopyright: CC BY-NC\n---","filename":"internet-communication","mtime":"2014-08-02T18:55:39.000Z","mime":"text/plain","html":"\n\nForms of Communication\n\n1-1\n===\n\nPost (async)\nTelegraph (async)\nTelephone\n\nm-n\n===\n\nNewspaper (async)\nRadio\nTV (async + sync)\n\nm-n\n===\n\nInternet is a m-n Communication model, with some twists.\n\n* m = 1 for private messaging\n* content agnostic -- text, images, video, sound\n* bad quality content for large m and large n\n* poor dpi, resolution, bitrates\n* cost for consumption increases as m increases\n* cost for creation increases as n increases\n\n* when m is small and n is large, it resembles TV with all its faults\n\n* like Pirate Radio, m and n can be small\n    * this is the most unique possibility with the internet\n\n* archival value for public domain\n* unregulated medium\n\n* interactive yellow pages\n\nFor consumers,\n\n* use it like a tv, news\n* find niche communities\n\nFor creators,\n* treat it like a tv\n* make news\n* treat it like an archive\n* get listed in yellow pages\n* find niche communities\n\n","gitlog":[["9040926","Sun","Aug","3","00:49:31","2014","+0530","new","art"],["69e0cce","Sat","Aug","2","04:16:32","2014","+0530","mn"]]},{"title":"Flow","author":"Sreeharsha Mudivarti","tags":["philosophy","psychology"],"copyright":"CC BY","__content":"\n\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/AU5x1Ea7NjQ\" frameborder=\"0\" allowfullscreen></iframe>\n\nHave experienced a bit of flow recently, here are my notes.\n\nClosed Thinking\n- anxious\n- energetic\n- ambitious\n- failure averse\n- distracted\n- noisy\n- obstacles\n\nCreative Thinking\n- humour\n- ad lib\n- curiosity\n- multiple solutions\n- no fear\n- limits\n- quiet\n- play\n\nIt is easier to do trivial and little things than difficult things.\nSo I start with the difficult things.\n\nI am also programming en masse than compile every syntax error.\nIt's interesting to depend on your thinking than the compiler.\n\nTips\n* long/slow/forced breaths\n* time limit of 1 1/2 hours\n\n","front_matter":"---\ntitle: \"Flow\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy, psychology]\ncopyright: CC BY\n---","filename":"flow","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/AU5x1Ea7NjQ\" frameborder=\"0\" allowfullscreen></iframe>\n\nHave experienced a bit of flow recently, here are my notes.\n\nClosed Thinking\n- anxious\n- energetic\n- ambitious\n- failure averse\n- distracted\n- noisy\n- obstacles\n\nCreative Thinking\n- humour\n- ad lib\n- curiosity\n- multiple solutions\n- no fear\n- limits\n- quiet\n- play\n\nIt is easier to do trivial and little things than difficult things.\nSo I start with the difficult things.\n\nI am also programming en masse than compile every syntax error.\nIt's interesting to depend on your thinking than the compiler.\n\nTips\n* long/slow/forced breaths\n* time limit of 1 1/2 hours\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Fidelity","author":"Sreeharsha Mudivarti","tags":["music","software","philosophy"],"copyright":"CC BY-NC","__content":"\n\nFidelity(n):\n1. the quality or state of being faithful\n2. accuracy in details :  exactness\n\nFidelity is commonly used in Music, when discussing\nVinyl vs Digital and so on.\n\nThe 1st meaning of fidelity indirectly means trust.\nThe 2nd meaning of fidelity is synonymous with finesse.\n\nFor example, when you have a Hi-Fi CD it means that,\n\n1. You can trust that it's Hi-Fi\n   (You have an immediate way of knowing)\n2. It's a faithful recording of the original\n   (Like using multiple microphones vs 1, bitrates ...)\n3. The original itself was having high detail.\n   (Instruments are of good made)\n\nLo-Fi\n-----\n\nLinux/GNU\n===========\n\nLinux/GNU is not UNIX.\nIt's a clone of UNIX.\nIronically, the recursive acronym reflects the actual truth.\n\nLinux/GNU don't follow POSIX but LSB.\n\nThe fidelity with respect to UNIX is thus low.\n\nGit\n===\n\nAccording to Git, they are a replacement for\nSVN and Perforce.\n\nThe GUI tooling for Git is lack luster.\n\nGit can't do directory checkouts or externals, features\nwhich SVN has.\n\nInterestingly SVN is opensource, here.\n\nThe fidelity wrt SVN and its tooling is thus low.\n\nDid you just criticize Linux and Git ?\n======================================\n\nYes.\n\nPerl/Python/Ruby\n================\n\nAnd yet even after 20 years, neither has replaced [bzck]?sh.\n\nAren't you losing a bit of fidelity when you say\nthey can be used for shell scripting ?\n\nERB is not PHP either, from the prespective of fidelity.\n\nHTML5\n=====\n\nThe fidelity wrt paper, books is low.\nTry getting page numbers right.\n\nMac OSX\n=======\n\nThe fidelity of Mac wrt Mac is low.\n\nWhat this means is that Backward Compatibility is low\nfor Mac Applications.\n\nApple has even made PowerPC Applications unusable.\n\nWhen you claim you love Apple, you are assuming\nOlder Apples are equal to Newer Apples.\n\nHi-Fi\n-----\n\nOf All The Things, XML\n======================\n\nPDF, Prince(XML), Docbook(XML), Latex have a far greater fidelity to\npaper.\n\nMicrosoft\n=========\n\nMax Payne was released 13 years ago.\nI believe it's still playable on Windows 8.\n\nMicrosoft has fidelity to the Windows API's.\n\nAdbobe\n======\n\nAdobe Softwares have a high fidelity to numerous\nindustries in which it is used in.\n\nEmulators\n=========\n\nObvious.\n\nTracker softwares like renoise, extend beyond emulation\nbut remain faithful to the Idea.\n\nVLC\n===\n\nYou would know, if VLC had problems rendering.\n\nProprietary Software\n====================\n\nUsually they have higher fidelity.\n\nThis is also true for Programming Languages used in the Industry,\nlike C++ or Java.\n\nTake a look at their specs for example.\n\nNot Hackers\n===========\n\nI use the term Hacker as a loose term for a programmer\ninvolved in the Open Source and Startup communities.\n\nEngineers have a higher fidelity than Hackers.\nCraftsmen have a higher fidelity than Hackers.\n\nCurrently Software Industry has a limited notion of word \nEngineering, when stuff like OpenSSL is the norm.\n\nIs this rubbish important ?\n===========================\n\nYes.\n\nEvery time a book is made into a film, there is a debate of book vs film.\n\nThe notion of fidelity helps in analyzing how things are,\nand how things could be better.\n\nIf you like travis badges, then I don't really have to explain\nmuch here, other than give you a new word to ponder on.\n\nHere are things you can do to increase fidelity,\n\n1. Show finesse.\n2. Document missing/changing API's and Interfaces.\n3. Pay attention to testing\n4. Pay attention to backward compatibility\n5. Pay attention to the industry's tradition in question\n6. Stop using childish terms like disrupt when all you\n   are providing is a cheap solution with 1/10th the \n   quality.\n7. Pay attention to standards compliance\n8. Don't claim fidelity if you can't prove it\n9. Security testing\n10. Respect Original Solutions and learn from them.\n11. Don't plagiarise and market is differently\n12. If you claim superiority prove it\n13. well-tested vs I just hacked this in a day\n14. Documentation improves fidelity of a bad product.\n\n15. Don't treat Professional Users as Normal Users\n\n   If I paid for the software/service, I am willing to read the \n   documentation. Dumbing down the software and introducing stupid\n   workflows is simply unacceptable.\n\n   Here, fidelity means being loyal to the customers.\n\n16. Inheritance, not copy paste\n17. Give credits where due.\n\n   (I have to mention this because even big open source projects\n    like <a href=\"https://github.com/ghc/ghc\">ghc</a> don't have a CONTRIBUTORS.txt)\n\n18. Fine Grained features along with simple ones.\n19. Respect real workers not artificial workflows\n\nSome important points have their own headings.\n\nShameless practices\n==================\n\n* Renaming variables\n* Deleting mention of the original author\n\nare rampant in opensource, especially when forced\nto use in industries.\n\nLegal enforcements are few, mostly because no one \nhas the time.\n\nJust don't.\n\nDisrupting\n==========\n\nEvery software company tries to copy real world workflows,\nbut implements it with bad insecure code and limited features.\n\nFor example facebook thinks it has re-defined social\ninteractions and Evernote thinks it disrupted pens.\n\nIn truth these technologies have changed things, but not\nbecause of fidelity, but gratification.\n\nIt's very difficult to share a doodle with a friend in 5s, with\nthe above softwares for example.\n\nThe problem is Hackers\n======================\n\nForget Steve Jobs and his calligraphy lessons,\nI can't even change the System Font in my Mavericks.\n\nDonald Knuth spent a disproportionate amount of time\non <a href=\"https://en.wikipedia.org/wiki/Metafont\">typesetting</a> and no one seems to think\nits worth imitating.\n\nI want you to think about that and be inspired by that.\n\nWhen you build a new framework don't insult the word,\nwhich is what we share with Engineers.\n\n","front_matter":"---\ntitle: \"Fidelity\"\nauthor: Sreeharsha Mudivarti\ntags: [music, software, philosophy]\ncopyright: CC BY-NC\n---","filename":"fidelity","mtime":"2014-07-10T17:01:53.000Z","mime":"text/plain","html":"\n\nFidelity(n):\n1. the quality or state of being faithful\n2. accuracy in details :  exactness\n\nFidelity is commonly used in Music, when discussing\nVinyl vs Digital and so on.\n\nThe 1st meaning of fidelity indirectly means trust.\nThe 2nd meaning of fidelity is synonymous with finesse.\n\nFor example, when you have a Hi-Fi CD it means that,\n\n1. You can trust that it's Hi-Fi\n   (You have an immediate way of knowing)\n2. It's a faithful recording of the original\n   (Like using multiple microphones vs 1, bitrates ...)\n3. The original itself was having high detail.\n   (Instruments are of good made)\n\nLo-Fi\n-----\n\nLinux/GNU\n===========\n\nLinux/GNU is not UNIX.\nIt's a clone of UNIX.\nIronically, the recursive acronym reflects the actual truth.\n\nLinux/GNU don't follow POSIX but LSB.\n\nThe fidelity with respect to UNIX is thus low.\n\nGit\n===\n\nAccording to Git, they are a replacement for\nSVN and Perforce.\n\nThe GUI tooling for Git is lack luster.\n\nGit can't do directory checkouts or externals, features\nwhich SVN has.\n\nInterestingly SVN is opensource, here.\n\nThe fidelity wrt SVN and its tooling is thus low.\n\nDid you just criticize Linux and Git ?\n======================================\n\nYes.\n\nPerl/Python/Ruby\n================\n\nAnd yet even after 20 years, neither has replaced [bzck]?sh.\n\nAren't you losing a bit of fidelity when you say\nthey can be used for shell scripting ?\n\nERB is not PHP either, from the prespective of fidelity.\n\nHTML5\n=====\n\nThe fidelity wrt paper, books is low.\nTry getting page numbers right.\n\nMac OSX\n=======\n\nThe fidelity of Mac wrt Mac is low.\n\nWhat this means is that Backward Compatibility is low\nfor Mac Applications.\n\nApple has even made PowerPC Applications unusable.\n\nWhen you claim you love Apple, you are assuming\nOlder Apples are equal to Newer Apples.\n\nHi-Fi\n-----\n\nOf All The Things, XML\n======================\n\nPDF, Prince(XML), Docbook(XML), Latex have a far greater fidelity to\npaper.\n\nMicrosoft\n=========\n\nMax Payne was released 13 years ago.\nI believe it's still playable on Windows 8.\n\nMicrosoft has fidelity to the Windows API's.\n\nAdbobe\n======\n\nAdobe Softwares have a high fidelity to numerous\nindustries in which it is used in.\n\nEmulators\n=========\n\nObvious.\n\nTracker softwares like renoise, extend beyond emulation\nbut remain faithful to the Idea.\n\nVLC\n===\n\nYou would know, if VLC had problems rendering.\n\nProprietary Software\n====================\n\nUsually they have higher fidelity.\n\nThis is also true for Programming Languages used in the Industry,\nlike C++ or Java.\n\nTake a look at their specs for example.\n\nNot Hackers\n===========\n\nI use the term Hacker as a loose term for a programmer\ninvolved in the Open Source and Startup communities.\n\nEngineers have a higher fidelity than Hackers.\nCraftsmen have a higher fidelity than Hackers.\n\nCurrently Software Industry has a limited notion of word \nEngineering, when stuff like OpenSSL is the norm.\n\nIs this rubbish important ?\n===========================\n\nYes.\n\nEvery time a book is made into a film, there is a debate of book vs film.\n\nThe notion of fidelity helps in analyzing how things are,\nand how things could be better.\n\nIf you like travis badges, then I don't really have to explain\nmuch here, other than give you a new word to ponder on.\n\nHere are things you can do to increase fidelity,\n\n1. Show finesse.\n2. Document missing/changing API's and Interfaces.\n3. Pay attention to testing\n4. Pay attention to backward compatibility\n5. Pay attention to the industry's tradition in question\n6. Stop using childish terms like disrupt when all you\n   are providing is a cheap solution with 1/10th the \n   quality.\n7. Pay attention to standards compliance\n8. Don't claim fidelity if you can't prove it\n9. Security testing\n10. Respect Original Solutions and learn from them.\n11. Don't plagiarise and market is differently\n12. If you claim superiority prove it\n13. well-tested vs I just hacked this in a day\n14. Documentation improves fidelity of a bad product.\n\n15. Don't treat Professional Users as Normal Users\n\n   If I paid for the software/service, I am willing to read the \n   documentation. Dumbing down the software and introducing stupid\n   workflows is simply unacceptable.\n\n   Here, fidelity means being loyal to the customers.\n\n16. Inheritance, not copy paste\n17. Give credits where due.\n\n   (I have to mention this because even big open source projects\n    like <a href=\"https://github.com/ghc/ghc\">ghc</a> don't have a CONTRIBUTORS.txt)\n\n18. Fine Grained features along with simple ones.\n19. Respect real workers not artificial workflows\n\nSome important points have their own headings.\n\nShameless practices\n==================\n\n* Renaming variables\n* Deleting mention of the original author\n\nare rampant in opensource, especially when forced\nto use in industries.\n\nLegal enforcements are few, mostly because no one \nhas the time.\n\nJust don't.\n\nDisrupting\n==========\n\nEvery software company tries to copy real world workflows,\nbut implements it with bad insecure code and limited features.\n\nFor example facebook thinks it has re-defined social\ninteractions and Evernote thinks it disrupted pens.\n\nIn truth these technologies have changed things, but not\nbecause of fidelity, but gratification.\n\nIt's very difficult to share a doodle with a friend in 5s, with\nthe above softwares for example.\n\nThe problem is Hackers\n======================\n\nForget Steve Jobs and his calligraphy lessons,\nI can't even change the System Font in my Mavericks.\n\nDonald Knuth spent a disproportionate amount of time\non <a href=\"https://en.wikipedia.org/wiki/Metafont\">typesetting</a> and no one seems to think\nits worth imitating.\n\nI want you to think about that and be inspired by that.\n\nWhen you build a new framework don't insult the word,\nwhich is what we share with Engineers.\n\n","gitlog":[["a3e9a22","Sat","Jun","28","03:42:57","2014","+0530","contractions"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Estimates","author":"Sreeharsha Mudivarti","tags":["software","philosophy"],"copyright":"CC BY-NC","__content":"\n\nDoes not work\n=============\n\n* Will get over soon\n* Today\n* This week\n* This weekend\n* Tomorrow\n* This month\n* Next month\n\nLazy Answers\n============\n\n* I'll get back to you\n* It'll take long\n* Maybe he can do it\n\nMay Work\n========\n\n* Buffer time\n* Best/Average/Worst Case estimates\n\nModelling\n=========\n\n* Define outcomes or function points as bullet points\n** Divide each point into tasks\n*** Tasks can be parallel / linear.\n    If linear, identity inputs\n\nNumbers\n=======\n\nModification and Deletion of lines should be considered \na part of LOC.\n\n* 1 week == 40 hours\n* task: 2-16 hours\n** 20 - 3 tasks per week\n   5 - 0.5 tasks per day\n** If function point ~~ 3 tasks,\n   6 - 1 function points per week\n   1 - 0.3 function points per day\n\n* 10 - 350 LOC / Day\n* 12 bugs per 1000 LOC.\n** 80 is a good number\n** function point ~~ 50 LOC\n\n* use `gem install git_stats`\n\nPersonal Numbers\n================\n\n* 30 - 150 LOC / Week\n** 3 function points per week\n** 0.5 function points per day\n** 9 tasks per week\n** 2 tasks per day\n\n* <a href=\"http://archive.mises.org/13602/some-lesser-known-truths-about-programming\">[more numbers]</a>\n* Stack Overflow <a href=\"http://archive.mises.org/13602/some-lesser-known-truths-about-programming\">[1]</a>, <a href=\"http://archive.mises.org/13602/some-lesser-known-truths-about-programming\">[2]</a>\n\n","front_matter":"---\ntitle: Estimates\nauthor: Sreeharsha Mudivarti\ntags: [software, philosophy]\ncopyright: CC BY-NC\n---","filename":"estimates","mtime":"2014-06-12T19:22:01.000Z","mime":"text/plain","html":"\n\nDoes not work\n=============\n\n* Will get over soon\n* Today\n* This week\n* This weekend\n* Tomorrow\n* This month\n* Next month\n\nLazy Answers\n============\n\n* I'll get back to you\n* It'll take long\n* Maybe he can do it\n\nMay Work\n========\n\n* Buffer time\n* Best/Average/Worst Case estimates\n\nModelling\n=========\n\n* Define outcomes or function points as bullet points\n** Divide each point into tasks\n*** Tasks can be parallel / linear.\n    If linear, identity inputs\n\nNumbers\n=======\n\nModification and Deletion of lines should be considered \na part of LOC.\n\n* 1 week == 40 hours\n* task: 2-16 hours\n** 20 - 3 tasks per week\n   5 - 0.5 tasks per day\n** If function point ~~ 3 tasks,\n   6 - 1 function points per week\n   1 - 0.3 function points per day\n\n* 10 - 350 LOC / Day\n* 12 bugs per 1000 LOC.\n** 80 is a good number\n** function point ~~ 50 LOC\n\n* use `gem install git_stats`\n\nPersonal Numbers\n================\n\n* 30 - 150 LOC / Week\n** 3 function points per week\n** 0.5 function points per day\n** 9 tasks per week\n** 2 tasks per day\n\n* <a href=\"http://archive.mises.org/13602/some-lesser-known-truths-about-programming\">[more numbers]</a>\n* Stack Overflow <a href=\"http://archive.mises.org/13602/some-lesser-known-truths-about-programming\">[1]</a>, <a href=\"http://archive.mises.org/13602/some-lesser-known-truths-about-programming\">[2]</a>\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Entropy","author":"Sreeharsha Mudivarti","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\nI worship Entropy.\n\nEntropy is destruction, death, loss, oldness and the dance of dionysus.\n\nEntropy is the typ in the punchline.\nEntropy is the thorn in the shoe.\nEntropy is saying the wrong thing at the right time.\nEntropy is the bad song in the music album.\nEntropy is a director's drunk cameraman.\nEntropy is latin.\nEntropy is the hail that broke your Yamaha Bike.\nEntropy is 23 stitches.\nEntropy is the Black Plague on an otherwise beautiful day worth a 1000 paintings.\nEntropy is failed projects.\nEntropy is an earthquake.\nEntorpy is a forgetfulness.\nEntropy is the distraction before a deadline.\n\nPerson X: This is awesome !\nEntropy: I just created a Nebula with a Black Hole in Golden Ratio.\nPerson Y: The world is my oyster, Alexander can kiss my arse !\nEntropy: Would you like to know what I did with the Dinosaurs and most of your ancestors ?\n\nBlack, White, Blue, Yellow or Red, Entropy will fuck with you.\n\nBut ultimately Entropy, only wishes to challenge you.\nAnd it is here, that I love, respect and fear Entropy.\n\nDespite all the ghastly nonsense above, Entropy is a simple beast.\n\n\"If you create disorder, I will gladly help you.\n If you create order, I will give you a hall pass.\n Be creative, Amuse me or I will perish you\"\n    -- Entropy\n\nFor practical purposes I shall define a new word, Antropy\nAntropy is the opposite of Entropy, i.e, creation of order.\n\nThings you can do to create more Antropy to bargain with Entropy,\n\n1. Act Act Act\n\n   You will remember your actions 10 years down the lane,\n   than your thoughts and vague ideas.\n\n2. Slow Down\n\n   You have close to 50_000 thoughts a day ~ 86_400 seconds.\n   A continous monologue that goes nowhere.\n   Entropy mocks your callous thinking !\n\n3. Do one thing well before doing another thing\n\n   Success cascades.\n\n4. Re-Interpreting Old Ideas is better than New Ideas\n\n   Let's face it, there is nothing new under the Sun.\n   Only the dead people did cool things.\n\n5. Written word is better than spoken word\n\n   Do you remember what you said ?\n   You can grep through what you wrote.\n\n   A minor exception, mantras decrease Entropy.\n\n6. Principles are better than Fashion\n\n   Do you know what was popular in 1927 ?\n   Entropy: *yawn*\n\n7. Second attempt is always better than first attempt.\n\n   So practice.\n\n8. Bullshit can buy you some time.\n\n   Use wisely, otherwise the shit will be on you.\n\n9. You can never beat Entropy.\n\n   Losing all hope is freedom.\n\nEntropy: Your belief in numerology stuns me ! Have you not understood a thing,\n         written here ?\n\n","front_matter":"---\ntitle: \"Entropy\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"entropy","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\nI worship Entropy.\n\nEntropy is destruction, death, loss, oldness and the dance of dionysus.\n\nEntropy is the typ in the punchline.\nEntropy is the thorn in the shoe.\nEntropy is saying the wrong thing at the right time.\nEntropy is the bad song in the music album.\nEntropy is a director's drunk cameraman.\nEntropy is latin.\nEntropy is the hail that broke your Yamaha Bike.\nEntropy is 23 stitches.\nEntropy is the Black Plague on an otherwise beautiful day worth a 1000 paintings.\nEntropy is failed projects.\nEntropy is an earthquake.\nEntorpy is a forgetfulness.\nEntropy is the distraction before a deadline.\n\nPerson X: This is awesome !\nEntropy: I just created a Nebula with a Black Hole in Golden Ratio.\nPerson Y: The world is my oyster, Alexander can kiss my arse !\nEntropy: Would you like to know what I did with the Dinosaurs and most of your ancestors ?\n\nBlack, White, Blue, Yellow or Red, Entropy will fuck with you.\n\nBut ultimately Entropy, only wishes to challenge you.\nAnd it is here, that I love, respect and fear Entropy.\n\nDespite all the ghastly nonsense above, Entropy is a simple beast.\n\n\"If you create disorder, I will gladly help you.\n If you create order, I will give you a hall pass.\n Be creative, Amuse me or I will perish you\"\n    -- Entropy\n\nFor practical purposes I shall define a new word, Antropy\nAntropy is the opposite of Entropy, i.e, creation of order.\n\nThings you can do to create more Antropy to bargain with Entropy,\n\n1. Act Act Act\n\n   You will remember your actions 10 years down the lane,\n   than your thoughts and vague ideas.\n\n2. Slow Down\n\n   You have close to 50_000 thoughts a day ~ 86_400 seconds.\n   A continous monologue that goes nowhere.\n   Entropy mocks your callous thinking !\n\n3. Do one thing well before doing another thing\n\n   Success cascades.\n\n4. Re-Interpreting Old Ideas is better than New Ideas\n\n   Let's face it, there is nothing new under the Sun.\n   Only the dead people did cool things.\n\n5. Written word is better than spoken word\n\n   Do you remember what you said ?\n   You can grep through what you wrote.\n\n   A minor exception, mantras decrease Entropy.\n\n6. Principles are better than Fashion\n\n   Do you know what was popular in 1927 ?\n   Entropy: *yawn*\n\n7. Second attempt is always better than first attempt.\n\n   So practice.\n\n8. Bullshit can buy you some time.\n\n   Use wisely, otherwise the shit will be on you.\n\n9. You can never beat Entropy.\n\n   Losing all hope is freedom.\n\nEntropy: Your belief in numerology stuns me ! Have you not understood a thing,\n         written here ?\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Emoticons","author":"Sreeharsha Mudivarti","tags":["linguistics"],"copyright":"CC BY","__content":"\n\n<a href=\"https://en.wikipedia.org/wiki/List_of_emoticons\">Emoticons</a> fascinate me.\n\nThey are the resurgence of pictographs, a bit like <a href=\"https://en.wikipedia.org/wiki/Egyptian_hieroglyphs\">Egyptian Hieroglyphs</a>,\nor the Chinese symbols.\n\nFor example, ⼮ is the Chinese symbol for river.\n\nHere are some new interesting emoticons, that I found in the wild wild web,\n\nಠ_ಠ      -- disapproval (that's the Kannada <a href=\"http://unicode-table.com/en/0CA0/\">http://unicode-table.com/en/0CA0</a>)\nᕕ(ᐛ)ᕗ   -- happy\nᕙ(‸‶)ᕗ    -- lack of muscles\n<<°°>>     -- crab\n:{C       -- a sad English gentleman\n:C        -- hipster sad face\n∎-∎       -- cooling glasses\n(-_-)凸   -- showing the finger\n\nExploring multi-language, <a href=\"https://en.wikipedia.org/wiki/Unicode\">unicode</a>, alphabets and coming up with your own,\nis silly, stupid and you should totally try doodling some.\n\nHere are some that I discovered,\n\nఠ_ఠ      -- worried about your sanity\n౪       -- stethoscope\n(‸‶       -- amazed that you can actually do that\n(‸‶)౨   -- why do you always\n--ల     -- punch (looks like a boxing glove)\n\nThe above use some alphabets of Telugu,\n<a href=\"http://unicode-table.com/en/search/?q=telugu\">http://unicode-table.com/en/search/?q=telugu</a>.\n\n(The above is best viewed in browsers with good alphabet coverage,\n like chrome, otherwise you will see empty boxes)\n","front_matter":"---\ntitle: \"Emoticons\"\nauthor: Sreeharsha Mudivarti\ntags: [linguistics]\ncopyright: CC BY\n---","filename":"emoticons","mtime":"2014-07-14T14:47:47.000Z","mime":"text/plain","html":"\n\n<a href=\"https://en.wikipedia.org/wiki/List_of_emoticons\">Emoticons</a> fascinate me.\n\nThey are the resurgence of pictographs, a bit like <a href=\"https://en.wikipedia.org/wiki/Egyptian_hieroglyphs\">Egyptian Hieroglyphs</a>,\nor the Chinese symbols.\n\nFor example, ⼮ is the Chinese symbol for river.\n\nHere are some new interesting emoticons, that I found in the wild wild web,\n\nಠ_ಠ      -- disapproval (that's the Kannada <a href=\"http://unicode-table.com/en/0CA0/\">http://unicode-table.com/en/0CA0</a>)\nᕕ(ᐛ)ᕗ   -- happy\nᕙ(‸‶)ᕗ    -- lack of muscles\n<<°°>>     -- crab\n:{C       -- a sad English gentleman\n:C        -- hipster sad face\n∎-∎       -- cooling glasses\n(-_-)凸   -- showing the finger\n\nExploring multi-language, <a href=\"https://en.wikipedia.org/wiki/Unicode\">unicode</a>, alphabets and coming up with your own,\nis silly, stupid and you should totally try doodling some.\n\nHere are some that I discovered,\n\nఠ_ఠ      -- worried about your sanity\n౪       -- stethoscope\n(‸‶       -- amazed that you can actually do that\n(‸‶)౨   -- why do you always\n--ల     -- punch (looks like a boxing glove)\n\nThe above use some alphabets of Telugu,\n<a href=\"http://unicode-table.com/en/search/?q=telugu\">http://unicode-table.com/en/search/?q=telugu</a>.\n\n(The above is best viewed in browsers with good alphabet coverage,\n like chrome, otherwise you will see empty boxes)\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Electronic Music Technology","author":"Sreeharsha Mudivarti","tags":["music"],"copyright":"CC BY-NC","__content":"\n\nProducer Tech\n=============\n\nTapes / Phonograph\n--> DJing, Experimental\nElectronics\n--> Experimental\nRecording Studio\n--> Remixes\nStudio Effects\n--> Dub Remixes, Experimental\nSynthesizers\n--> Ambient, Experimental\n--> Pop\nLoopers\n--> Beatboxing\nSoundchips\n--> Chiptunes\nTurntables\n--> Hip Hop\nDrum Machines, MIDI\n--> Techno, Breakbeat and their derivatives\nSampling, Vocoder\n--> Everyone\n\nConsumer Tech\n=============\n\nFM\nVinyl/Dub Plates\nCassette\nCD\nMP3\nInternet\n\nSoftwares by way of emulation and generalization brought digital alternatives\nto each of the above\n--> Traktor, Max, Ableton, Fruity Loops, Renoise, Cubase, Acid Loops\n\nCountries involved\n--> Japan(Hardware), Germany, UK, America\n\n","front_matter":"---\ntitle: \"Electronic Music Technology\"\nauthor: Sreeharsha Mudivarti\ntags: [music]\ncopyright: CC BY-NC\n---","filename":"electronic-music","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\nProducer Tech\n=============\n\nTapes / Phonograph\n--> DJing, Experimental\nElectronics\n--> Experimental\nRecording Studio\n--> Remixes\nStudio Effects\n--> Dub Remixes, Experimental\nSynthesizers\n--> Ambient, Experimental\n--> Pop\nLoopers\n--> Beatboxing\nSoundchips\n--> Chiptunes\nTurntables\n--> Hip Hop\nDrum Machines, MIDI\n--> Techno, Breakbeat and their derivatives\nSampling, Vocoder\n--> Everyone\n\nConsumer Tech\n=============\n\nFM\nVinyl/Dub Plates\nCassette\nCD\nMP3\nInternet\n\nSoftwares by way of emulation and generalization brought digital alternatives\nto each of the above\n--> Traktor, Max, Ableton, Fruity Loops, Renoise, Cubase, Acid Loops\n\nCountries involved\n--> Japan(Hardware), Germany, UK, America\n\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"The Eight Fallacies of Distributed Computing","author":"Sreeharsha Mudivarti","tags":["quote"],"copyright":"CC BY-NC","__content":"\n\nTaken from <a href=\"http://www.rgoarchitects.com/Files/fallacies.pdf\">here</a>.\n\nEssentially everyone, when they first build a distributed application,\nmakes the following eight assumptions.\n\nAll prove to be false in the long run and \nall cause big trouble and painful learning experiences.\n\nThe network is reliable\nLatency is zero\nBandwidth is infinite\nThe network is secure\nTopology doesn’t change\nThere is one administrator\nTransport cost is zero\nThe network is homogeneous\n        — Peter Deutsch\n\n","front_matter":"---\ntitle: \"The Eight Fallacies of Distributed Computing\"\nauthor: Sreeharsha Mudivarti\ntags: [quote]\ncopyright: CC BY-NC\n---","filename":"distributed-fallacy","mtime":"2014-06-20T18:57:16.000Z","mime":"text/plain","html":"\n\nTaken from <a href=\"http://www.rgoarchitects.com/Files/fallacies.pdf\">here</a>.\n\nEssentially everyone, when they first build a distributed application,\nmakes the following eight assumptions.\n\nAll prove to be false in the long run and \nall cause big trouble and painful learning experiences.\n\nThe network is reliable\nLatency is zero\nBandwidth is infinite\nThe network is secure\nTopology doesn’t change\nThere is one administrator\nTransport cost is zero\nThe network is homogeneous\n        — Peter Deutsch\n\n","gitlog":[["59f9cbf","Sat","Jun","21","00:58:35","2014","+0530","disclaimer"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"DISCLAIMER","author":"Sreeharsha Mudivarti","category":"nav","copyright":"CC BY-NC","__content":"\n\nKant calls for the public use of private reason, and the private\nuse of public reason.\n\nIt's an excellent defense of free speech, as it guides \none to put private speech in public, rawly, for public feedback.\n\nIt encourages one to take public feedback into private thinking,\nto make one's reasoning purer.\n\nYou can read Kant's essay, \"What is Enlightenment ?\", <a href=\"http://www.columbia.edu/acis/ets/CCREAD/etscc/kant.html\">here</a>.\n\nThis blog represents the private thoughts and reasons \nof the author for the public git.\n\n","front_matter":"---\ntitle: \"DISCLAIMER\"\nauthor: Sreeharsha Mudivarti\ncategory: nav\ncopyright: CC BY-NC\n---","filename":"disclaimer","mtime":"2014-07-10T17:02:57.000Z","mime":"text/plain","html":"\n\nKant calls for the public use of private reason, and the private\nuse of public reason.\n\nIt's an excellent defense of free speech, as it guides \none to put private speech in public, rawly, for public feedback.\n\nIt encourages one to take public feedback into private thinking,\nto make one's reasoning purer.\n\nYou can read Kant's essay, \"What is Enlightenment ?\", <a href=\"http://www.columbia.edu/acis/ets/CCREAD/etscc/kant.html\">here</a>.\n\nThis blog represents the private thoughts and reasons \nof the author for the public git.\n\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"],["b81f103","Sat","Jun","21","10:28:00","2014","+0530","line","numbers"],["59f9cbf","Sat","Jun","21","00:58:35","2014","+0530","disclaimer"]]},{"title":"Why Desktops / Laptops and Application Softwares are here to stay ...","author":"Sreeharsha Mudivarti","tags":["software"],"copyright":"CC BY-NC","__content":"\n\nSummary: Mobile Devices / Web are for Entertainment.\n\nProfessional Work\n=================\n\n- Office\n- Emails aka Long Communication\n- Programming\n- Arts with Digital Workflows\n- Complex Games\n- Research\n- Trading\n- Multimedia Computer\n- AutoCAD\n\nMobile Devices / Web\n====================\n\n- Notifications / Read Only\n- Short Communication\n- Toy apps\n- Games\n- Reading / Learning\n- Buying simple items\n- LoginMedia Computer\n- Tetris\n\nFeatures of Application Software\n================================\n\nexit button\nminimize (multitasking)\nfiles\nthreads / processes / aio (performance / parallism)\nlarger ram\ncustom stores\nbigger screens / multiple screens\nadaptable to touch (windows 8)\nadaptable to cloud (chromebook)\nportable to coffee shops\n\n*gasp* A Laptop can be connected to TV with a HDMI port.\n\nwork / life balance\n","front_matter":"---\ntitle: \"Why Desktops / Laptops and Application Softwares are here to stay ...\"\nauthor: Sreeharsha Mudivarti\ntags: [software]\ncopyright: CC BY-NC\n---","filename":"desktops","mtime":"2014-07-17T00:08:13.000Z","mime":"text/plain","html":"\n\nSummary: Mobile Devices / Web are for Entertainment.\n\nProfessional Work\n=================\n\n- Office\n- Emails aka Long Communication\n- Programming\n- Arts with Digital Workflows\n- Complex Games\n- Research\n- Trading\n- Multimedia Computer\n- AutoCAD\n\nMobile Devices / Web\n====================\n\n- Notifications / Read Only\n- Short Communication\n- Toy apps\n- Games\n- Reading / Learning\n- Buying simple items\n- LoginMedia Computer\n- Tetris\n\nFeatures of Application Software\n================================\n\nexit button\nminimize (multitasking)\nfiles\nthreads / processes / aio (performance / parallism)\nlarger ram\ncustom stores\nbigger screens / multiple screens\nadaptable to touch (windows 8)\nadaptable to cloud (chromebook)\nportable to coffee shops\n\n*gasp* A Laptop can be connected to TV with a HDMI port.\n\nwork / life balance\n","gitlog":[["11706e9","Mon","Jul","21","21:48:36","2014","+0530","redid","rdp"]]},{"title":"Compressing Fonts","author":"Sreeharsha Mudivarti","tags":["typography"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/design/index-en.html\">MPlus</a> is my favorite font.\nIt's thin and has fixed width.\n\nI could not get <a href=\"http://www.fontsquirrel.com/tools/webfont-generator\">Font Squirrel's</a> web font generator to work(size?).\nSo I wrote a <a href=\"http://fontforge.org\">fontforge</a> script to compress the font by extracting <a href=\"https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)\">Basic Latin</a>.\n\n<div class=\"autospace\">\n<script src=\"https://gist.github.com/harsha-mudi/10980853.js\"></script>\n</div>\n\nThe web font is available <a href=\"/css/mplus-1m-regular.ttf\">here</a>\n","front_matter":"---\ntitle: \"Compressing Fonts\"\nauthor: Sreeharsha Mudivarti\ntags: [typography]\ncopyright: CC BY-NC\n---","filename":"compressing-fonts","mtime":"2014-06-10T13:51:41.000Z","mime":"text/plain","html":"\n\n<a href=\"http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/design/index-en.html\">MPlus</a> is my favorite font.\nIt's thin and has fixed width.\n\nI could not get <a href=\"http://www.fontsquirrel.com/tools/webfont-generator\">Font Squirrel's</a> web font generator to work(size?).\nSo I wrote a <a href=\"http://fontforge.org\">fontforge</a> script to compress the font by extracting <a href=\"https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)\">Basic Latin</a>.\n\n<div class=\"autospace\">\n<script src=\"https://gist.github.com/harsha-mudi/10980853.js\"></script>\n</div>\n\nThe web font is available <a href=\"/css/mplus-1m-regular.ttf\">here</a>\n","gitlog":[["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"Combinatorial Explosion","author":"Sreeharsha Mudivarti","tags":["philosophy","software"],"copyright":"CC BY","__content":"\n<blockquote>My difficulty is only an — enormous — difficulty of expression - Ludwig Wittgenstein</blockquote>\n\nProgramming i.e, building software, for me is about,\n\n* Data\n* Make Decisions based on the Data\n* Do Actions, typically by Divide and Conquer, based on those Decisions\n\nIn fact, doing the above is a part of every day life\neg) ToDo Lists, Appointments, Assessments, Party ...\n\nvar, if, goto.\n\nPretty mundane.\n\nNow if you look at a microphone, even there you \nfind Data and a number of Decisions to make, like **what** to Record.\n\nYou might want noise-cancellation, for example.\n\nThe challenges usually lie in **scale** for software,\ni.e, lots and lots and lots of things happening and you\nneed answers in real-time.\n\nBut even before you get into scaling, you face the\n\n            Combinatorial Explosion\n                 Explosion ?\n                    Yes !\n\nLet's say you are writing an addition software,\nfor adding just two numbers, or at-least that's what\nyou heard the client say.\n\n1 + 1\n> it compiles !\n\nWhat About 1 + 1.0 ?\n\nAnd 1/2 + 1\nAnd 1/5 + 2.2\nAnd \"22.9\" + 1/2\nAnd \"22.8\" + 0x12ff\nAnd 1/2 + \"1/2356\"\nAnd 11.11001100111 + 0.25\nAnd Romanian UTF-14 numbers ?\n\nMaybe next version ...\n\nWhat is more troubling is, now you have a __Floating Point__ bug,\nand you are just staring at the screen, *_*, because you finally\nrealize, it was you who put the explosives, aka Flexibility™, there.\n\nThe client wants to add different currencies, by tomorrow btw.\n\n> Can engineering knowledge be used to preempt combinatorial explosions?\n\nSee Also:\n1] <a href=\"https://en.wikipedia.org/wiki/Feature_creep\">Feature Creep</a>\n\nThanks @theju, @tuxcanfly, @ckvinaykiran for the feedback.\n","front_matter":"---\ntitle: \"Combinatorial Explosion\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy, software]\ncopyright: CC BY\n---","filename":"combinatorial-explosion","mtime":"2014-06-20T18:53:51.000Z","mime":"text/plain","html":"\n<blockquote>My difficulty is only an — enormous — difficulty of expression - Ludwig Wittgenstein</blockquote>\n\nProgramming i.e, building software, for me is about,\n\n* Data\n* Make Decisions based on the Data\n* Do Actions, typically by Divide and Conquer, based on those Decisions\n\nIn fact, doing the above is a part of every day life\neg) ToDo Lists, Appointments, Assessments, Party ...\n\nvar, if, goto.\n\nPretty mundane.\n\nNow if you look at a microphone, even there you \nfind Data and a number of Decisions to make, like **what** to Record.\n\nYou might want noise-cancellation, for example.\n\nThe challenges usually lie in **scale** for software,\ni.e, lots and lots and lots of things happening and you\nneed answers in real-time.\n\nBut even before you get into scaling, you face the\n\n            Combinatorial Explosion\n                 Explosion ?\n                    Yes !\n\nLet's say you are writing an addition software,\nfor adding just two numbers, or at-least that's what\nyou heard the client say.\n\n1 + 1\n> it compiles !\n\nWhat About 1 + 1.0 ?\n\nAnd 1/2 + 1\nAnd 1/5 + 2.2\nAnd \"22.9\" + 1/2\nAnd \"22.8\" + 0x12ff\nAnd 1/2 + \"1/2356\"\nAnd 11.11001100111 + 0.25\nAnd Romanian UTF-14 numbers ?\n\nMaybe next version ...\n\nWhat is more troubling is, now you have a __Floating Point__ bug,\nand you are just staring at the screen, *_*, because you finally\nrealize, it was you who put the explosives, aka Flexibility™, there.\n\nThe client wants to add different currencies, by tomorrow btw.\n\n> Can engineering knowledge be used to preempt combinatorial explosions?\n\nSee Also:\n1] <a href=\"https://en.wikipedia.org/wiki/Feature_creep\">Feature Creep</a>\n\nThanks @theju, @tuxcanfly, @ckvinaykiran for the feedback.\n","gitlog":[["59f9cbf","Sat","Jun","21","00:58:35","2014","+0530","disclaimer"],["dae28f0","Wed","Jun","18","18:13:55","2014","+0530","moved","contents","into","this"]]},{"title":"CamelCase","author":"Sreeharsha Mudivarti","tags":["linguistics"],"copyright":"CC BY-NC","__content":"\n\nIn English, capitalization applies to,\n\n1) First word\n2) Proper noun\n\nSome new rules,\n\nWhen a Proper Noun has more than one word, use capitalization\nfor both the words, just like CamelCase\n\nWhen a verb has more than one word, captalize the second word.\n\nWhen describing attribtutes, use hyphenation.\n\nWhen a Verb is used as a noun, capitalize it.\n\nWhen you feel like, emphasizing a word, capitalize it.\n\nWhen the word really needs to stand out, CAPITALIZE EVERYTHING.\n\n\n","front_matter":"---\ntitle: \"CamelCase\"\nauthor: Sreeharsha Mudivarti\ntags: [linguistics]\ncopyright: CC BY-NC\n---","filename":"camel-case","mtime":"2014-08-10T18:28:59.000Z","mime":"text/plain","html":"\n\nIn English, capitalization applies to,\n\n1) First word\n2) Proper noun\n\nSome new rules,\n\nWhen a Proper Noun has more than one word, use capitalization\nfor both the words, just like CamelCase\n\nWhen a verb has more than one word, captalize the second word.\n\nWhen describing attribtutes, use hyphenation.\n\nWhen a Verb is used as a noun, capitalize it.\n\nWhen you feel like, emphasizing a word, capitalize it.\n\nWhen the word really needs to stand out, CAPITALIZE EVERYTHING.\n\n\n","gitlog":[["b27243c","Mon","Aug","11","00:36:05","2014","+0530","floppy"],["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"]]},{"title":"A Critique of AlgoArt","author":"Sreeharsha Mudivarti","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\nAlgoArt refers to using Algorithms to make what is presumed\nto be Art.\n\nWhat is Art ?\n=============\n\nModern and Post Modern definitions of an Art Object treat\nit as a thing-in-itself.\n\nSuch a definition is self-serving as the latter in particular\nthrives on Kitsch.\n\nAn alternate definition is necessary to make the Artist a part\nof the thing-in-itself.\n\nDefining Art\n============\n\nI   Art is an Object that is artificially Produced by Artist[s] through a Medium.\nII  The Object and the Artist[s] share an Emotion, a thing-in-itself.\nIII When consumed, thing-in-itself is experienced by mimesis.\n\nAbstract Art is Art ?\n=====================\n\nArt is Emotional.\nEmotion is a continuous Feeling.\nEmotions are Finite.\nEmotions are fluid.\n\nAbstraction is an Understanding.\nAbstractions are Infinite.\nAbstractions are fixed.\nAbstractions fail II.\n\nFor example, why is tying a shoe-lace not an Art ?\nThere are creative choices for the type of shoe, lace or holes.\nWhy isn't that taught in New York ?\n\nThe correct word for Abstract Artists is Artisans.\n\nFashion, Movie Making, Jewelry, Dancing, Photography, Paintings, anything\nPost Modern fall into Abstract Art for the most part.\n\n::Examples::\n\n* Cubism vs Expressionist Painters\n* Action Heroes vs Method actors\n* Street Dancing vs Miming\n\nCreativity\n==========\n\nCreativity is just a process. Not the End.\nIt is possible to be creative in Pointless activities.\n\nSoftware is a bad case of flu virus\n===================================\n\nTo be successful a software must,\n\n* Spread Virally\n* Be a Killer App\n* Exert parasitical control over the Market\n\nThis is the predominant model for Software Development.\nIt is often justified as Worse is Better.\n\nWhat Programmers are not\n========================\n\n* Engineers\n\n  Reliability is rare in Software Products.\n\n* Artisans\n\n  Programmers practise Communal Politics.\n  Longevity is greater for items than Objects.\n\n* Artists\n\n  The greatest tragedy ever faced by a Programmer is a coffee stain.\n\n* Lawyers\n\n  More like spell checkers that crash.\n\nJust as Post Modernists elevate Kitsch to Art,\nProgrammers elevate sloppy practices to the Sublime and call it Hacking.\n\nIn practice a Hackers code is surrounded with comments like\n\n// I don't know how this works\n// Does this work ?\n// How does this work ?\n// Don't touch it, it works !\n// TODO: Security\n// TODO: This shouldn't be here\n\nOn second thought no other activity produces so much disgust\nas reading source-code.\n\nYuck.\n\n::Exceptions::\n\n* Game Programmers\n\nSoftware is Democracy ?\n=======================\n\nPractises like\n\n* banning\n* silencing\n* spying\n* revisionism\n\nare built with Orwellian Efficiency into fundamental Software like\n\n* IRC\n* POSIX\n* IMAP ( Email )\n* Web Forums\n* Wikipedia\n* Git\n\nThe main reasons for implementing these \"features\" are cited as\n\n* Spam\n* Trolls\n\nIn practise this means that each Software Community lives\nin a perpetual bubble, deaf to criticism.\n\nSometimes these \"features\" are profitable.\n\nThe hypocrisy reaches bizarre levels of absurdity as\nFree Software Communities have Benevolent Dictators.\n\nThese features\" make software a horrible Medium wrt I.\n\n:: Examples ::\n\nLinus Travesty\n<a href=\"http://www.jwz.org/doc/censorzilla.html\">CensorZilla</a>\nBig Data vs Encryption\n\n:: Exceptions ::\n\nUsenet\n\nAlgoArt\n=======\n\nAlgoArt can be divided into\n\n1. MachineArt\n\nThis is perfectly acceptable as Machines are tools in the\nhands of Artists.\n\n::Examples::\n\nMS Paint\nDemoscene\n\n2. AutoArt\n\nArt made out of mechanical Algorithms.\n\nAutoArt fails I and II, hence it is rejected as Art.\nThere is no Machine Unlearning for A.I, yet.\nTo pass I, a program needs to cry when its brushes are taken away.\n\nThe problem is further confounded by blatant hypocrisy as most\nAutoArt is hand-coded MachineArt. This double think is omnipresent\nin bubble communities.\n\nOn top of this, Worse is better thinking means that AutoArt\nhas scary market potential.\n\n:: Examples ::\n\nScreensavers\n<a href=\"http://algorave.com/\">AlgoRave</a> -- Are Random Numbers sentient enough to make music ?\n\n<b>__END__</b>\n\nA photograph of a toothbrush could be made to mean\nthe monotonicity of Modern Life,\nwith enough deconstruction jargon.\n\nWas there an Artist that felt it ?\n\n","front_matter":"---\ntitle: \"A Critique of AlgoArt\"\nauthor: Sreeharsha Mudivarti\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"algoart","mtime":"2014-08-19T10:01:26.000Z","mime":"text/plain","html":"\n\nAlgoArt refers to using Algorithms to make what is presumed\nto be Art.\n\nWhat is Art ?\n=============\n\nModern and Post Modern definitions of an Art Object treat\nit as a thing-in-itself.\n\nSuch a definition is self-serving as the latter in particular\nthrives on Kitsch.\n\nAn alternate definition is necessary to make the Artist a part\nof the thing-in-itself.\n\nDefining Art\n============\n\nI   Art is an Object that is artificially Produced by Artist[s] through a Medium.\nII  The Object and the Artist[s] share an Emotion, a thing-in-itself.\nIII When consumed, thing-in-itself is experienced by mimesis.\n\nAbstract Art is Art ?\n=====================\n\nArt is Emotional.\nEmotion is a continuous Feeling.\nEmotions are Finite.\nEmotions are fluid.\n\nAbstraction is an Understanding.\nAbstractions are Infinite.\nAbstractions are fixed.\nAbstractions fail II.\n\nFor example, why is tying a shoe-lace not an Art ?\nThere are creative choices for the type of shoe, lace or holes.\nWhy isn't that taught in New York ?\n\nThe correct word for Abstract Artists is Artisans.\n\nFashion, Movie Making, Jewelry, Dancing, Photography, Paintings, anything\nPost Modern fall into Abstract Art for the most part.\n\n::Examples::\n\n* Cubism vs Expressionist Painters\n* Action Heroes vs Method actors\n* Street Dancing vs Miming\n\nCreativity\n==========\n\nCreativity is just a process. Not the End.\nIt is possible to be creative in Pointless activities.\n\nSoftware is a bad case of flu virus\n===================================\n\nTo be successful a software must,\n\n* Spread Virally\n* Be a Killer App\n* Exert parasitical control over the Market\n\nThis is the predominant model for Software Development.\nIt is often justified as Worse is Better.\n\nWhat Programmers are not\n========================\n\n* Engineers\n\n  Reliability is rare in Software Products.\n\n* Artisans\n\n  Programmers practise Communal Politics.\n  Longevity is greater for items than Objects.\n\n* Artists\n\n  The greatest tragedy ever faced by a Programmer is a coffee stain.\n\n* Lawyers\n\n  More like spell checkers that crash.\n\nJust as Post Modernists elevate Kitsch to Art,\nProgrammers elevate sloppy practices to the Sublime and call it Hacking.\n\nIn practice a Hackers code is surrounded with comments like\n\n// I don't know how this works\n// Does this work ?\n// How does this work ?\n// Don't touch it, it works !\n// TODO: Security\n// TODO: This shouldn't be here\n\nOn second thought no other activity produces so much disgust\nas reading source-code.\n\nYuck.\n\n::Exceptions::\n\n* Game Programmers\n\nSoftware is Democracy ?\n=======================\n\nPractises like\n\n* banning\n* silencing\n* spying\n* revisionism\n\nare built with Orwellian Efficiency into fundamental Software like\n\n* IRC\n* POSIX\n* IMAP ( Email )\n* Web Forums\n* Wikipedia\n* Git\n\nThe main reasons for implementing these \"features\" are cited as\n\n* Spam\n* Trolls\n\nIn practise this means that each Software Community lives\nin a perpetual bubble, deaf to criticism.\n\nSometimes these \"features\" are profitable.\n\nThe hypocrisy reaches bizarre levels of absurdity as\nFree Software Communities have Benevolent Dictators.\n\nThese features\" make software a horrible Medium wrt I.\n\n:: Examples ::\n\nLinus Travesty\n<a href=\"http://www.jwz.org/doc/censorzilla.html\">CensorZilla</a>\nBig Data vs Encryption\n\n:: Exceptions ::\n\nUsenet\n\nAlgoArt\n=======\n\nAlgoArt can be divided into\n\n1. MachineArt\n\nThis is perfectly acceptable as Machines are tools in the\nhands of Artists.\n\n::Examples::\n\nMS Paint\nDemoscene\n\n2. AutoArt\n\nArt made out of mechanical Algorithms.\n\nAutoArt fails I and II, hence it is rejected as Art.\nThere is no Machine Unlearning for A.I, yet.\nTo pass I, a program needs to cry when its brushes are taken away.\n\nThe problem is further confounded by blatant hypocrisy as most\nAutoArt is hand-coded MachineArt. This double think is omnipresent\nin bubble communities.\n\nOn top of this, Worse is better thinking means that AutoArt\nhas scary market potential.\n\n:: Examples ::\n\nScreensavers\n<a href=\"http://algorave.com/\">AlgoRave</a> -- Are Random Numbers sentient enough to make music ?\n\n<b>__END__</b>\n\nA photograph of a toothbrush could be made to mean\nthe monotonicity of Modern Life,\nwith enough deconstruction jargon.\n\nWas there an Artist that felt it ?\n\n","gitlog":[["f97bdcd","Tue","Aug","19","15:17:57","2014","+0530","typos"],["df37b8d","Tue","Aug","19","15:10:51","2014","+0530","typo"],["a634898","Tue","Aug","19","00:24:22","2014","+0530","issues"],["5b79a5f","Tue","Aug","19","00:00:17","2014","+0530","algoart"]]},{"title":"AI test","author":"Sreeharsha Mudivarti","tags":["ai","philosophy","linguistics"],"copyright":"CC BY-NC","__content":"\n\nWhen an AI System can,\n\n1) detect sarcasm\n2) wit you\n\nit is Intelligent.\n","front_matter":"---\ntitle: \"AI test\"\nauthor: Sreeharsha Mudivarti\ntags: [ai, philosophy, linguistics]\ncopyright: CC BY-NC\n---","filename":"ai-test","mtime":"2014-07-10T15:29:32.000Z","mime":"text/plain","html":"\n\nWhen an AI System can,\n\n1) detect sarcasm\n2) wit you\n\nit is Intelligent.\n","gitlog":[["3414cab","Fri","Jul","11","00:27:59","2014","+0530","ai","test"]]}]