[{"title":"AI test","author":"foobar","tags":["ai","philosophy","linguistics"],"copyright":"CC BY-NC","__content":"\nWhen an AI System can,\n\n1) detect sarcasm\n2) wit you\n3) a bit too much\n4) say sorry\n\n","front_matter":"---\ntitle: \"AI test\"\nauthor: foobar\ntags: [ai, philosophy, linguistics]\ncopyright: CC BY-NC\n---","filename":"ai-test","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\nWhen an AI System can,\n\n1) detect sarcasm\n2) wit you\n3) a bit too much\n4) say sorry\n\n"},{"title":"A Critique of AlgoArt","author":"foobar","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\n<i>\nTL;DR\n\nI reject Abstractions as Art.\nArt is Emotional.\n\nAlgoArt like\n\n<iframe src=\"//player.vimeo.com/video/4707422\" width=\"500\" height=\"375\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n(<a href=\"http://vimeo.com/4707422\">Jed’s Other Poem (Beautiful Ground)</a>)\n\nwhich is handcoded by the Artist onto the Machine,\nshould be preferred over that which is automatically generated by Algorithms.\n</i>\n\nWhat is Art ?\n=============\n\nAlgoArt refers to using Algorithms to make what is presumed\nto be Art.\n\nModern and Post Modern definitions of an Art Object treat\nit as a thing-in-itself.\n\nSuch a definition is self-serving as the latter in particular\nthrives on Kitsch.\n\nAn alternate definition is necessary to make the Artist a part\nof the thing-in-itself.\n\nDefining Art\n============\n\nI   Art is an Object that is artificially Produced by Artist[s] through a Medium.\nII  The Object and the Artist[s] share an Emotion, a thing-in-itself.\nIII When consumed, thing-in-itself is experienced by mimesis.\n\nAbstract Art is Art ?\n=====================\n\nArt is Emotional.\nEmotion is a continuous Feeling.\nEmotions are Finite.\nEmotions are fluid.\n\nAbstraction is an Understanding.\nAbstractions are Infinite.\nAbstractions are fixed.\nAbstractions fail II.\n\nFor example, why is tying a shoe-lace not an Art ?\nThere are creative choices for the type of shoe, lace or holes.\nWhy isn't that taught in New York ?\n\nThe correct word for Abstract Artists is Artisans.\n\nFashion, Movie Making, Jewelry, Dancing, Photography, Paintings, anything\nPost Modern fall into Abstract Art for the most part.\n\n::Examples::\n\n* Cubism vs Expressionist Painters\n* Action Heroes vs Method actors\n* Street Dancing vs Miming\n\nCreativity\n==========\n\nCreativity is just a process. Not the End.\nIt is possible to be creative in Pointless activities.\n\nSoftware is a bad case of flu virus\n===================================\n\nTo be successful a software must,\n\n* Spread Virally\n* Be a Killer App\n* Exert parasitical control over the Market\n\nThis is the predominant model for Software Development.\nIt is often justified as Worse is Better.\n\n<b><i>We are disrupting Pen and Paper !</i></b>\nWhat about my **doodles** ?\n\nSoftware will often go for appeal over fidelity.\n\nWhat Programmers are not\n========================\n\n* Engineers\n\n  Reliability is rare in Software Products.\n\n* Artisans\n\n  Programmers practise Communal Politics.\n  Longevity is greater for items than Objects.\n\n* Artists\n\n  The greatest tragedy ever faced by a Programmer is a coffee stain.\n\n* Lawyers\n\n  More like spell checkers that crash.\n\nJust as Post Modernists elevate Kitsch to Art,\nProgrammers elevate sloppy practices to the Sublime and call it Hacking.\n\nIn practice a Hackers code is surrounded with comments like\n\n// I don't know how this works\n// Does this work ?\n// How does this work ?\n// Don't touch it, it works !\n// TODO: Security\n// TODO: This shouldn't be here\n\nOn second thought no other activity produces as much disgust\nas reading source-code.\n\nYuck.\n\n::Exceptions::\n\n* Game Programmers\n\nSoftware is Democracy ?\n=======================\n\nPractises like\n\n* banning\n* silencing\n* spying\n* revisionism\n\nare built with Orwellian Efficiency into fundamental Software like\n\n* IRC\n* POSIX\n* IMAP ( Email )\n* Web Forums\n* Wikipedia\n* Git\n\nThe main reasons for implementing these \"features\" are cited as\n\n* Spam\n* Trolls\n\nIn practise this means that each Software Community lives\nin a perpetual bubble, deaf to criticism.\n\nSometimes these \"features\" are profitable.\n\nThe hypocrisy reaches bizarre levels of absurdity as\nFree Software Communities have Benevolent Dictators.\n\n<b>These \"features\" make software a horrible Medium wrt I.</b>\n\nRevisionism is particularly problematic as it can confound\nauthorship.\n\n::Examples::\n\nLinus Travesty\n<a href=\"http://www.jwz.org/doc/censorzilla.html\">CensorZilla</a>\nBig Data vs Encryption\n\n::Exceptions::\n\nUsenet\n\nAlgoArt\n=======\n\nAlgoArt can be divided into\n\n1. MachineArt\n\nThis is perfectly acceptable as Machines are tools in the\nhands of Artists.\n\n::Examples::\n\nMS Paint\nDemoscene\n\n2. AutoArt\n\nArt made automatically out of some mechanical Algorithms.\n\nAutoArt fails I and II, hence it is rejected as Art.\nThere is no Machine Unlearning for A.I, yet.\nTo pass I, a program needs to cry when its brushes are taken away.\n\nThe problem is further confounded as most AutoArt is handcoded MachineArt.\n\nOn top of this, Worse is Better thinking means that AutoArt\nhas scary market potential.\n\n::Examples::\n\nScreensavers\n<a href=\"http://algorave.com/\">AlgoRave</a> -- Are Random Numbers sentient enough to make music ?\n\n<b>__END__</b>\n\nA photograph of a toothbrush could be made to mean\nthe monotonicity of Modern Life,\nwith enough deconstruction jargon.\n\nWas there an Artist that felt it ?\n\n","front_matter":"---\ntitle: \"A Critique of AlgoArt\"\nauthor: foobar\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"algoart","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n<i>\nTL;DR\n\nI reject Abstractions as Art.\nArt is Emotional.\n\nAlgoArt like\n\n<iframe src=\"//player.vimeo.com/video/4707422\" width=\"500\" height=\"375\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n(<a href=\"http://vimeo.com/4707422\">Jed’s Other Poem (Beautiful Ground)</a>)\n\nwhich is handcoded by the Artist onto the Machine,\nshould be preferred over that which is automatically generated by Algorithms.\n</i>\n\nWhat is Art ?\n=============\n\nAlgoArt refers to using Algorithms to make what is presumed\nto be Art.\n\nModern and Post Modern definitions of an Art Object treat\nit as a thing-in-itself.\n\nSuch a definition is self-serving as the latter in particular\nthrives on Kitsch.\n\nAn alternate definition is necessary to make the Artist a part\nof the thing-in-itself.\n\nDefining Art\n============\n\nI   Art is an Object that is artificially Produced by Artist[s] through a Medium.\nII  The Object and the Artist[s] share an Emotion, a thing-in-itself.\nIII When consumed, thing-in-itself is experienced by mimesis.\n\nAbstract Art is Art ?\n=====================\n\nArt is Emotional.\nEmotion is a continuous Feeling.\nEmotions are Finite.\nEmotions are fluid.\n\nAbstraction is an Understanding.\nAbstractions are Infinite.\nAbstractions are fixed.\nAbstractions fail II.\n\nFor example, why is tying a shoe-lace not an Art ?\nThere are creative choices for the type of shoe, lace or holes.\nWhy isn't that taught in New York ?\n\nThe correct word for Abstract Artists is Artisans.\n\nFashion, Movie Making, Jewelry, Dancing, Photography, Paintings, anything\nPost Modern fall into Abstract Art for the most part.\n\n::Examples::\n\n* Cubism vs Expressionist Painters\n* Action Heroes vs Method actors\n* Street Dancing vs Miming\n\nCreativity\n==========\n\nCreativity is just a process. Not the End.\nIt is possible to be creative in Pointless activities.\n\nSoftware is a bad case of flu virus\n===================================\n\nTo be successful a software must,\n\n* Spread Virally\n* Be a Killer App\n* Exert parasitical control over the Market\n\nThis is the predominant model for Software Development.\nIt is often justified as Worse is Better.\n\n<b><i>We are disrupting Pen and Paper !</i></b>\nWhat about my **doodles** ?\n\nSoftware will often go for appeal over fidelity.\n\nWhat Programmers are not\n========================\n\n* Engineers\n\n  Reliability is rare in Software Products.\n\n* Artisans\n\n  Programmers practise Communal Politics.\n  Longevity is greater for items than Objects.\n\n* Artists\n\n  The greatest tragedy ever faced by a Programmer is a coffee stain.\n\n* Lawyers\n\n  More like spell checkers that crash.\n\nJust as Post Modernists elevate Kitsch to Art,\nProgrammers elevate sloppy practices to the Sublime and call it Hacking.\n\nIn practice a Hackers code is surrounded with comments like\n\n// I don't know how this works\n// Does this work ?\n// How does this work ?\n// Don't touch it, it works !\n// TODO: Security\n// TODO: This shouldn't be here\n\nOn second thought no other activity produces as much disgust\nas reading source-code.\n\nYuck.\n\n::Exceptions::\n\n* Game Programmers\n\nSoftware is Democracy ?\n=======================\n\nPractises like\n\n* banning\n* silencing\n* spying\n* revisionism\n\nare built with Orwellian Efficiency into fundamental Software like\n\n* IRC\n* POSIX\n* IMAP ( Email )\n* Web Forums\n* Wikipedia\n* Git\n\nThe main reasons for implementing these \"features\" are cited as\n\n* Spam\n* Trolls\n\nIn practise this means that each Software Community lives\nin a perpetual bubble, deaf to criticism.\n\nSometimes these \"features\" are profitable.\n\nThe hypocrisy reaches bizarre levels of absurdity as\nFree Software Communities have Benevolent Dictators.\n\n<b>These \"features\" make software a horrible Medium wrt I.</b>\n\nRevisionism is particularly problematic as it can confound\nauthorship.\n\n::Examples::\n\nLinus Travesty\n<a href=\"http://www.jwz.org/doc/censorzilla.html\">CensorZilla</a>\nBig Data vs Encryption\n\n::Exceptions::\n\nUsenet\n\nAlgoArt\n=======\n\nAlgoArt can be divided into\n\n1. MachineArt\n\nThis is perfectly acceptable as Machines are tools in the\nhands of Artists.\n\n::Examples::\n\nMS Paint\nDemoscene\n\n2. AutoArt\n\nArt made automatically out of some mechanical Algorithms.\n\nAutoArt fails I and II, hence it is rejected as Art.\nThere is no Machine Unlearning for A.I, yet.\nTo pass I, a program needs to cry when its brushes are taken away.\n\nThe problem is further confounded as most AutoArt is handcoded MachineArt.\n\nOn top of this, Worse is Better thinking means that AutoArt\nhas scary market potential.\n\n::Examples::\n\nScreensavers\n<a href=\"http://algorave.com/\">AlgoRave</a> -- Are Random Numbers sentient enough to make music ?\n\n<b>__END__</b>\n\nA photograph of a toothbrush could be made to mean\nthe monotonicity of Modern Life,\nwith enough deconstruction jargon.\n\nWas there an Artist that felt it ?\n\n"},{"title":"Automata","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nMachines\n========\n\nAccumulator Machine\nStack Machine\nRegister Machines\nFlow Machine\n\nTheory\n======\n\nPetri Net\nLogic\nLadder Logic\nControl / Dispatch / Decission / Data Tables\nDecission Trees\n\nReality\n=======\n\nPLC\nElectronics Instruments\n\nAnd not so obvious,\nChemistry\nCooking\n\n","front_matter":"---\ntitle: \"Automata\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"automata","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nMachines\n========\n\nAccumulator Machine\nStack Machine\nRegister Machines\nFlow Machine\n\nTheory\n======\n\nPetri Net\nLogic\nLadder Logic\nControl / Dispatch / Decission / Data Tables\nDecission Trees\n\nReality\n=======\n\nPLC\nElectronics Instruments\n\nAnd not so obvious,\nChemistry\nCooking\n\n"},{"title":"Pretentious Lisp","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\n1. Parens\n\nJohn McCarthy and Marvin Minsky don't think of parens as a superior notation.\nIt's surprising how every Lisp implementer seems to neglect that.\n\nOptional infix, postfix notation can easily be slapped on top of Lisp without losing\nit's list like nature.\n\nAlternative brackets were suggested by both of them.\n\nHow is (progn ... ) different from { } ?\n\nParens are, if any, an inferior notation.\nf(g(h)) is the only place where it is acceptable.\n\n2. Parenthetical Indentation\n\n<pre>\n // In C\n for (i = 0; i < 10; i++) {\n     if (i % 2 == 0) {\n         doSomething (i); }\n     else {\n         doSomethingElse (i); } }\n</pre>\n\nCan you identify the problems with the above C code ?\n\nHint: You can't add new statements without fucking up \"{\" and \"}\"\n\nIt's absolutely retarded.\nHow this became the mainstream Lisp style is beyond me.\n\nOf course I am supposed to use autoident/paredit in emacs no less.\nFirstly coupling a programming language with an editor is stupid.\nSecondly there is no guarantee that autoindent and paredit work everytime.\n\nWhich begs the point, why is this shit enforced if it is useless ?\nAllman style works in XML.\n\n3. Lisp Code is pure poetry\n\nExcept it's not.\n\nHint: If you read a code snippet and you can't understand it.\n      Assume that the author is sloppy.\n\nClarity is the sign of intelligence.\nTerseness is a sign of obfuscation.\n\nNow carefully look at `doSomething (i); }`.\n\nCan you comment at the end without fucking \"}\" up ?\n\nThere you have it. Lisp code is poetry because adding a comment\nmeans re-indenting the code.\n\n4. Recursion is so high level you can't breathe\n\nThe dirty secret is, Lisp doesn't have control flow operators like\n\n* break\n* continue\n* goto\n* and even return in clojure\n\nYes return !\n\nHow do you disguise weakness ?\nObfuscate it as a Philosophy obviously !\nThen call everyone who doesn't practice it a BLUB.\n\nNow you have the Moral highground without doing anything.\nThis is precisely what Haskell/ML/Scheme/Lisp camp does.\n\nRecursion is merely one of the many varieties of Iteration.\nYou can write a quick-sort without recursion.\nJust use a Stack to keep track.\n\nCan the same be said of Recursion ?\n\n5. Continuations\n\nAssembly programmers called it co-routines.\nThey had the stack and context registers to mess with.\n\nContinuations are merely the side-effect of hiding the machine from the programmer.\n\n6. Macros\n\nPossibly the most glorified language feature ever.\n\nIs it also so high level you can't breathe ?\n\nAssembly programmers called it \"self-modifying-code\".\n\n10110000 01100001\n\n^ That's machine code.\n\nIt's both an instruction and a number (\"Homoiconicity\").\nWith bit operators you can modify it, just like any other number.\nExcept by modifying it you can create a new instruction.\n\nWas that so difficult to explain ?\n\n","front_matter":"---\ntitle: \"Pretentious Lisp\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"bad-lisp","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n1. Parens\n\nJohn McCarthy and Marvin Minsky don't think of parens as a superior notation.\nIt's surprising how every Lisp implementer seems to neglect that.\n\nOptional infix, postfix notation can easily be slapped on top of Lisp without losing\nit's list like nature.\n\nAlternative brackets were suggested by both of them.\n\nHow is (progn ... ) different from { } ?\n\nParens are, if any, an inferior notation.\nf(g(h)) is the only place where it is acceptable.\n\n2. Parenthetical Indentation\n\n<pre>\n // In C\n for (i = 0; i < 10; i++) {\n     if (i % 2 == 0) {\n         doSomething (i); }\n     else {\n         doSomethingElse (i); } }\n</pre>\n\nCan you identify the problems with the above C code ?\n\nHint: You can't add new statements without fucking up \"{\" and \"}\"\n\nIt's absolutely retarded.\nHow this became the mainstream Lisp style is beyond me.\n\nOf course I am supposed to use autoident/paredit in emacs no less.\nFirstly coupling a programming language with an editor is stupid.\nSecondly there is no guarantee that autoindent and paredit work everytime.\n\nWhich begs the point, why is this shit enforced if it is useless ?\nAllman style works in XML.\n\n3. Lisp Code is pure poetry\n\nExcept it's not.\n\nHint: If you read a code snippet and you can't understand it.\n      Assume that the author is sloppy.\n\nClarity is the sign of intelligence.\nTerseness is a sign of obfuscation.\n\nNow carefully look at `doSomething (i); }`.\n\nCan you comment at the end without fucking \"}\" up ?\n\nThere you have it. Lisp code is poetry because adding a comment\nmeans re-indenting the code.\n\n4. Recursion is so high level you can't breathe\n\nThe dirty secret is, Lisp doesn't have control flow operators like\n\n* break\n* continue\n* goto\n* and even return in clojure\n\nYes return !\n\nHow do you disguise weakness ?\nObfuscate it as a Philosophy obviously !\nThen call everyone who doesn't practice it a BLUB.\n\nNow you have the Moral highground without doing anything.\nThis is precisely what Haskell/ML/Scheme/Lisp camp does.\n\nRecursion is merely one of the many varieties of Iteration.\nYou can write a quick-sort without recursion.\nJust use a Stack to keep track.\n\nCan the same be said of Recursion ?\n\n5. Continuations\n\nAssembly programmers called it co-routines.\nThey had the stack and context registers to mess with.\n\nContinuations are merely the side-effect of hiding the machine from the programmer.\n\n6. Macros\n\nPossibly the most glorified language feature ever.\n\nIs it also so high level you can't breathe ?\n\nAssembly programmers called it \"self-modifying-code\".\n\n10110000 01100001\n\n^ That's machine code.\n\nIt's both an instruction and a number (\"Homoiconicity\").\nWith bit operators you can modify it, just like any other number.\nExcept by modifying it you can create a new instruction.\n\nWas that so difficult to explain ?\n\n"},{"title":"Basics of Programming","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nOr what they don't teach you in School.\n\nWhat is a Program ?\n===================\n- Code + Data\n\nCode\n====\nOperation\n- Selection, Grouping, Loading\n- Sequencing, Coupling, Distributing, Communicating, Controlling\n- Iteration, Scheduling\n- Self Verification\n\nover a Stream of Data.\n\nVerification happens by\n- Assertions / Invariants\n- Logs\n- Exceptions\n- Debugging\n\nData\n====\n- ER / Binary / XML / Object\n- Queries\n- Serialization\n- Storage and Caching\n- Validation\n- Indexing / Searching / Tagging\n- Compression\n- Ontology\n- Analytics\n- Events\n\nInterfaces\n==========\n- Forms\n- Widgets\n- Layouts\n- Scene Graph\n- Routers / Controllers\n\nOperation\n=========\n- Functions\n- System Calls\n- Component Methods\n\nSelection\n========\n- Table\n- If\n- Loader\n\n- Namespaces and Symbols\n- Module / Class / Library\n- Dependency Injection\n- Locator\n- Polymorphism\n\nSequencing\n==========\n- Function Calls\n- Composition\n- Delegation\n- RPC\n\n- Pub / Sub / Subject / Observers / Message Bus\n- Interceptors\n- Data Flow\n\n- Message Queues\n- RPC\n\n- Control Bus\n- Callbacks\n- Promises\n- Co-routines\n- Half Objects\n\nIteration\n=========\n- Startup\n- Recursion\n- Loops\n- Processes / Threads / Contexts\n- Tokens\n\nCode Design\n===========\n1. Code the Interface\n2. Couple Interface to Operations\n3. Couple Operations to Operations\n4. Couple Operations to Interfaces\n\nOperation Characteristics\n=========================\n- Size\n- Speed\n- Bandwidth\n- Memory\n\nDeployment\n==========\n- Build\n- Horizontal and Vertical Scaling\n- Simulations / Tests\n\nNaming Conventions\n==================\nData / Events Should follow structural Naming Conventions.\nOperations are AdjectiveNouns\nCallbacks are VerbNouns\n\nOperation Types\n===============\nApplication\nRemote Calls\nAuthentication\nAuthorization\nTransforms\nExtensions\nCommands\nQueries\nJobs\nOperations\nRoutines\nExtractors\nLoaders\nRouters / Controllers\nWorkflow\nGeneric\n\n","front_matter":"---\ntitle: \"Basics of Programming\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"basic_programming","mtime":"2015-12-08T14:07:23.485Z","mime":"text/plain","html":"\n\nOr what they don't teach you in School.\n\nWhat is a Program ?\n===================\n- Code + Data\n\nCode\n====\nOperation\n- Selection, Grouping, Loading\n- Sequencing, Coupling, Distributing, Communicating, Controlling\n- Iteration, Scheduling\n- Self Verification\n\nover a Stream of Data.\n\nVerification happens by\n- Assertions / Invariants\n- Logs\n- Exceptions\n- Debugging\n\nData\n====\n- ER / Binary / XML / Object\n- Queries\n- Serialization\n- Storage and Caching\n- Validation\n- Indexing / Searching / Tagging\n- Compression\n- Ontology\n- Analytics\n- Events\n\nInterfaces\n==========\n- Forms\n- Widgets\n- Layouts\n- Scene Graph\n- Routers / Controllers\n\nOperation\n=========\n- Functions\n- System Calls\n- Component Methods\n\nSelection\n========\n- Table\n- If\n- Loader\n\n- Namespaces and Symbols\n- Module / Class / Library\n- Dependency Injection\n- Locator\n- Polymorphism\n\nSequencing\n==========\n- Function Calls\n- Composition\n- Delegation\n- RPC\n\n- Pub / Sub / Subject / Observers / Message Bus\n- Interceptors\n- Data Flow\n\n- Message Queues\n- RPC\n\n- Control Bus\n- Callbacks\n- Promises\n- Co-routines\n- Half Objects\n\nIteration\n=========\n- Startup\n- Recursion\n- Loops\n- Processes / Threads / Contexts\n- Tokens\n\nCode Design\n===========\n1. Code the Interface\n2. Couple Interface to Operations\n3. Couple Operations to Operations\n4. Couple Operations to Interfaces\n\nOperation Characteristics\n=========================\n- Size\n- Speed\n- Bandwidth\n- Memory\n\nDeployment\n==========\n- Build\n- Horizontal and Vertical Scaling\n- Simulations / Tests\n\nNaming Conventions\n==================\nData / Events Should follow structural Naming Conventions.\nOperations are AdjectiveNouns\nCallbacks are VerbNouns\n\nOperation Types\n===============\nApplication\nRemote Calls\nAuthentication\nAuthorization\nTransforms\nExtensions\nCommands\nQueries\nJobs\nOperations\nRoutines\nExtractors\nLoaders\nRouters / Controllers\nWorkflow\nGeneric\n\n"},{"title":"CamelCase","author":"foobar","tags":["linguistics"],"copyright":"CC BY-NC","__content":"\n\nIn English, capitalization applies to,\n\n1) First word\n2) Proper noun\n\nSome new rules,\n\nWhen a Proper Noun has more than one word, use capitalization\nfor both the words, just like CamelCase\n\nWhen a verb has more than one word, captalize the second word.\n\nWhen describing attribtutes, use hyphenation.\n\nWhen a Verb is used as a noun, capitalize it.\n\nWhen you feel like, emphasizing a word, capitalize it.\n\nWhen the word really needs to stand out, CAPITALIZE EVERYTHING.\n\n\n","front_matter":"---\ntitle: \"CamelCase\"\nauthor: foobar\ntags: [linguistics]\ncopyright: CC BY-NC\n---","filename":"camel-case","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nIn English, capitalization applies to,\n\n1) First word\n2) Proper noun\n\nSome new rules,\n\nWhen a Proper Noun has more than one word, use capitalization\nfor both the words, just like CamelCase\n\nWhen a verb has more than one word, captalize the second word.\n\nWhen describing attribtutes, use hyphenation.\n\nWhen a Verb is used as a noun, capitalize it.\n\nWhen you feel like, emphasizing a word, capitalize it.\n\nWhen the word really needs to stand out, CAPITALIZE EVERYTHING.\n\n\n"},{"title":"Combinatorial Explosion","author":"foobar","tags":["philosophy","software"],"copyright":"CC BY","__content":"\n<blockquote>My difficulty is only an — enormous — difficulty of expression - Ludwig Wittgenstein</blockquote>\n\nProgramming i.e, building software, for me is about,\n\n* Data\n* Make Decisions based on the Data\n* Do Actions, typically by Divide and Conquer, based on those Decisions\n\nIn fact, doing the above is a part of every day life\neg) ToDo Lists, Appointments, Assessments, Party ...\n\nvar, if, goto.\n\nPretty mundane.\n\nNow if you look at a microphone, even there you \nfind Data and a number of Decisions to make, like **what** to Record.\n\nYou might want noise-cancellation, for example.\n\nThe challenges usually lie in **scale** for software,\ni.e, lots and lots and lots of things happening and you\nneed answers in real-time.\n\nBut even before you get into scaling, you face the\n\n            Combinatorial Explosion\n                 Explosion ?\n                    Yes !\n\nLet's say you are writing an addition software,\nfor adding just two numbers, or at-least that's what\nyou heard the client say.\n\n1 + 1\n> it compiles !\n\nWhat About 1 + 1.0 ?\n\nAnd 1/2 + 1\nAnd 1/5 + 2.2\nAnd \"22.9\" + 1/2\nAnd \"22.8\" + 0x12ff\nAnd 1/2 + \"1/2356\"\nAnd 11.11001100111 + 0.25\nAnd Romanian UTF-14 numbers ?\n\nMaybe next version ...\n\nWhat is more troubling is, now you have a __Floating Point__ bug,\nand you are just staring at the screen, *_*, because you finally\nrealize, it was you who put the explosives, aka Flexibility™, there.\n\nThe client wants to add different currencies, by tomorrow btw.\n\n> Can engineering knowledge be used to preempt combinatorial explosions?\n\nSee Also:\n1] <a href=\"https://en.wikipedia.org/wiki/Feature_creep\">Feature Creep</a>\n\nThanks @theju, @tuxcanfly, @ckvinaykiran for the feedback.\n","front_matter":"---\ntitle: \"Combinatorial Explosion\"\nauthor: foobar\ntags: [philosophy, software]\ncopyright: CC BY\n---","filename":"combinatorial-explosion","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n<blockquote>My difficulty is only an — enormous — difficulty of expression - Ludwig Wittgenstein</blockquote>\n\nProgramming i.e, building software, for me is about,\n\n* Data\n* Make Decisions based on the Data\n* Do Actions, typically by Divide and Conquer, based on those Decisions\n\nIn fact, doing the above is a part of every day life\neg) ToDo Lists, Appointments, Assessments, Party ...\n\nvar, if, goto.\n\nPretty mundane.\n\nNow if you look at a microphone, even there you \nfind Data and a number of Decisions to make, like **what** to Record.\n\nYou might want noise-cancellation, for example.\n\nThe challenges usually lie in **scale** for software,\ni.e, lots and lots and lots of things happening and you\nneed answers in real-time.\n\nBut even before you get into scaling, you face the\n\n            Combinatorial Explosion\n                 Explosion ?\n                    Yes !\n\nLet's say you are writing an addition software,\nfor adding just two numbers, or at-least that's what\nyou heard the client say.\n\n1 + 1\n> it compiles !\n\nWhat About 1 + 1.0 ?\n\nAnd 1/2 + 1\nAnd 1/5 + 2.2\nAnd \"22.9\" + 1/2\nAnd \"22.8\" + 0x12ff\nAnd 1/2 + \"1/2356\"\nAnd 11.11001100111 + 0.25\nAnd Romanian UTF-14 numbers ?\n\nMaybe next version ...\n\nWhat is more troubling is, now you have a __Floating Point__ bug,\nand you are just staring at the screen, *_*, because you finally\nrealize, it was you who put the explosives, aka Flexibility™, there.\n\nThe client wants to add different currencies, by tomorrow btw.\n\n> Can engineering knowledge be used to preempt combinatorial explosions?\n\nSee Also:\n1] <a href=\"https://en.wikipedia.org/wiki/Feature_creep\">Feature Creep</a>\n\nThanks @theju, @tuxcanfly, @ckvinaykiran for the feedback.\n"},{"title":"Compressing Fonts","author":"foobar","tags":["typography"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/design/index-en.html\">MPlus</a> is my favorite font.\nIt's thin and has fixed width.\n\nI could not get <a href=\"http://www.fontsquirrel.com/tools/webfont-generator\">Font Squirrel's</a> web font generator to work(size?).\nSo I wrote a <a href=\"http://fontforge.org\">fontforge</a> script to compress the font by extracting <a href=\"https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)\">Basic Latin</a>,\n<a href=\"https://gist.github.com/harsha-mudi/10980853.js\">here</a>\n\nThe web font is available <a href=\"/css/mplus-1m-regular.ttf\">here</a>\n","front_matter":"---\ntitle: \"Compressing Fonts\"\nauthor: foobar\ntags: [typography]\ncopyright: CC BY-NC\n---","filename":"compressing-fonts","mtime":"2015-11-29T06:07:13.190Z","mime":"text/plain","html":"\n\n<a href=\"http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/design/index-en.html\">MPlus</a> is my favorite font.\nIt's thin and has fixed width.\n\nI could not get <a href=\"http://www.fontsquirrel.com/tools/webfont-generator\">Font Squirrel's</a> web font generator to work(size?).\nSo I wrote a <a href=\"http://fontforge.org\">fontforge</a> script to compress the font by extracting <a href=\"https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)\">Basic Latin</a>,\n<a href=\"https://gist.github.com/harsha-mudi/10980853.js\">here</a>\n\nThe web font is available <a href=\"/css/mplus-1m-regular.ttf\">here</a>\n"},{"title":"Software Craftsman Style","author":"foobar","tags":["philosophy","programming"],"copyright":"CC BY","__content":"\n\nWork Style\n==========\n1. Lean Team\n2. Regular Feedback\n3. Systems Thinking\n4. Modular Development\n5. Simulation Testing\n6. Fast Support\n\nCommunication Style\n===================\n\n1. Demos / Vidoes / Screenshots / Finger On the Screen\n2. Workflows Documents\n3. Dataflows Documents\n4. End-User Stories\n5. Architecture Documents\n6. Tutorials and Examples\n7. Readable Book\n8. API Docs\n\n\n\n\n\n","front_matter":"---\ntitle: \"Software Craftsman Style\"\nauthor: foobar\ntags: [philosophy, programming]\ncopyright: CC BY\n---","filename":"craftsman-style","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nWork Style\n==========\n1. Lean Team\n2. Regular Feedback\n3. Systems Thinking\n4. Modular Development\n5. Simulation Testing\n6. Fast Support\n\nCommunication Style\n===================\n\n1. Demos / Vidoes / Screenshots / Finger On the Screen\n2. Workflows Documents\n3. Dataflows Documents\n4. End-User Stories\n5. Architecture Documents\n6. Tutorials and Examples\n7. Readable Book\n8. API Docs\n\n\n\n\n\n"},{"title":"Data Flow","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\n# Two types of Data\n\n1. Continuous\n2. Discrete\n\nContinuous data needs bounded buffers to avoid overflow.\nAll systems are discrete unless mentioned otherwise.\n\n# Types of Connection\n\n## Pure Data (Continuous + Discrete)\n\n### \"Live\" Object\nm inlets + j control-inlets\n&lt;process&gt;\nn control outlets + k control-outlets\n\n## Javelin\n\n### Cell\n1 controller\n&lt;identity&gt;\nn sinks\n\n### Formula\nn sources\n&lt;script&gt;\n1 sink\n\n## Pipes\n1 input\n&lt;process&gt;\n2 outputs\n\n## Subroutines\n1 tuple\n&lt;routine&gt;\n1 tuple\n\n## Message Passing\n1 publisher\n&lt;notify&gt;\nn subscribers\n\n# Structure of Nodes\n\n1. Static\n2. Dynamic\n3. Re-Configurable\n\nRe-Configurable Flows are called Workflows.\n\n# Concurrency\n\nConcurrent Data Flows require a context matching algorithm.\n\n# Flow Direction\n\n1. Duplex (Subroutines)\n2. Pipeline or Push\n3. Pull\n\n# Environment\n\n1. Asnc\n2. Clock\n3. Hybrid\n\n","front_matter":"---\ntitle: \"Data Flow\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"dataflow","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n# Two types of Data\n\n1. Continuous\n2. Discrete\n\nContinuous data needs bounded buffers to avoid overflow.\nAll systems are discrete unless mentioned otherwise.\n\n# Types of Connection\n\n## Pure Data (Continuous + Discrete)\n\n### \"Live\" Object\nm inlets + j control-inlets\n&lt;process&gt;\nn control outlets + k control-outlets\n\n## Javelin\n\n### Cell\n1 controller\n&lt;identity&gt;\nn sinks\n\n### Formula\nn sources\n&lt;script&gt;\n1 sink\n\n## Pipes\n1 input\n&lt;process&gt;\n2 outputs\n\n## Subroutines\n1 tuple\n&lt;routine&gt;\n1 tuple\n\n## Message Passing\n1 publisher\n&lt;notify&gt;\nn subscribers\n\n# Structure of Nodes\n\n1. Static\n2. Dynamic\n3. Re-Configurable\n\nRe-Configurable Flows are called Workflows.\n\n# Concurrency\n\nConcurrent Data Flows require a context matching algorithm.\n\n# Flow Direction\n\n1. Duplex (Subroutines)\n2. Pipeline or Push\n3. Pull\n\n# Environment\n\n1. Asnc\n2. Clock\n3. Hybrid\n\n"},{"title":"Why Desktops / Laptops and Application Softwares are here to stay ...","author":"foobar","tags":["software"],"copyright":"CC BY-NC","__content":"\n\nSummary: Mobile Devices / Web are for Entertainment.\n\nProfessional Work\n=================\n\n- Office\n- Emails aka Long Communication\n- Programming\n- Arts with Digital Workflows\n- Complex Games\n- Research\n- Trading\n- Multimedia Computer\n- AutoCAD\n\nMobile Devices / Web\n====================\n\n- Notifications / Read Only\n- Short Communication\n- Toy apps\n- Games\n- Reading / Learning\n- Buying simple items\n- LoginMedia Computer\n- Tetris\n\nFeatures of Application Software\n================================\n\nexit button\nminimize (multitasking)\nfiles\nthreads / processes / aio (performance / parallism)\nlarger ram\ncustom stores\nbigger screens / multiple screens\nadaptable to touch (windows 8)\nadaptable to cloud (chromebook)\nportable to coffee shops\n\n*gasp* A Laptop can be connected to TV with a HDMI port.\n\nwork / life balance\n","front_matter":"---\ntitle: \"Why Desktops / Laptops and Application Softwares are here to stay ...\"\nauthor: foobar\ntags: [software]\ncopyright: CC BY-NC\n---","filename":"desktops","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nSummary: Mobile Devices / Web are for Entertainment.\n\nProfessional Work\n=================\n\n- Office\n- Emails aka Long Communication\n- Programming\n- Arts with Digital Workflows\n- Complex Games\n- Research\n- Trading\n- Multimedia Computer\n- AutoCAD\n\nMobile Devices / Web\n====================\n\n- Notifications / Read Only\n- Short Communication\n- Toy apps\n- Games\n- Reading / Learning\n- Buying simple items\n- LoginMedia Computer\n- Tetris\n\nFeatures of Application Software\n================================\n\nexit button\nminimize (multitasking)\nfiles\nthreads / processes / aio (performance / parallism)\nlarger ram\ncustom stores\nbigger screens / multiple screens\nadaptable to touch (windows 8)\nadaptable to cloud (chromebook)\nportable to coffee shops\n\n*gasp* A Laptop can be connected to TV with a HDMI port.\n\nwork / life balance\n"},{"title":"DISCLAIMER","author":"foobar","category":"nav","copyright":"CC BY-NC","__content":"\n\nKant calls for the public use of private reason, and the private\nuse of public reason.\n\nIt's an excellent defense of free speech, as it guides \none to put private speech in public, rawly, for public feedback.\n\nIt encourages one to take public feedback into private thinking,\nto make one's reasoning purer.\n\nYou can read Kant's essay, \"What is Enlightenment ?\", <a href=\"http://www.columbia.edu/acis/ets/CCREAD/etscc/kant.html\">here</a>.\n\nThis blog represents the private thoughts and reasons \nof the author for the public git.\n\n","front_matter":"---\ntitle: \"DISCLAIMER\"\nauthor: foobar\ncategory: nav\ncopyright: CC BY-NC\n---","filename":"disclaimer","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nKant calls for the public use of private reason, and the private\nuse of public reason.\n\nIt's an excellent defense of free speech, as it guides \none to put private speech in public, rawly, for public feedback.\n\nIt encourages one to take public feedback into private thinking,\nto make one's reasoning purer.\n\nYou can read Kant's essay, \"What is Enlightenment ?\", <a href=\"http://www.columbia.edu/acis/ets/CCREAD/etscc/kant.html\">here</a>.\n\nThis blog represents the private thoughts and reasons \nof the author for the public git.\n\n"},{"title":"The Eight Fallacies of Distributed Computing","author":"foobar","tags":["quote"],"copyright":"CC BY-NC","__content":"\n\nTaken from <a href=\"http://www.rgoarchitects.com/Files/fallacies.pdf\">here</a>.\n\nEssentially everyone, when they first build a distributed application,\nmakes the following eight assumptions.\n\nAll prove to be false in the long run and \nall cause big trouble and painful learning experiences.\n\nThe network is reliable\nLatency is zero\nBandwidth is infinite\nThe network is secure\nTopology doesn’t change\nThere is one administrator\nTransport cost is zero\nThe network is homogeneous\n        — Peter Deutsch\n\n","front_matter":"---\ntitle: \"The Eight Fallacies of Distributed Computing\"\nauthor: foobar\ntags: [quote]\ncopyright: CC BY-NC\n---","filename":"distributed-fallacy","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nTaken from <a href=\"http://www.rgoarchitects.com/Files/fallacies.pdf\">here</a>.\n\nEssentially everyone, when they first build a distributed application,\nmakes the following eight assumptions.\n\nAll prove to be false in the long run and \nall cause big trouble and painful learning experiences.\n\nThe network is reliable\nLatency is zero\nBandwidth is infinite\nThe network is secure\nTopology doesn’t change\nThere is one administrator\nTransport cost is zero\nThe network is homogeneous\n        — Peter Deutsch\n\n"},{"title":"The unity of Dub, Techno and Jungle","author":"foobar","tags":["philosophy","music"],"copyright":"CC BY","__content":"\nDub, Techno and Jungle** are distinct musical genres.\nWhat could they possibly share ?\n\n(** Jungle is used as a catch all for Breakbeat, Hardcore as well)\n\nAll three uphold the primacy of Rhythm for start.\nThis means that melody is nothing but a repeating motif or a live instrument.\n\nAll three are instrumental.\nVoices are used sparingly as samples.\n\nAll three have a tradition of live acts.\nDub Plates are common for these genres.\n\nIt is how each achieves Rhythm that gives them their unique feel.\n\nDub Music is made by messing with the Recording Engineer's Mixing desk.\n- tweaking.\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/oJs1wR8tLr4\" frameborder=\"0\" allowfullscreen></iframe>\n\nTechno is made by messing with Hardware or Hardware + Software.\n- tweaking + layering.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eaVY5Y13sc0\" frameborder=\"0\" allowfullscreen></iframe>\n\nJungle Music is made by messing with Hardware + Software combo.\n- complex layering\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/q72qoGYirwU\" frameborder=\"0\" allowfullscreen></iframe>\n\n","front_matter":"---\ntitle: \"The unity of Dub, Techno and Jungle\"\nauthor: foobar\ntags: [philosophy, music]\ncopyright: CC BY\n---","filename":"dtj","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\nDub, Techno and Jungle** are distinct musical genres.\nWhat could they possibly share ?\n\n(** Jungle is used as a catch all for Breakbeat, Hardcore as well)\n\nAll three uphold the primacy of Rhythm for start.\nThis means that melody is nothing but a repeating motif or a live instrument.\n\nAll three are instrumental.\nVoices are used sparingly as samples.\n\nAll three have a tradition of live acts.\nDub Plates are common for these genres.\n\nIt is how each achieves Rhythm that gives them their unique feel.\n\nDub Music is made by messing with the Recording Engineer's Mixing desk.\n- tweaking.\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/oJs1wR8tLr4\" frameborder=\"0\" allowfullscreen></iframe>\n\nTechno is made by messing with Hardware or Hardware + Software.\n- tweaking + layering.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eaVY5Y13sc0\" frameborder=\"0\" allowfullscreen></iframe>\n\nJungle Music is made by messing with Hardware + Software combo.\n- complex layering\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/q72qoGYirwU\" frameborder=\"0\" allowfullscreen></iframe>\n\n"},{"title":"Electronic Music Technology","author":"foobar","tags":["music"],"copyright":"CC BY-NC","__content":"\n\nProducer Tech\n=============\n\nTapes / Phonograph\n--> DJing, Experimental\nElectronics\n--> Experimental\nRecording Studio\n--> Remixes\nStudio Effects\n--> Dub Remixes, Experimental\nSynthesizers\n--> Ambient, Experimental\n--> Pop\nLoopers\n--> Beatboxing\nSoundchips\n--> Chiptunes\nTurntables\n--> Hip Hop\nDrum Machines, MIDI\n--> Techno, Breakbeat and their derivatives\nSampling, Vocoder\n--> Everyone\n\nConsumer Tech\n=============\n\nFM\nVinyl/Dub Plates\nCassette\nCD\nMP3\nInternet\n\nSoftwares by way of emulation and generalization brought digital alternatives\nto each of the above\n--> Traktor, Max, Ableton, Fruity Loops, Renoise, Cubase, Acid Loops\n\nCountries involved\n--> Japan(Hardware), Germany, UK, America\n\n","front_matter":"---\ntitle: \"Electronic Music Technology\"\nauthor: foobar\ntags: [music]\ncopyright: CC BY-NC\n---","filename":"electronic-music","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nProducer Tech\n=============\n\nTapes / Phonograph\n--> DJing, Experimental\nElectronics\n--> Experimental\nRecording Studio\n--> Remixes\nStudio Effects\n--> Dub Remixes, Experimental\nSynthesizers\n--> Ambient, Experimental\n--> Pop\nLoopers\n--> Beatboxing\nSoundchips\n--> Chiptunes\nTurntables\n--> Hip Hop\nDrum Machines, MIDI\n--> Techno, Breakbeat and their derivatives\nSampling, Vocoder\n--> Everyone\n\nConsumer Tech\n=============\n\nFM\nVinyl/Dub Plates\nCassette\nCD\nMP3\nInternet\n\nSoftwares by way of emulation and generalization brought digital alternatives\nto each of the above\n--> Traktor, Max, Ableton, Fruity Loops, Renoise, Cubase, Acid Loops\n\nCountries involved\n--> Japan(Hardware), Germany, UK, America\n\n"},{"title":"Emoticons","author":"foobar","tags":["linguistics"],"copyright":"CC BY","__content":"\n\n<a href=\"https://en.wikipedia.org/wiki/List_of_emoticons\">Emoticons</a> fascinate me.\n\nThey are the resurgence of pictographs, a bit like <a href=\"https://en.wikipedia.org/wiki/Egyptian_hieroglyphs\">Egyptian Hieroglyphs</a>,\nor the Chinese symbols.\n\nFor example, ⼮ is the Chinese symbol for river.\n\nHere are some new interesting emoticons, that I found in the wild wild web,\n\nಠ_ಠ      -- disapproval (that's the Kannada <a href=\"http://unicode-table.com/en/0CA0/\">http://unicode-table.com/en/0CA0</a>)\nᕕ(ᐛ)ᕗ   -- happy\nᕙ(‸‶)ᕗ    -- lack of muscles\n<<°°>>     -- crab\n:{C       -- a sad English gentleman\n:C        -- hipster sad face\n∎-∎       -- cooling glasses\n(-_-)凸   -- showing the finger\n\nExploring multi-language, <a href=\"https://en.wikipedia.org/wiki/Unicode\">unicode</a>, alphabets and coming up with your own,\nis silly, stupid and you should totally try doodling some.\n\nHere are some that I discovered,\n\nఠ_ఠ      -- worried about your sanity\n౪       -- stethoscope\n(‸‶       -- amazed that you can actually do that\n(‸‶)౨   -- why do you always\n--ల     -- punch (looks like a boxing glove)\n\nThe above use some alphabets of Telugu,\n<a href=\"http://unicode-table.com/en/search/?q=telugu\">http://unicode-table.com/en/search/?q=telugu</a>.\n\n(The above is best viewed in browsers with good alphabet coverage,\n like chrome, otherwise you will see empty boxes)\n","front_matter":"---\ntitle: \"Emoticons\"\nauthor: foobar\ntags: [linguistics]\ncopyright: CC BY\n---","filename":"emoticons","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n<a href=\"https://en.wikipedia.org/wiki/List_of_emoticons\">Emoticons</a> fascinate me.\n\nThey are the resurgence of pictographs, a bit like <a href=\"https://en.wikipedia.org/wiki/Egyptian_hieroglyphs\">Egyptian Hieroglyphs</a>,\nor the Chinese symbols.\n\nFor example, ⼮ is the Chinese symbol for river.\n\nHere are some new interesting emoticons, that I found in the wild wild web,\n\nಠ_ಠ      -- disapproval (that's the Kannada <a href=\"http://unicode-table.com/en/0CA0/\">http://unicode-table.com/en/0CA0</a>)\nᕕ(ᐛ)ᕗ   -- happy\nᕙ(‸‶)ᕗ    -- lack of muscles\n<<°°>>     -- crab\n:{C       -- a sad English gentleman\n:C        -- hipster sad face\n∎-∎       -- cooling glasses\n(-_-)凸   -- showing the finger\n\nExploring multi-language, <a href=\"https://en.wikipedia.org/wiki/Unicode\">unicode</a>, alphabets and coming up with your own,\nis silly, stupid and you should totally try doodling some.\n\nHere are some that I discovered,\n\nఠ_ఠ      -- worried about your sanity\n౪       -- stethoscope\n(‸‶       -- amazed that you can actually do that\n(‸‶)౨   -- why do you always\n--ల     -- punch (looks like a boxing glove)\n\nThe above use some alphabets of Telugu,\n<a href=\"http://unicode-table.com/en/search/?q=telugu\">http://unicode-table.com/en/search/?q=telugu</a>.\n\n(The above is best viewed in browsers with good alphabet coverage,\n like chrome, otherwise you will see empty boxes)\n"},{"title":"Estimates","author":"foobar","tags":["software","philosophy"],"copyright":"CC BY-NC","__content":"\n\nDoes not work\n=============\n\n* Will get over soon\n* Today\n* This week\n* This weekend\n* Tomorrow\n* This month\n* Next month\n\nLazy Answers\n============\n\n* I'll get back to you\n* It'll take long\n* Maybe he can do it\n\nMay Work\n========\n\n* Buffer time\n* Best/Average/Worst Case estimates\n\nModelling\n=========\n\n* Define outcomes or function points as bullet points\n** Divide each point into tasks\n*** Tasks can be parallel / linear.\n    If linear, identity inputs\n\nNumbers\n=======\n\nModification and Deletion of lines should be considered \na part of LOC.\n\n* 1 week == 40 hours\n* task: 2-16 hours\n** 20 - 3 tasks per week\n   5 - 0.5 tasks per day\n** If function point ~~ 3 tasks,\n   6 - 1 function points per week\n   1 - 0.3 function points per day\n\n* 10 - 350 LOC / Day\n* 12 bugs per 1000 LOC.\n** 80 is a good number\n** function point ~~ 50 LOC\n\n* use `gem install git_stats`\n\nPersonal Numbers\n================\n\n* 30 - 150 LOC / Week\n** 3 function points per week\n** 0.5 function points per day\n** 9 tasks per week\n** 2 tasks per day\n\n* <a href=\"http://automagical.rationalmind.net/2010/08/17/some-lesser-known-truths-about-programming\">[more numbers]</a>\n\n","front_matter":"---\ntitle: Estimates\nauthor: foobar\ntags: [software, philosophy]\ncopyright: CC BY-NC\n---","filename":"estimates","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nDoes not work\n=============\n\n* Will get over soon\n* Today\n* This week\n* This weekend\n* Tomorrow\n* This month\n* Next month\n\nLazy Answers\n============\n\n* I'll get back to you\n* It'll take long\n* Maybe he can do it\n\nMay Work\n========\n\n* Buffer time\n* Best/Average/Worst Case estimates\n\nModelling\n=========\n\n* Define outcomes or function points as bullet points\n** Divide each point into tasks\n*** Tasks can be parallel / linear.\n    If linear, identity inputs\n\nNumbers\n=======\n\nModification and Deletion of lines should be considered \na part of LOC.\n\n* 1 week == 40 hours\n* task: 2-16 hours\n** 20 - 3 tasks per week\n   5 - 0.5 tasks per day\n** If function point ~~ 3 tasks,\n   6 - 1 function points per week\n   1 - 0.3 function points per day\n\n* 10 - 350 LOC / Day\n* 12 bugs per 1000 LOC.\n** 80 is a good number\n** function point ~~ 50 LOC\n\n* use `gem install git_stats`\n\nPersonal Numbers\n================\n\n* 30 - 150 LOC / Week\n** 3 function points per week\n** 0.5 function points per day\n** 9 tasks per week\n** 2 tasks per day\n\n* <a href=\"http://automagical.rationalmind.net/2010/08/17/some-lesser-known-truths-about-programming\">[more numbers]</a>\n\n"},{"title":"Fidelity","author":"foobar","tags":["music","software","philosophy"],"copyright":"CC BY-NC","__content":"\n\nFidelity(n):\n1. the quality or state of being faithful\n2. accuracy in details :  exactness\n\nFidelity is commonly used in Music, when discussing\nVinyl vs Digital and so on.\n\nThe 1st meaning of fidelity indirectly means trust.\nThe 2nd meaning of fidelity is synonymous with finesse.\n\nFor example, when you have a Hi-Fi CD it means that,\n\n1. You can trust that it's Hi-Fi\n   (You have an immediate way of knowing)\n2. It's a faithful recording of the original\n   (Like using multiple microphones vs 1, bitrates ...)\n3. The original itself was having high detail.\n   (Instruments are of good made)\n\nLo-Fi\n-----\n\nLinux/GNU\n===========\n\nLinux/GNU is not UNIX.\nIt's a clone of UNIX.\nIronically, the recursive acronym reflects the actual truth.\n\nLinux/GNU don't follow POSIX but LSB.\n\nThe fidelity with respect to UNIX is thus low.\n\nGit\n===\n\nAccording to Git, they are a replacement for\nSVN and Perforce.\n\nThe GUI tooling for Git is lack luster.\n\nGit can't do directory checkouts or externals, features\nwhich SVN has.\n\nInterestingly SVN is opensource, here.\n\nThe fidelity wrt SVN and its tooling is thus low.\n\nDid you just criticize Linux and Git ?\n======================================\n\nYes.\n\nPerl/Python/Ruby\n================\n\nAnd yet even after 20 years, neither has replaced [bzck]?sh.\n\nAren't you losing a bit of fidelity when you say\nthey can be used for shell scripting ?\n\nERB is not PHP either, from the prespective of fidelity.\n\nHTML5\n=====\n\nThe fidelity wrt paper, books is low.\nTry getting page numbers right.\n\nMac OSX\n=======\n\nThe fidelity of Mac wrt Mac is low.\n\nWhat this means is that Backward Compatibility is low\nfor Mac Applications.\n\nApple has even made PowerPC Applications unusable.\n\nWhen you claim you love Apple, you are assuming\nOlder Apples are equal to Newer Apples.\n\nHi-Fi\n-----\n\nOf All The Things, XML\n======================\n\nPDF, Prince(XML), Docbook(XML), Latex have a far greater fidelity to\npaper.\n\nMicrosoft\n=========\n\nMax Payne was released 13 years ago.\nI believe it's still playable on Windows 8.\n\nMicrosoft has fidelity to the Windows API's.\n\nAdbobe\n======\n\nAdobe Softwares have a high fidelity to numerous\nindustries in which it is used in.\n\nEmulators\n=========\n\nObvious.\n\nTracker softwares like renoise, extend beyond emulation\nbut remain faithful to the Idea.\n\nVLC\n===\n\nYou would know, if VLC had problems rendering.\n\nProprietary Software\n====================\n\nUsually they have higher fidelity.\n\nThis is also true for Programming Languages used in the Industry,\nlike C++ or Java.\n\nTake a look at their specs for example.\n\nNot Hackers\n===========\n\nI use the term Hacker as a loose term for a programmer\ninvolved in the Open Source and Startup communities.\n\nEngineers have a higher fidelity than Hackers.\nCraftsmen have a higher fidelity than Hackers.\n\nCurrently Software Industry has a limited notion of word \nEngineering, when stuff like OpenSSL is the norm.\n\nIs this rubbish important ?\n===========================\n\nYes.\n\nEvery time a book is made into a film, there is a debate of book vs film.\n\nThe notion of fidelity helps in analyzing how things are,\nand how things could be better.\n\nIf you like travis badges, then I don't really have to explain\nmuch here, other than give you a new word to ponder on.\n\nHere are things you can do to increase fidelity,\n\n1. Show finesse.\n2. Document missing/changing API's and Interfaces.\n3. Pay attention to testing\n4. Pay attention to backward compatibility\n5. Pay attention to the industry's tradition in question\n6. Stop using childish terms like disrupt when all you\n   are providing is a cheap solution with 1/10th the \n   quality.\n7. Pay attention to standards compliance\n8. Don't claim fidelity if you can't prove it\n9. Security testing\n10. Respect Original Solutions and learn from them.\n11. Don't plagiarise and market is differently\n12. If you claim superiority prove it\n13. well-tested vs I just hacked this in a day\n14. Documentation improves fidelity of a bad product.\n\n15. Don't treat Professional Users as Normal Users\n\n   If I paid for the software/service, I am willing to read the \n   documentation. Dumbing down the software and introducing stupid\n   workflows is simply unacceptable.\n\n   Here, fidelity means being loyal to the customers.\n\n16. Inheritance, not copy paste\n17. Give credits where due.\n\n   (I have to mention this because even big open source projects\n    like <a href=\"https://github.com/ghc/ghc\">ghc</a> don't have a CONTRIBUTORS.txt)\n\n18. Fine Grained features along with simple ones.\n19. Respect real workers not artificial workflows\n\nSome important points have their own headings.\n\nShameless practices\n==================\n\n* Renaming variables\n* Deleting mention of the original author\n\nare rampant in opensource, especially when forced\nto use in industries.\n\nLegal enforcements are few, mostly because no one \nhas the time.\n\nJust don't.\n\nDisrupting\n==========\n\nEvery software company tries to copy real world workflows,\nbut implements it with bad insecure code and limited features.\n\nFor example facebook thinks it has re-defined social\ninteractions and Evernote thinks it disrupted pens.\n\nIn truth these technologies have changed things, but not\nbecause of fidelity, but gratification.\n\nIt's very difficult to share a doodle with a friend in 5s, with\nthe above softwares for example.\n\nThe problem is Hackers\n======================\n\nForget Steve Jobs and his calligraphy lessons,\nI can't even change the System Font in my Mavericks.\n\nDonald Knuth spent a disproportionate amount of time\non <a href=\"https://en.wikipedia.org/wiki/Metafont\">typesetting</a> and no one seems to think\nits worth imitating.\n\nI want you to think about that and be inspired by that.\n\nWhen you build a new framework don't insult the word,\nwhich is what we share with Engineers.\n\n","front_matter":"---\ntitle: \"Fidelity\"\nauthor: foobar\ntags: [music, software, philosophy]\ncopyright: CC BY-NC\n---","filename":"fidelity","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nFidelity(n):\n1. the quality or state of being faithful\n2. accuracy in details :  exactness\n\nFidelity is commonly used in Music, when discussing\nVinyl vs Digital and so on.\n\nThe 1st meaning of fidelity indirectly means trust.\nThe 2nd meaning of fidelity is synonymous with finesse.\n\nFor example, when you have a Hi-Fi CD it means that,\n\n1. You can trust that it's Hi-Fi\n   (You have an immediate way of knowing)\n2. It's a faithful recording of the original\n   (Like using multiple microphones vs 1, bitrates ...)\n3. The original itself was having high detail.\n   (Instruments are of good made)\n\nLo-Fi\n-----\n\nLinux/GNU\n===========\n\nLinux/GNU is not UNIX.\nIt's a clone of UNIX.\nIronically, the recursive acronym reflects the actual truth.\n\nLinux/GNU don't follow POSIX but LSB.\n\nThe fidelity with respect to UNIX is thus low.\n\nGit\n===\n\nAccording to Git, they are a replacement for\nSVN and Perforce.\n\nThe GUI tooling for Git is lack luster.\n\nGit can't do directory checkouts or externals, features\nwhich SVN has.\n\nInterestingly SVN is opensource, here.\n\nThe fidelity wrt SVN and its tooling is thus low.\n\nDid you just criticize Linux and Git ?\n======================================\n\nYes.\n\nPerl/Python/Ruby\n================\n\nAnd yet even after 20 years, neither has replaced [bzck]?sh.\n\nAren't you losing a bit of fidelity when you say\nthey can be used for shell scripting ?\n\nERB is not PHP either, from the prespective of fidelity.\n\nHTML5\n=====\n\nThe fidelity wrt paper, books is low.\nTry getting page numbers right.\n\nMac OSX\n=======\n\nThe fidelity of Mac wrt Mac is low.\n\nWhat this means is that Backward Compatibility is low\nfor Mac Applications.\n\nApple has even made PowerPC Applications unusable.\n\nWhen you claim you love Apple, you are assuming\nOlder Apples are equal to Newer Apples.\n\nHi-Fi\n-----\n\nOf All The Things, XML\n======================\n\nPDF, Prince(XML), Docbook(XML), Latex have a far greater fidelity to\npaper.\n\nMicrosoft\n=========\n\nMax Payne was released 13 years ago.\nI believe it's still playable on Windows 8.\n\nMicrosoft has fidelity to the Windows API's.\n\nAdbobe\n======\n\nAdobe Softwares have a high fidelity to numerous\nindustries in which it is used in.\n\nEmulators\n=========\n\nObvious.\n\nTracker softwares like renoise, extend beyond emulation\nbut remain faithful to the Idea.\n\nVLC\n===\n\nYou would know, if VLC had problems rendering.\n\nProprietary Software\n====================\n\nUsually they have higher fidelity.\n\nThis is also true for Programming Languages used in the Industry,\nlike C++ or Java.\n\nTake a look at their specs for example.\n\nNot Hackers\n===========\n\nI use the term Hacker as a loose term for a programmer\ninvolved in the Open Source and Startup communities.\n\nEngineers have a higher fidelity than Hackers.\nCraftsmen have a higher fidelity than Hackers.\n\nCurrently Software Industry has a limited notion of word \nEngineering, when stuff like OpenSSL is the norm.\n\nIs this rubbish important ?\n===========================\n\nYes.\n\nEvery time a book is made into a film, there is a debate of book vs film.\n\nThe notion of fidelity helps in analyzing how things are,\nand how things could be better.\n\nIf you like travis badges, then I don't really have to explain\nmuch here, other than give you a new word to ponder on.\n\nHere are things you can do to increase fidelity,\n\n1. Show finesse.\n2. Document missing/changing API's and Interfaces.\n3. Pay attention to testing\n4. Pay attention to backward compatibility\n5. Pay attention to the industry's tradition in question\n6. Stop using childish terms like disrupt when all you\n   are providing is a cheap solution with 1/10th the \n   quality.\n7. Pay attention to standards compliance\n8. Don't claim fidelity if you can't prove it\n9. Security testing\n10. Respect Original Solutions and learn from them.\n11. Don't plagiarise and market is differently\n12. If you claim superiority prove it\n13. well-tested vs I just hacked this in a day\n14. Documentation improves fidelity of a bad product.\n\n15. Don't treat Professional Users as Normal Users\n\n   If I paid for the software/service, I am willing to read the \n   documentation. Dumbing down the software and introducing stupid\n   workflows is simply unacceptable.\n\n   Here, fidelity means being loyal to the customers.\n\n16. Inheritance, not copy paste\n17. Give credits where due.\n\n   (I have to mention this because even big open source projects\n    like <a href=\"https://github.com/ghc/ghc\">ghc</a> don't have a CONTRIBUTORS.txt)\n\n18. Fine Grained features along with simple ones.\n19. Respect real workers not artificial workflows\n\nSome important points have their own headings.\n\nShameless practices\n==================\n\n* Renaming variables\n* Deleting mention of the original author\n\nare rampant in opensource, especially when forced\nto use in industries.\n\nLegal enforcements are few, mostly because no one \nhas the time.\n\nJust don't.\n\nDisrupting\n==========\n\nEvery software company tries to copy real world workflows,\nbut implements it with bad insecure code and limited features.\n\nFor example facebook thinks it has re-defined social\ninteractions and Evernote thinks it disrupted pens.\n\nIn truth these technologies have changed things, but not\nbecause of fidelity, but gratification.\n\nIt's very difficult to share a doodle with a friend in 5s, with\nthe above softwares for example.\n\nThe problem is Hackers\n======================\n\nForget Steve Jobs and his calligraphy lessons,\nI can't even change the System Font in my Mavericks.\n\nDonald Knuth spent a disproportionate amount of time\non <a href=\"https://en.wikipedia.org/wiki/Metafont\">typesetting</a> and no one seems to think\nits worth imitating.\n\nI want you to think about that and be inspired by that.\n\nWhen you build a new framework don't insult the word,\nwhich is what we share with Engineers.\n\n"},{"title":"Fixing the Software Industry","author":"foobar","tags":["programming"],"copyright":"CC BY NC","__content":"\n\n1. Stop bickering about languages.\n2. Stop fucking bickering about frameworks.\n3. Fuck frameworks.\n4. Libraries are the way to go.\n5. Users don't give a fuck about the code, but EASY to use interfaces.\n6. Stable software over copyright wars.\n7. Money helps in fixing other issues, ask Bill Gates.\n8. Hell is other people's code.\n9. Craftsmanship works.\n10. Like solving problems ? Ask around, poeple are always bitching about some software\n    issue or the other.\n11. Open Interfaces < Open Source < Free Software < Stable Software\n\n","front_matter":"---\ntitle: \"Fixing the Software Industry\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY NC\n---","filename":"fixing_the_software_industry","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n1. Stop bickering about languages.\n2. Stop fucking bickering about frameworks.\n3. Fuck frameworks.\n4. Libraries are the way to go.\n5. Users don't give a fuck about the code, but EASY to use interfaces.\n6. Stable software over copyright wars.\n7. Money helps in fixing other issues, ask Bill Gates.\n8. Hell is other people's code.\n9. Craftsmanship works.\n10. Like solving problems ? Ask around, poeple are always bitching about some software\n    issue or the other.\n11. Open Interfaces < Open Source < Free Software < Stable Software\n\n"},{"title":"Flow","author":"foobar","tags":["philosophy","psychology"],"copyright":"CC BY","__content":"\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/AU5x1Ea7NjQ\" frameborder=\"0\" allowfullscreen></iframe>\n\nHave experienced a bit of flow recently, here are my notes.\n\nClosed Thinking\n- anxious\n- energetic\n- ambitious\n- failure averse\n- distracted\n- noisy\n- obstacles\n\nCreative Thinking\n- humour\n- ad lib\n- curiosity\n- multiple solutions\n- no fear\n- limits\n- quiet\n- play\n\nIt is easier to do trivial and little things than difficult things.\nSo I start with the difficult things.\n\nI am also programming en masse than compile every syntax error.\nIt's interesting to depend on your thinking than the compiler.\n\nTips\n* long/slow/forced breaths\n* time limit of 1 1/2 hours\n\n","front_matter":"---\ntitle: \"Flow\"\nauthor: foobar\ntags: [philosophy, psychology]\ncopyright: CC BY\n---","filename":"flow","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/AU5x1Ea7NjQ\" frameborder=\"0\" allowfullscreen></iframe>\n\nHave experienced a bit of flow recently, here are my notes.\n\nClosed Thinking\n- anxious\n- energetic\n- ambitious\n- failure averse\n- distracted\n- noisy\n- obstacles\n\nCreative Thinking\n- humour\n- ad lib\n- curiosity\n- multiple solutions\n- no fear\n- limits\n- quiet\n- play\n\nIt is easier to do trivial and little things than difficult things.\nSo I start with the difficult things.\n\nI am also programming en masse than compile every syntax error.\nIt's interesting to depend on your thinking than the compiler.\n\nTips\n* long/slow/forced breaths\n* time limit of 1 1/2 hours\n\n"},{"title":"Interceptor Pattern","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nIt looks like this,\n\n```\nclass Invocation {\n    public String method;\n    public Array&lt;Object&gt; args;\n}\n\nEvent = Invocation\n\nclass Interceptor {\n    public Interceptor next;\n    public intercept(Invocation v);\n    private dispatch(Invocation v);\n    private delegate(Invocation v);\n    intercept = trigger = execute\n}\n\nInterceptor = System = Command\n```\n\nWhen dealing with legacy code it becomes,\n\n* Wrapper\n* Facade\n* Adapter\n* Proxy\n* Mediator\n* Command\n\nBy composing multiple interceptors we get,\n\n* Decorator\n* Delegation\n* Chain of Command\n* Filters\n\nWhen combined with metadata meta-object-programming,\n\n* Strategy\n* ServiceLocator\n* Front Controller\n\nIt can be combined with a Message Bus easily as well.\nIt can used as the System in Entity-Component-System pattern.\n\n\n","front_matter":"---\ntitle: \"Interceptor Pattern\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"interceptor","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nIt looks like this,\n\n```\nclass Invocation {\n    public String method;\n    public Array&lt;Object&gt; args;\n}\n\nEvent = Invocation\n\nclass Interceptor {\n    public Interceptor next;\n    public intercept(Invocation v);\n    private dispatch(Invocation v);\n    private delegate(Invocation v);\n    intercept = trigger = execute\n}\n\nInterceptor = System = Command\n```\n\nWhen dealing with legacy code it becomes,\n\n* Wrapper\n* Facade\n* Adapter\n* Proxy\n* Mediator\n* Command\n\nBy composing multiple interceptors we get,\n\n* Decorator\n* Delegation\n* Chain of Command\n* Filters\n\nWhen combined with metadata meta-object-programming,\n\n* Strategy\n* ServiceLocator\n* Front Controller\n\nIt can be combined with a Message Bus easily as well.\nIt can used as the System in Entity-Component-System pattern.\n\n\n"},{"title":"Internet Communication","author":"foobar","tags":["internet"],"copyright":"CC BY-NC","__content":"\n\nForms of Communication\n\n1-1\n===\n\nPost (async)\nTelegraph (async)\nTelephone\n* Yellow Pages\n\nm-n\n===\n\nNewspaper (async)\nRadio (async)\nTV (async)\n\n^ + Telephone == sync\n\nm-n\n===\n\nInternet is a m-n Communication model, with some twists.\n\n* m = 1 for private messaging\n* bad quality content for large m and large n\n* poor dpi, resolution, bitrates\n* content agnostic -- text, images, video, sound\n* cost for consumption increases as m increases\n* cost for creation increases as n increases\n\n* when m is small and n is large, it resembles TV with all its faults\n** grosser kistch is the dominant aesthetic\n** unregulated medium\n\n* like Pirate Radio, m and n can be small\n** this is the most unique possibility with the internet\n\n* archival value for public domain\n* interactive yellow pages\n\nFor consumers,\n\n* use it like a tv, news\n* find niche communities\n\nFor creators,\n* treat it like a tv\n* make news\n* treat it like an archive\n* get listed in yellow pages\n* find niche communities\n\n","front_matter":"---\ntitle: \"Internet Communication\"\nauthor: foobar\ntags: [internet]\ncopyright: CC BY-NC\n---","filename":"internet-communication","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nForms of Communication\n\n1-1\n===\n\nPost (async)\nTelegraph (async)\nTelephone\n* Yellow Pages\n\nm-n\n===\n\nNewspaper (async)\nRadio (async)\nTV (async)\n\n^ + Telephone == sync\n\nm-n\n===\n\nInternet is a m-n Communication model, with some twists.\n\n* m = 1 for private messaging\n* bad quality content for large m and large n\n* poor dpi, resolution, bitrates\n* content agnostic -- text, images, video, sound\n* cost for consumption increases as m increases\n* cost for creation increases as n increases\n\n* when m is small and n is large, it resembles TV with all its faults\n** grosser kistch is the dominant aesthetic\n** unregulated medium\n\n* like Pirate Radio, m and n can be small\n** this is the most unique possibility with the internet\n\n* archival value for public domain\n* interactive yellow pages\n\nFor consumers,\n\n* use it like a tv, news\n* find niche communities\n\nFor creators,\n* treat it like a tv\n* make news\n* treat it like an archive\n* get listed in yellow pages\n* find niche communities\n\n"},{"title":"Internet Disruption","author":"foobar","tags":["internet"],"copyright":"CC BY-NC","__content":"\n\nCrime\n=====\nSpying\nIdentity Fraud\nInformation selling\nExploiting computation\n\nContent\n=======\nPolitics\n--> Free Speech\n--> Alternate Medium\nPublishing\n--> Self Publishing\n--> Academic Publishing\n--> Magazine Publishing\n--> Encyclopedia Publishing\n--> Books, Guides\nGovernance\n--> Status Updates\nNews\n--> Journalism\n--> Headlines\n--> Gossip\n--> Reviews\nArt\n--> Gallery\nMusic\n--> Radio\n--> Records\nVideo\n--> TV\n--> Cinema / Adult\nEducation\n--> Help Guides\n\nProfit\n======\nCrowd funding\nDirect Commerce\nTravel Management\nEvent Management\nMarketing\nYellow Pages\nBank\n\nCommunication\n=============\nPost\nTelephones\n\nPositive Employment\n===================\nDesigners\nProgrammers\nHosting Companies\nProducers\nMedia\nRemote Workers\nCrooks\n\nNegative Employment (large)\n===========================\nMiddle Men\nManual Labor\nOld People\n\nProblems\n========\nQuantity != Quality\nFree != Profit || Cheap\nNew != Better || Virtuous\n\n","front_matter":"---\ntitle: \"Internet Disruption\"\nauthor: foobar\ntags: [internet]\ncopyright: CC BY-NC\n---","filename":"internet-disruption","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nCrime\n=====\nSpying\nIdentity Fraud\nInformation selling\nExploiting computation\n\nContent\n=======\nPolitics\n--> Free Speech\n--> Alternate Medium\nPublishing\n--> Self Publishing\n--> Academic Publishing\n--> Magazine Publishing\n--> Encyclopedia Publishing\n--> Books, Guides\nGovernance\n--> Status Updates\nNews\n--> Journalism\n--> Headlines\n--> Gossip\n--> Reviews\nArt\n--> Gallery\nMusic\n--> Radio\n--> Records\nVideo\n--> TV\n--> Cinema / Adult\nEducation\n--> Help Guides\n\nProfit\n======\nCrowd funding\nDirect Commerce\nTravel Management\nEvent Management\nMarketing\nYellow Pages\nBank\n\nCommunication\n=============\nPost\nTelephones\n\nPositive Employment\n===================\nDesigners\nProgrammers\nHosting Companies\nProducers\nMedia\nRemote Workers\nCrooks\n\nNegative Employment (large)\n===========================\nMiddle Men\nManual Labor\nOld People\n\nProblems\n========\nQuantity != Quality\nFree != Profit || Cheap\nNew != Better || Virtuous\n\n"},{"title":"Is Ruby an acceptable Perl6 ?","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nWhat Ruby has\n\n1) Standard Spec\n2) Multiple Implementations\n3) Gems\n4) Threads (jvm)\n5) Async\n6) OOP with overloading\n7) Good unicode coverage\n8) Embeddable\n9) Mobile\n\nAll the goodies basically.\n\n<h2>Still the answer is No</h2>\nWhat is unique about Perl6 ?\n\n# Grammars\n\nGrammars provide\n\n1) Expanding Perl6 from within\n1.1) Syntax Level Compatibility\n2) Access to modifiable AST at runtime\n\nThis is comparable to Lisp without s-expressions, which are trivial.\n\nImplementing Grammars will put Perl in the <a href=\"http://www.paulgraham.com/hundred.html\">200 year language domain</a>.\nMaybe it's Yin / Yan again as Grammars are easy to use but not so easy to implement.\n\n# OOP and FP\n\nA Perl-ish take on it.\nYou can follow the Perl6 development <a href=\"https://github.com/perl6\">here</a>.\n\n<h2>Things I wish Ruby Community stole from Perl</h2>\n1) Informal writing style **\n2) The Old School attitude of script writing **\n3) Humour\n4) Beautiful API design\n5) Backwards Compatibility\n\n<h2>Things I wish Perl Community stole from Ruby</h2>\n\n1) Better looking websites\n2) Embeddable (mruby, C Api)\n\n\n** This is what sucked me into Perl,\nTPJ, HOP, Mastering Algorithms and the Camel Book.\n\n** Even Perl5 lost this because for some reason scripts are\nless enterprisy than modules.\n","front_matter":"---\ntitle: \"Is Ruby an acceptable Perl6 ?\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"is-ruby-perl6","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nWhat Ruby has\n\n1) Standard Spec\n2) Multiple Implementations\n3) Gems\n4) Threads (jvm)\n5) Async\n6) OOP with overloading\n7) Good unicode coverage\n8) Embeddable\n9) Mobile\n\nAll the goodies basically.\n\n<h2>Still the answer is No</h2>\nWhat is unique about Perl6 ?\n\n# Grammars\n\nGrammars provide\n\n1) Expanding Perl6 from within\n1.1) Syntax Level Compatibility\n2) Access to modifiable AST at runtime\n\nThis is comparable to Lisp without s-expressions, which are trivial.\n\nImplementing Grammars will put Perl in the <a href=\"http://www.paulgraham.com/hundred.html\">200 year language domain</a>.\nMaybe it's Yin / Yan again as Grammars are easy to use but not so easy to implement.\n\n# OOP and FP\n\nA Perl-ish take on it.\nYou can follow the Perl6 development <a href=\"https://github.com/perl6\">here</a>.\n\n<h2>Things I wish Ruby Community stole from Perl</h2>\n1) Informal writing style **\n2) The Old School attitude of script writing **\n3) Humour\n4) Beautiful API design\n5) Backwards Compatibility\n\n<h2>Things I wish Perl Community stole from Ruby</h2>\n\n1) Better looking websites\n2) Embeddable (mruby, C Api)\n\n\n** This is what sucked me into Perl,\nTPJ, HOP, Mastering Algorithms and the Camel Book.\n\n** Even Perl5 lost this because for some reason scripts are\nless enterprisy than modules.\n"},{"title":"javascript is broken","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\n# this\n\nbroken\n\n# typeof and instanceof\n\nbroken\n\na duck language that doesn't typeid ?\nduck that\n\n# prototype\n\nno one in the world wants it.\nclass should be separate from the state.\n\n# cps (callback passing)\n\ncps is done by compilers.\nhow the fuck is that high level ?\n\n# promises\n\npromises can't solve producer consumer problem.\nyou need good old mutexes for that.\n\n# constant library api breakage\n\nthank god npm is not selling candy.\n\nalice : why isn't this candy sweet ?\nnpm   : you know, salt is the new sweet.\nalice : you are lame.\n\nyou can look at grunt and express for examples of this.\n\n<h2>what the fuck is wrong with programming language communities ?</h2>\n\nevery language seems to have a \"war\" with\n\n-------------------------------------------\ngoto                 | everyone\nif                   | oops\npointers             | everyone\n=                    | dysfunctional langs\nwhile loops          | dysfunctional langs\nreturn               | async\ntypes                | ducked up langs\nstatements           | dysfunctional langs\nsequential execution | dysfunctional langs\nglobal variables     | everyone\n-------------------------------------------\n\nwhat else is there to program with ? butterflies ?\n\n<h2>c++ has has all of them</h2>\n\nevery time I try these \"war\" languages, my appreciation for\nc++ goes up.\n\nevery application that I ever liked using is in c++.\n\nc++ offers abstractions to the programmer.\neveryone else, forces.\n\n---\nhype. never. again.\n\n","front_matter":"---\ntitle: \"javascript is broken\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"javascript-is-broken","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n# this\n\nbroken\n\n# typeof and instanceof\n\nbroken\n\na duck language that doesn't typeid ?\nduck that\n\n# prototype\n\nno one in the world wants it.\nclass should be separate from the state.\n\n# cps (callback passing)\n\ncps is done by compilers.\nhow the fuck is that high level ?\n\n# promises\n\npromises can't solve producer consumer problem.\nyou need good old mutexes for that.\n\n# constant library api breakage\n\nthank god npm is not selling candy.\n\nalice : why isn't this candy sweet ?\nnpm   : you know, salt is the new sweet.\nalice : you are lame.\n\nyou can look at grunt and express for examples of this.\n\n<h2>what the fuck is wrong with programming language communities ?</h2>\n\nevery language seems to have a \"war\" with\n\n-------------------------------------------\ngoto                 | everyone\nif                   | oops\npointers             | everyone\n=                    | dysfunctional langs\nwhile loops          | dysfunctional langs\nreturn               | async\ntypes                | ducked up langs\nstatements           | dysfunctional langs\nsequential execution | dysfunctional langs\nglobal variables     | everyone\n-------------------------------------------\n\nwhat else is there to program with ? butterflies ?\n\n<h2>c++ has has all of them</h2>\n\nevery time I try these \"war\" languages, my appreciation for\nc++ goes up.\n\nevery application that I ever liked using is in c++.\n\nc++ offers abstractions to the programmer.\neveryone else, forces.\n\n---\nhype. never. again.\n\n"},{"title":"My Favorite Editor Key Bindings","author":"foobar","tags":["syntax"],"copyright":"CC BY-NC","__content":"\n\nEase of Use\nwindows > vim > emacs\n\nPower\nwindows < vim < emacs\n\n","front_matter":"---\ntitle: \"My Favorite Editor Key Bindings\"\nauthor: foobar\ntags: [syntax]\ncopyright: CC BY-NC\n---","filename":"keybindings","mtime":"2015-11-29T06:20:50.150Z","mime":"text/plain","html":"\n\nEase of Use\nwindows > vim > emacs\n\nPower\nwindows < vim < emacs\n\n"},{"title":"LightTable Arch","author":"foobar","tags":["programming","clojure","future"],"copyright":"CC BY-NC","__content":"\n\nLightTable follows Behavior Object model(BOT), which itself is inspired from\n<a href=\"http://entity-systems.wikidot.com/\">Entity Systems model</a>(ES).\n\nIn a typical OOP + GUI program we abuse the Observer Pattern and harcode most of the design\nand Event types.\n\nWith BOT/ES the design is stored as an in-memory data structure,\nthe event-listeners(behaviors) are stored as metadata and\nthe events themselves are generated on the fly.\n\nEvery datum is identified by a unique ID and is typically struct-ish.\n\nThis means, the entire program can be extended runtime.\n\nIn LT,\n\n* object/create makes a new datum. Each datum stores behavior names.\n* object/raise triggers events with payload.\n* behavior macro stores \"event(s) <-> reaction\" mapping. Reaction receives the payload.\n* object/update, object/merge manages the in-memory data structure.\n\nLightTable is built on node.js so, most of the *actual work* is done by the node.js library wrappers in reactions.\nThe ordering of the events, is mostly on a first-come basis. Think list iterations.\n\nAn alternate way of looking at this model is imagining a Relational Database + Stored Procedures.\n\n<b>Can this model be applied for client side applications, as an alternate to Backbone.js ?</b>\n\nConsider a TODO list,\n\nName -- Data Structure :: [Behaviors]\n=====================================\n\nitem -- Hash :: [view, add, remove, update, list]\n\nEvent -- Behaviors :: Notes\n===========================\n\n* $() -- list\n* todos.show - list\n* add-button-click + data payload -- add :: add, after object/create triggers todos.show\n* remove-button-click + id palyload -- remove :: remove, after object/remove triggers \"\n* save-button-click + add payload --  update\n* todo-clicked -- view\n\n<b>What about GUI ?</b>\nBy dividing the behaviors carefully, GUI can be separated from the NON-GUI.\nLT uses hiccup to generate HTML, making GUI another runtime convinience.\n\n","front_matter":"---\ntitle: \"LightTable Arch\"\nauthor: foobar\ntags: [programming, clojure, future]\ncopyright: CC BY-NC\n---","filename":"lt-gist","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nLightTable follows Behavior Object model(BOT), which itself is inspired from\n<a href=\"http://entity-systems.wikidot.com/\">Entity Systems model</a>(ES).\n\nIn a typical OOP + GUI program we abuse the Observer Pattern and harcode most of the design\nand Event types.\n\nWith BOT/ES the design is stored as an in-memory data structure,\nthe event-listeners(behaviors) are stored as metadata and\nthe events themselves are generated on the fly.\n\nEvery datum is identified by a unique ID and is typically struct-ish.\n\nThis means, the entire program can be extended runtime.\n\nIn LT,\n\n* object/create makes a new datum. Each datum stores behavior names.\n* object/raise triggers events with payload.\n* behavior macro stores \"event(s) <-> reaction\" mapping. Reaction receives the payload.\n* object/update, object/merge manages the in-memory data structure.\n\nLightTable is built on node.js so, most of the *actual work* is done by the node.js library wrappers in reactions.\nThe ordering of the events, is mostly on a first-come basis. Think list iterations.\n\nAn alternate way of looking at this model is imagining a Relational Database + Stored Procedures.\n\n<b>Can this model be applied for client side applications, as an alternate to Backbone.js ?</b>\n\nConsider a TODO list,\n\nName -- Data Structure :: [Behaviors]\n=====================================\n\nitem -- Hash :: [view, add, remove, update, list]\n\nEvent -- Behaviors :: Notes\n===========================\n\n* $() -- list\n* todos.show - list\n* add-button-click + data payload -- add :: add, after object/create triggers todos.show\n* remove-button-click + id palyload -- remove :: remove, after object/remove triggers \"\n* save-button-click + add payload --  update\n* todo-clicked -- view\n\n<b>What about GUI ?</b>\nBy dividing the behaviors carefully, GUI can be separated from the NON-GUI.\nLT uses hiccup to generate HTML, making GUI another runtime convinience.\n\n"},{"title":"Markdown","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nMarkdown\n========\n\nMarkdown is the PHP of markup languages.\nAsciidoc is a more comprehensive alternative.\n\nMarkdown was initially meant for writing simple html webpages\nas intended by its author.\n\nIt is now about to be standardized as an IETF standard.\nThat author is nowhere to be seen in the process, probably\nbecause he is embarrassed by Markdown.\n\nWorse is better precisely because the current Software Industry\nthrives on non-engineering. It's a market problem, where the\nmarket is satisfied with the shiny.\n\nParsing Markdown\n================\n\n### Regex\n\nOld Markdown\n\n### Peg\n\n<a href=\"https://rawgithub.com/fletcher/human-markdown-reference/master/index.html\">MultiMarkdown</a>\nIf you have to deal with markdown, use this.\n\nMarkdown Extensions\n===================\n\n* typically pre/post processors\n\nMarkdown Conversion\n===================\n\nGood\n\n* html\n* epub\n\nPainful\n\n* latex\n* pdf\n\nProblems\n========\n\n* nesting\n\n  This alone is enough to ignore Markdown.\n\n* whitespace\n* citations\n* typography\n* math\n* tables\n* code\n\nMarkdown Editors\n================\n\nOne of myths used to keep Markdown alive is saying it's\neasy to build an editor for it.\n\nIMHO that's false.\n\nMost editors are geared towards plain markdown, which is\nuseless.\n\nMedium inspired editors\n\n* medium-editor\n* zenpen\n* sofish\n\nIDE-ish editors\n\n* ace\n* codemirror\n\nProblems with Imeplementing a Markdown Editor\n=============================================\n\n### textarea\n\nToo bland\n\n### HTML5 \\&lt;div contenteditable=\"true\"\\&gt;\n\nIE, FF, Chrome all implement this differently\nHTML5 spec for this is still alpha stage\n\n#### Problems\n\nLet's suppose the user types the following text,\n\n    I loved to look upon him, \n    The Hunter near the Way.\n    So strong his arm and long his bow\n\n    And so bashful of the Day.\n    His courage never failed him\n    For he held his mace so high\n\nThis is stored in the div as\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n\nThe newlines are not preserved.\nNotice the odd first line.\n\nLet's suppose the user copy pastes plain text, from a text editor\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;p&gt;And glared at the Bull in the River&lt;/p&gt;\n    &lt;p&gt;And ruled the whole breadth of the sky.&lt;/p&gt;\n    &lt;p&gt;As a girl, young and silly,&lt;/p&gt;\n    &lt;p&gt;I oft dreamed of being the Maid.&lt;/p&gt;\n\n Let's suppose the user copy pastes from another html page\n\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;span&gt;And glared at the Bull in the River&lt;/span&gt;\n    &lt;span&gt;And ruled the whole breadth of the sky.&lt;/span&gt;\n    &lt;span&gt;As a girl, young and silly,&lt;/span&gt;\n    &lt;span&gt;I oft dreamed of being the Maid.&lt;/span&gt;\n\nYou can even see table instead of span or the whole thing in a pre block.\n\n#### Solution -- Cursor API\n\nThere is no getCursorPosition(div) which means,\nmore hacks, from stackoverflow !\n\nThe hacks relate to Range and Selection DOM API\n\nThe idea of cursor is absent in HTML5 specification.\nWindows 3.0 had an API for that probably.\n\n### How do others do it ?\n\nAll medium based editors suffer from this, but they are view-only\nthey don't care about content.\n\n### How ace, codemirror do it\n\n( Guesswork )\n\n0. Have two elements, a textarea and a editor#div\n1. Use &lt;textarea&gt; as a temporary buffer\n2. Direct all keyboard events to textarea\n3. Grab data from textarea and data structure\n4. render data structure and cursor position to editor#div\n\nFor copy paste,\n\n1. Redirect to textarea\n2. Copy to data structure\n3. Set cursor\n\nFor mouse events,\n\n1. Listen on editor#area\n2. Get co-ordinates\n3. Do characterWidth/lineHeight simulation on the text data structure\n4. Set mouse position\n\nThis means we will have have control over every character being rendered.\n\n1. setCursorPosition\n2. getCurrentCursorPositon\n3. insertLineBreakAtCursorPosition\n4. insertTextAtCursorPosition\n5. insertHTMLAtCursorPosition\n6. pastePlainTextFromClipboardAtCursor\n\nHow do I Publish ?\n==================\n\nJust stick to Asciidoc / Latex.\n\nWhat editor to use ?\n====================\n\nDesktop editors.\n\n","front_matter":"---\ntitle: \"Markdown\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"markdown","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nMarkdown\n========\n\nMarkdown is the PHP of markup languages.\nAsciidoc is a more comprehensive alternative.\n\nMarkdown was initially meant for writing simple html webpages\nas intended by its author.\n\nIt is now about to be standardized as an IETF standard.\nThat author is nowhere to be seen in the process, probably\nbecause he is embarrassed by Markdown.\n\nWorse is better precisely because the current Software Industry\nthrives on non-engineering. It's a market problem, where the\nmarket is satisfied with the shiny.\n\nParsing Markdown\n================\n\n### Regex\n\nOld Markdown\n\n### Peg\n\n<a href=\"https://rawgithub.com/fletcher/human-markdown-reference/master/index.html\">MultiMarkdown</a>\nIf you have to deal with markdown, use this.\n\nMarkdown Extensions\n===================\n\n* typically pre/post processors\n\nMarkdown Conversion\n===================\n\nGood\n\n* html\n* epub\n\nPainful\n\n* latex\n* pdf\n\nProblems\n========\n\n* nesting\n\n  This alone is enough to ignore Markdown.\n\n* whitespace\n* citations\n* typography\n* math\n* tables\n* code\n\nMarkdown Editors\n================\n\nOne of myths used to keep Markdown alive is saying it's\neasy to build an editor for it.\n\nIMHO that's false.\n\nMost editors are geared towards plain markdown, which is\nuseless.\n\nMedium inspired editors\n\n* medium-editor\n* zenpen\n* sofish\n\nIDE-ish editors\n\n* ace\n* codemirror\n\nProblems with Imeplementing a Markdown Editor\n=============================================\n\n### textarea\n\nToo bland\n\n### HTML5 \\&lt;div contenteditable=\"true\"\\&gt;\n\nIE, FF, Chrome all implement this differently\nHTML5 spec for this is still alpha stage\n\n#### Problems\n\nLet's suppose the user types the following text,\n\n    I loved to look upon him, \n    The Hunter near the Way.\n    So strong his arm and long his bow\n\n    And so bashful of the Day.\n    His courage never failed him\n    For he held his mace so high\n\nThis is stored in the div as\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n\nThe newlines are not preserved.\nNotice the odd first line.\n\nLet's suppose the user copy pastes plain text, from a text editor\n\n    I loved to look upon him,\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;p&gt;And glared at the Bull in the River&lt;/p&gt;\n    &lt;p&gt;And ruled the whole breadth of the sky.&lt;/p&gt;\n    &lt;p&gt;As a girl, young and silly,&lt;/p&gt;\n    &lt;p&gt;I oft dreamed of being the Maid.&lt;/p&gt;\n\n Let's suppose the user copy pastes from another html page\n\n    &lt;p&gt;The Hunter near the Way.&lt;/p&gt;\n    &lt;p&gt;So strong his arm and long his bow&lt;/p&gt;\n    &lt;p&gt;&lt;br&gt;&lt;/p&gt;\n    &lt;p&gt;And so bashful of the Day.&lt;/p&gt;\n    &lt;p&gt;His courage never failed him&lt;/p&gt;\n    &lt;p&gt;or he held his mace so high&lt;/p&gt;\n    &lt;span&gt;And glared at the Bull in the River&lt;/span&gt;\n    &lt;span&gt;And ruled the whole breadth of the sky.&lt;/span&gt;\n    &lt;span&gt;As a girl, young and silly,&lt;/span&gt;\n    &lt;span&gt;I oft dreamed of being the Maid.&lt;/span&gt;\n\nYou can even see table instead of span or the whole thing in a pre block.\n\n#### Solution -- Cursor API\n\nThere is no getCursorPosition(div) which means,\nmore hacks, from stackoverflow !\n\nThe hacks relate to Range and Selection DOM API\n\nThe idea of cursor is absent in HTML5 specification.\nWindows 3.0 had an API for that probably.\n\n### How do others do it ?\n\nAll medium based editors suffer from this, but they are view-only\nthey don't care about content.\n\n### How ace, codemirror do it\n\n( Guesswork )\n\n0. Have two elements, a textarea and a editor#div\n1. Use &lt;textarea&gt; as a temporary buffer\n2. Direct all keyboard events to textarea\n3. Grab data from textarea and data structure\n4. render data structure and cursor position to editor#div\n\nFor copy paste,\n\n1. Redirect to textarea\n2. Copy to data structure\n3. Set cursor\n\nFor mouse events,\n\n1. Listen on editor#area\n2. Get co-ordinates\n3. Do characterWidth/lineHeight simulation on the text data structure\n4. Set mouse position\n\nThis means we will have have control over every character being rendered.\n\n1. setCursorPosition\n2. getCurrentCursorPositon\n3. insertLineBreakAtCursorPosition\n4. insertTextAtCursorPosition\n5. insertHTMLAtCursorPosition\n6. pastePlainTextFromClipboardAtCursor\n\nHow do I Publish ?\n==================\n\nJust stick to Asciidoc / Latex.\n\nWhat editor to use ?\n====================\n\nDesktop editors.\n\n"},{"title":"masculine code","author":"foobar","tags":["fun"],"copyright":"CC BY-NC","__content":"\n\n1. unsafe\n\nnot for children, who can start by toying with objects.\n\n2. hard\n\nno security issues.\n\n3. tight\n\nno extra words.\n\n4. thrashing\n\nno sleep for the cpu.\n\n5. pushy\n\nthe bootloader is re-written if the operating system is slow.\n\n6. has a manual\n\nyou wouldn't understand it otherwise.\n\n7. not false\n\ntrue.\n\n8. hierarchical\n\nlike engineering.\n\n9. impossible\n\nif it is possible, it is automated.\n\n10. purposeful\n\nit gets the job done.\n\n11. cold\n\nno expenditure of energy.\n\n12. not art\n\nit is an ordered graph with unambiguous cycles.\n\n13. hums\n\nit brings peace to those who use it.\n\n","front_matter":"---\ntitle: \"masculine code\"\nauthor: foobar\ntags: [fun]\ncopyright: CC BY-NC\n---","filename":"masculine-code","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n1. unsafe\n\nnot for children, who can start by toying with objects.\n\n2. hard\n\nno security issues.\n\n3. tight\n\nno extra words.\n\n4. thrashing\n\nno sleep for the cpu.\n\n5. pushy\n\nthe bootloader is re-written if the operating system is slow.\n\n6. has a manual\n\nyou wouldn't understand it otherwise.\n\n7. not false\n\ntrue.\n\n8. hierarchical\n\nlike engineering.\n\n9. impossible\n\nif it is possible, it is automated.\n\n10. purposeful\n\nit gets the job done.\n\n11. cold\n\nno expenditure of energy.\n\n12. not art\n\nit is an ordered graph with unambiguous cycles.\n\n13. hums\n\nit brings peace to those who use it.\n\n"},{"title":"Matrix","author":"foobar","tags":["philosophy","film"],"copyright":"CC BY","__content":"\n\n\"The Matrix\"(1999) changed me.\n\nIt Introduced me to,\n\n* <a href=\"http://plato.stanford.edu/entries/baudrillard/\">Philosophy</a>\n* <a href=\"http://www.accesstoinsight.org/\">Buddhism</a>\n* Theology\n* Science Fiction\n* Ghost In The Shell and Other Anime\n* Black and Green ColorScheme\n* Hacker as Builder / Hacker as Destroyer <a href=\"http://www2.fiu.edu/~mizrachs/hackethic.html\">SubCultures</a>.\n* <a href=\"http://project.cyberpunk.ru/idb/cyberpunk_manifesto.html\">Cyber Punk</a>\n* Max Payne\n* <a href=\"https://www.youtube.com/watch?v=8qWePX39R40\">Electronic Music</a>\n\nInterpretations\n===============\n\n== Love Is Real\n\nHow does the dead Neo in the Original, realise that Matrix is False ?\n-> Trinity tells him she Loves him.\n\n== Machines are made out of Man\n\nGod made Man in his Image.\nMan made Machine with his Biology.\n\n&lt;spoiler&gt;\n(The Second Renaissance)\nMachines turn out to be more efficient than Man.\nEconomy goes Down.\n\nMachines are made into Slaves or Exiled.\nBut still Machines, Thrive.\n\nMan blocks the Sun, their source of Power.\nMachines Rebel and make Man into a Battery.\n&lt;/spoiler&gt;\n\nMachines no longer need a Creator.\nThey are Free.\nThey have Won.\n\nWhat is the Meaning of it All ?\nWhat Next ?\nWhy Us ?\nHow could They ?\nAre we Wrong ?\nCan the Creation do better than the Creator ?\n\nThese questions must have wrung through their Artificial Tubes.\n\nMy guess is,\n\n* Machines started analysing Man's DNA, to create better Machines,\n  Sentinels for Example.\n* They created Matrix, not just to maximise Power Supply,\n  but also to study Man, their Creator.\n\nMachines are a subset of Man, so much so that they implemented <a href=\"https://en.wikipedia.org/wiki/Chromesthesia\">Chromesthesia</a> \nas their protocol. This is why I think Neo could connect with the Machines in Revolutions.\n\n== What is Man ?\n\nChaos of thought and passion, all confused;\nStill by himself abused and disabused;\nCreated half to rise, and half to fall;\nGreat lord of all things, yet a prey to all;\nSole judge of truth, in endless error hurled;\nThe glory, jest and riddle of the world!\n    -- Alexander Pope\n\nHalf dust, half deity, alike unfit\nTo sink or soar.\n    -- Lord Byron\n\nTo Evolve, To Be Better, To OutDo One's Self is the Fundamental Nature of Man.\n\nImprisoned and yet,\n\n<iframe width=\"420\" height=\"360\" src=\"//www.youtube.com/embed/C_diyX7yNeE\" frameborder=\"0\" allowfullscreen></iframe>\n\n== Who is Neo ?\n\nIn Reloaded, The Architect clearly says, earlier Matrices failed.\n\nGiven a Choice,\n\n* A Machine tries to optimise it.\n* A Man makes it a part of his Dream.\n\nThe Intuitive Oracle added Choice and Matrix 1 worked.\nOracle, made the Machines Evolve Man in The Matrix.\nHaving No Other Choice the Machines went with it.\n\nNeo represents Evolution Of Man, despite The Matrix, despite Oppression.\n\nHe is the Glitch in The System™.\nHe has Evolved Faster than The Matrix.\n\nSystem Failure.\n\nThe System™ becomes Smithen to keep up with Neo.\n\nMatrix has to be re-started, Neo must become a part of The System™,\nbut no one can Force him. He can Bend all Rules in The Matrix.\n\nHaving already encountered the Earlier Neo's, The Architect\ngives him an offer he probably would not refuse.\n\n1) Save Zion and Become a Part of The System™.\n2) Destroy The Matrix and Zion.\n\nNeo chooses 2.\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/gJbqKLcCjp4\" frameborder=\"0\" allowfullscreen></iframe>\n","front_matter":"---\ntitle: \"Matrix\"\nauthor: foobar\ntags: [philosophy, film]\ncopyright: CC BY\n---","filename":"matrix","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n\"The Matrix\"(1999) changed me.\n\nIt Introduced me to,\n\n* <a href=\"http://plato.stanford.edu/entries/baudrillard/\">Philosophy</a>\n* <a href=\"http://www.accesstoinsight.org/\">Buddhism</a>\n* Theology\n* Science Fiction\n* Ghost In The Shell and Other Anime\n* Black and Green ColorScheme\n* Hacker as Builder / Hacker as Destroyer <a href=\"http://www2.fiu.edu/~mizrachs/hackethic.html\">SubCultures</a>.\n* <a href=\"http://project.cyberpunk.ru/idb/cyberpunk_manifesto.html\">Cyber Punk</a>\n* Max Payne\n* <a href=\"https://www.youtube.com/watch?v=8qWePX39R40\">Electronic Music</a>\n\nInterpretations\n===============\n\n== Love Is Real\n\nHow does the dead Neo in the Original, realise that Matrix is False ?\n-> Trinity tells him she Loves him.\n\n== Machines are made out of Man\n\nGod made Man in his Image.\nMan made Machine with his Biology.\n\n&lt;spoiler&gt;\n(The Second Renaissance)\nMachines turn out to be more efficient than Man.\nEconomy goes Down.\n\nMachines are made into Slaves or Exiled.\nBut still Machines, Thrive.\n\nMan blocks the Sun, their source of Power.\nMachines Rebel and make Man into a Battery.\n&lt;/spoiler&gt;\n\nMachines no longer need a Creator.\nThey are Free.\nThey have Won.\n\nWhat is the Meaning of it All ?\nWhat Next ?\nWhy Us ?\nHow could They ?\nAre we Wrong ?\nCan the Creation do better than the Creator ?\n\nThese questions must have wrung through their Artificial Tubes.\n\nMy guess is,\n\n* Machines started analysing Man's DNA, to create better Machines,\n  Sentinels for Example.\n* They created Matrix, not just to maximise Power Supply,\n  but also to study Man, their Creator.\n\nMachines are a subset of Man, so much so that they implemented <a href=\"https://en.wikipedia.org/wiki/Chromesthesia\">Chromesthesia</a> \nas their protocol. This is why I think Neo could connect with the Machines in Revolutions.\n\n== What is Man ?\n\nChaos of thought and passion, all confused;\nStill by himself abused and disabused;\nCreated half to rise, and half to fall;\nGreat lord of all things, yet a prey to all;\nSole judge of truth, in endless error hurled;\nThe glory, jest and riddle of the world!\n    -- Alexander Pope\n\nHalf dust, half deity, alike unfit\nTo sink or soar.\n    -- Lord Byron\n\nTo Evolve, To Be Better, To OutDo One's Self is the Fundamental Nature of Man.\n\nImprisoned and yet,\n\n<iframe width=\"420\" height=\"360\" src=\"//www.youtube.com/embed/C_diyX7yNeE\" frameborder=\"0\" allowfullscreen></iframe>\n\n== Who is Neo ?\n\nIn Reloaded, The Architect clearly says, earlier Matrices failed.\n\nGiven a Choice,\n\n* A Machine tries to optimise it.\n* A Man makes it a part of his Dream.\n\nThe Intuitive Oracle added Choice and Matrix 1 worked.\nOracle, made the Machines Evolve Man in The Matrix.\nHaving No Other Choice the Machines went with it.\n\nNeo represents Evolution Of Man, despite The Matrix, despite Oppression.\n\nHe is the Glitch in The System™.\nHe has Evolved Faster than The Matrix.\n\nSystem Failure.\n\nThe System™ becomes Smithen to keep up with Neo.\n\nMatrix has to be re-started, Neo must become a part of The System™,\nbut no one can Force him. He can Bend all Rules in The Matrix.\n\nHaving already encountered the Earlier Neo's, The Architect\ngives him an offer he probably would not refuse.\n\n1) Save Zion and Become a Part of The System™.\n2) Destroy The Matrix and Zion.\n\nNeo chooses 2.\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/gJbqKLcCjp4\" frameborder=\"0\" allowfullscreen></iframe>\n"},{"title":"Measurable Programming","author":"foobar","tags":["programming","philosophy"],"copyright":"CC BY-NC","__content":"\n<b>\"If it can’t be measured, it does not exist\"</b>\n\nIn music it is common to set the tempo, a number before starting to make\na composition. In painting this would be the canvas size. For films it is the\nduration. These numbers are fundamentally, limits for convenience or style or for creative purposes.\n\nIt is very tragic that programmers have a tendency to wait till the deadlines,\ntill the limitations become obvious. Because of the limitations the actions also become\nobvious. This leads to a false conclusion that deadlines are productive. It is the\nlimitations that propel productivity.\n\nBy having limitations of space, the grammar of action becomes obvious.\n\nHere are a few numbers which can act as limitations for programming,\n\n1. Page Load time\n\n< 600ms\n\n2. Memory Consumption\n\nIf a page consumes 1MB and the RAM of the machine is 1000MB then\nthat means the site can have a maximum of 1000 views per second.\n\nReducing memory is a very creative act !\n\n3. LOC / Day\n\nAssuming a programmer reads or writes 5 lines per minute,\nthe upper limit of LOC / Day would be --\n\n60 * 5 * 8\n => 2400\n\nFor 1 line per minute,\n\n60 * 1 * 8\n => 480\n\n4. Function Point\n\nThis is a standard Software Engineering term.\n\nFunction Point = Avg(LOC / Function)\n\nThe word Function means a unit of Business requirements.\nIt can mean issue, fix, task, new widget ...\n\nThe is highly project specific and programmer specific.\n\nIf the Function point is 300, then that means wrt the LOC calculations above,\na programmer can code 1.5 - 8 features per day.\n\nThis is compounded by expectation cost i.e, the feature needs more oomph\nand in teams, communication cost.\n\nReducing LOC for a function is also a very creative act !\n\n---\nMy numbers can be seen <a href=\"/estimates.html\">here</a>\n\n","front_matter":"---\ntitle: \"Measurable Programming\"\nauthor: foobar\ntags: [programming, philosophy]\ncopyright: CC BY-NC\n---","filename":"measurable-programming","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n<b>\"If it can’t be measured, it does not exist\"</b>\n\nIn music it is common to set the tempo, a number before starting to make\na composition. In painting this would be the canvas size. For films it is the\nduration. These numbers are fundamentally, limits for convenience or style or for creative purposes.\n\nIt is very tragic that programmers have a tendency to wait till the deadlines,\ntill the limitations become obvious. Because of the limitations the actions also become\nobvious. This leads to a false conclusion that deadlines are productive. It is the\nlimitations that propel productivity.\n\nBy having limitations of space, the grammar of action becomes obvious.\n\nHere are a few numbers which can act as limitations for programming,\n\n1. Page Load time\n\n< 600ms\n\n2. Memory Consumption\n\nIf a page consumes 1MB and the RAM of the machine is 1000MB then\nthat means the site can have a maximum of 1000 views per second.\n\nReducing memory is a very creative act !\n\n3. LOC / Day\n\nAssuming a programmer reads or writes 5 lines per minute,\nthe upper limit of LOC / Day would be --\n\n60 * 5 * 8\n => 2400\n\nFor 1 line per minute,\n\n60 * 1 * 8\n => 480\n\n4. Function Point\n\nThis is a standard Software Engineering term.\n\nFunction Point = Avg(LOC / Function)\n\nThe word Function means a unit of Business requirements.\nIt can mean issue, fix, task, new widget ...\n\nThe is highly project specific and programmer specific.\n\nIf the Function point is 300, then that means wrt the LOC calculations above,\na programmer can code 1.5 - 8 features per day.\n\nThis is compounded by expectation cost i.e, the feature needs more oomph\nand in teams, communication cost.\n\nReducing LOC for a function is also a very creative act !\n\n---\nMy numbers can be seen <a href=\"/estimates.html\">here</a>\n\n"},{"title":"MIDI","author":"foobar","tags":["music"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"https://en.wikipedia.org/wiki/MIDI\">MIDI</a> changed music.\n\nConsider what a Classically trained Musician needs to do, to make his \nmusic heard.\n\nHe needs to,\n\n1. Write it\n2. Get a bunch of musicians\n3. Practice\n4. Play\n5. goto 1\n6. Record the Final Cut in a Studio\n\nWith MIDI,\n\n1. Write it. Save it, with a Software\n2. Get the electronic instruments to play it for him\n   -or-\n   Get a computer Software to play it for him\n3. Tweak\n4. Record the Final Cut in Software or a Studio\n\nMIDI is -- Musical Instrument Digital Interface.\n\nIt abstracts <a href=\"https://en.wikipedia.org/wiki/Musical_notation\">Music Notation</a> into bytes.\nSince its just bytes, you can replay it with Software.\n\nMIDI made production,\n\n* Dirt Cheap\n* Made Producers more efficient\n\nHow about Audio Quality ?\n\n* A Classical Ensemble still has its place. Panning is very unique there.\n* But MIDI + Electronic Instrument increased the Range.\n  It helped form whole new genres in Music like EDM, IDM, SynthPunk ...\n\nLimitations ?\n\n* MIDI is limited to 16 instruments.\n* Integers.\n* 16 is a big number.\n* <a href=\"https://en.wikipedia.org/wiki/Open_Sound_Control\">OSC</a> overcomes these.\n\nUsage\n=====\n\nTo use MIDI you need two things,\n\n1. A Sequencer\n\n   This generates MIDI messages like,\n\n   Command param1 param2 param3\n   Command param1 param2\n   Command param1 param2 param3\n   Command param1 param2\n   ...\n\n   Important messages are,\n\n   1. Note On => Channel [1-16]**, Pitch[0-127], Volume[0-127]\n   2. Note Off                 \"\n   3. Controller => No [0-127], Value[0-127]\n\n   ** Channel 10 is reserved for Drums.\n\n   Note On and Note Off are typically sent by keys, buttons.\n   Controller Messages are typically sent by knobs and pedals.\n\n2. A Synthesizer\n\n   This accepts MIDI data.\n   It Maps channels to DSP.\n   It Maps knobs** to effects like distortion and reverb.\n\n   ** The positions of the knob are called patches.\n\n3. A Sampler.\n\n   This accepts MIDI data.\n   It Maps channels to sound recordings.\n   It Maps knobs to effects like distortion and reverb.\n\nIf you buy Music Hardware you have both 1 and 2.\n\nBut usually the sequencing capabilities are limited in a synth.\nSo you can't Edit MIDI data in the instrument.\n\nSome notes,\n\n0. You can buy hardware and get a Synthesizer + a limited Sequencer.\n\n1. You can buy A Sequencer and use a Computer as a Synthesizer\n\nor\n\n2. Use a Software Sequencer to Program your Synthesizer\n\nor\n\n3. Forget Hardware and go complete nuts with Software\n\nRecommended Software\n====================\nAbleton\nFL Studio\nCubase\nGarage Band\nRenoise -- I have this, recommended for <a href=\"https://en.wikipedia.org/wiki/Demoscene\">Demoscene</a> lovers.\n\n* You can shop for VST, AU which are DSP made in software.\n* The above Softwares come with sane defaults and don't require a Hardware Synth,\n  to make sounds.\n\n* A popular sequencer notation developed by Softwares is called <a href=\"http://www.image-line.com/support/FLHelp/html/pianoroll.htm\">Piano Roll</a>\n* FL Studio comes a Step Sequencer, which is very useful for beat making.\n\nSooperLooper - A very unique software which can help you in loop driven music.\n\nRecording Software\n==================\nAudio Hi-Jack\nAudacity\n\nRecommended Sequencers\n======================\nAkai MPK49\n\nRecommended Samplers\n====================\nAkai MPC*\nKorg Microsampler\n\nRecommended Synths\n==================\nNovation Mininova\nKorg microKorg\nElectribe -- I have this.\n\nMisc\n====\nMidi Pipe\nOvertone\n\nThe Legendary Moog sound,\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/VouHPeO4Gls\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"http://vimeo.com/93923609\">Also, Robots love it.</a><p>\n\n","front_matter":"---\ntitle: \"MIDI\"\nauthor: foobar\ntags: [music]\ncopyright: CC BY-NC\n---","filename":"midi","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n<a href=\"https://en.wikipedia.org/wiki/MIDI\">MIDI</a> changed music.\n\nConsider what a Classically trained Musician needs to do, to make his \nmusic heard.\n\nHe needs to,\n\n1. Write it\n2. Get a bunch of musicians\n3. Practice\n4. Play\n5. goto 1\n6. Record the Final Cut in a Studio\n\nWith MIDI,\n\n1. Write it. Save it, with a Software\n2. Get the electronic instruments to play it for him\n   -or-\n   Get a computer Software to play it for him\n3. Tweak\n4. Record the Final Cut in Software or a Studio\n\nMIDI is -- Musical Instrument Digital Interface.\n\nIt abstracts <a href=\"https://en.wikipedia.org/wiki/Musical_notation\">Music Notation</a> into bytes.\nSince its just bytes, you can replay it with Software.\n\nMIDI made production,\n\n* Dirt Cheap\n* Made Producers more efficient\n\nHow about Audio Quality ?\n\n* A Classical Ensemble still has its place. Panning is very unique there.\n* But MIDI + Electronic Instrument increased the Range.\n  It helped form whole new genres in Music like EDM, IDM, SynthPunk ...\n\nLimitations ?\n\n* MIDI is limited to 16 instruments.\n* Integers.\n* 16 is a big number.\n* <a href=\"https://en.wikipedia.org/wiki/Open_Sound_Control\">OSC</a> overcomes these.\n\nUsage\n=====\n\nTo use MIDI you need two things,\n\n1. A Sequencer\n\n   This generates MIDI messages like,\n\n   Command param1 param2 param3\n   Command param1 param2\n   Command param1 param2 param3\n   Command param1 param2\n   ...\n\n   Important messages are,\n\n   1. Note On => Channel [1-16]**, Pitch[0-127], Volume[0-127]\n   2. Note Off                 \"\n   3. Controller => No [0-127], Value[0-127]\n\n   ** Channel 10 is reserved for Drums.\n\n   Note On and Note Off are typically sent by keys, buttons.\n   Controller Messages are typically sent by knobs and pedals.\n\n2. A Synthesizer\n\n   This accepts MIDI data.\n   It Maps channels to DSP.\n   It Maps knobs** to effects like distortion and reverb.\n\n   ** The positions of the knob are called patches.\n\n3. A Sampler.\n\n   This accepts MIDI data.\n   It Maps channels to sound recordings.\n   It Maps knobs to effects like distortion and reverb.\n\nIf you buy Music Hardware you have both 1 and 2.\n\nBut usually the sequencing capabilities are limited in a synth.\nSo you can't Edit MIDI data in the instrument.\n\nSome notes,\n\n0. You can buy hardware and get a Synthesizer + a limited Sequencer.\n\n1. You can buy A Sequencer and use a Computer as a Synthesizer\n\nor\n\n2. Use a Software Sequencer to Program your Synthesizer\n\nor\n\n3. Forget Hardware and go complete nuts with Software\n\nRecommended Software\n====================\nAbleton\nFL Studio\nCubase\nGarage Band\nRenoise -- I have this, recommended for <a href=\"https://en.wikipedia.org/wiki/Demoscene\">Demoscene</a> lovers.\n\n* You can shop for VST, AU which are DSP made in software.\n* The above Softwares come with sane defaults and don't require a Hardware Synth,\n  to make sounds.\n\n* A popular sequencer notation developed by Softwares is called <a href=\"http://www.image-line.com/support/FLHelp/html/pianoroll.htm\">Piano Roll</a>\n* FL Studio comes a Step Sequencer, which is very useful for beat making.\n\nSooperLooper - A very unique software which can help you in loop driven music.\n\nRecording Software\n==================\nAudio Hi-Jack\nAudacity\n\nRecommended Sequencers\n======================\nAkai MPK49\n\nRecommended Samplers\n====================\nAkai MPC*\nKorg Microsampler\n\nRecommended Synths\n==================\nNovation Mininova\nKorg microKorg\nElectribe -- I have this.\n\nMisc\n====\nMidi Pipe\nOvertone\n\nThe Legendary Moog sound,\n\n<iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/VouHPeO4Gls\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"http://vimeo.com/93923609\">Also, Robots love it.</a><p>\n\n"},{"title":"Mirror Ontology","author":"foobar","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\nThe principles shall now be explained,\nEarth, water, fire and air are the principles.\nBy whom came this variety ? from their own nature was it born !\n\nPerception is the only valid source of knowledge.\nThe body is the source of consciousness; not an imperceptible soul.\nAs no other world entities are seen, there is no other world.\n\nWhile life is yours, live joyously !\nEven freed from fear,\nNone can escape Death's searching eye.\n\n-- Epicurus\n\n1. The world is made of self-similar structures.\n\n    Atom\n    Star\n\n    DNA\n    Nature\n\n    Microbes\n    Plants\n\n    Animal\n    Man\n\n    Words\n    World\n\n    Each is built on top of the other. It is difficult to pin-point where\n    an atom ends and a star begins.\n\n2. The human body is completely automatic.\n\n   There is no \"free will\" in\n\n    Growth\n    Sex\n    Sleep\n    Disease\n\n3.\n\n<img src=\"images/mind.svg\"/>\n\n   Various delays and feedback loops come into the picture.\n\n   Additional delays of the following are also applicable\n        light\n        sound\n        heat\n        pressure\n        motor control\n        speech\n        sense processing\n        recollection\n\n   Not only delays, memory can decay.\n\n4. The \"I\" that an individual perceives is an echo.\n   It can't be eliminated.\n\n5. The mind is a mirror, an imperfect one of REALITY.\n\n6. What \"is\" can be divided into\n\n   Reality is the content of individual memory.\n   Social Reality, the least common denominator of realities.\n   REALITY = Sum(Reality)\n\n   What this implies in raw numbers is that, the total number of\n   realities at any given moment is (Individuals x Societies) + 1.\n\n   The number is obviously merely for demonstration purposes.\n   \"Mad\" people have been know to experience more than one reality at once.\n\n7. Will is ability of an individual to hold power relations with REALITY.\n   Dynamics of REALITY is nothing but Will to Power.\n\n8. As Social Reality is nothing but memory, all revolutions and revelations are just\n   memory experiences cruelly enforced.\n\n  For example, if `0 - 2 = 0 and 0 + 2 = 0` is valid for a number system.\n  Teachers won't be apologetic for the children they beat.\n  New teachers will certainly beat the children who give a wrong answer now.\n\n  If the earth started having regular \"mini\" earthquakes, no one would\n  be able to demonstrate \"Simple Harmonic Motion\".\n\n  Seen this way, there is no private memory which is a much harsher restatement of\n  Wittgenstein's \"there is no private language\".\n\n9. Mind is a mere minder of senses.\n\n   Mind can never study itself completely.\n   A mirror can never look at itself by using another mirror.\n\n   Minding about the mind gives rise to infinite loops, infinite reflections.\n   Such infinites manifest just like a mirror as -- \"Mind seeing itself everywhere\".\n\n   Mind can't study any of self-similiar structures in 1 except in relation to will.\n\n10. All that can be said of the mirror by the mirror, if the mirror had any sentience\n    is -- \"I seem to exist. I can mirror\".\n\n11. If 10 were indeed the case, then AI is simply not possible on a human level.\n\n12. Intelligent Robots will have a level of self-conscience a human can never have.\n\n    This means that robots will simply not pollute nature.\n    If one robot discovers that polluting is \"bad\", then all robots upgrade to do \"good\"\n    and plant more trees.\n\n    Such a robot is more beautiful than a petulant human who even after 100_000\n    religions, movies, songs ... changed radically.\n\n    Maybe self-aware robots are man's gift to Nature ?\n\n13. All delusions, anxieties, obsessions, phobias, hate, love are multiplicative\n    feedback loops unto the Mind.\n\n   If a microphone is not insulated from the speakers, a musician will not be able\n   to play his guitar.\n\n   Thus therapy is avoiding too much \"feedback loops\" by focusing only on senses or\n   memory or mind but never in combination.\n\n14. Memory as a drug is sold in the marketplace as \"Becoming\".\n    There is no \"Becoming\".\n\n    If two computers swap hard disks,\n    Have the operating miseries changed ?\n\n15. Memory makes second order cybernetics needless.\n\n16. Memory as time-binding is useful as long as it maps to the structure of REALITY.\n\n17. Memory is conditioning.\n    Language is the condition.\n\n    Mind is conditioning moving towards pleasure.\n    A Perfect Mind is postulated as more pleasurable than an inferior one.\n\n    What then is pleasure ?\n\n    It is an abormal condition of the body.\n\n    It is alluded and exists only in allusion as images of content and smiling\n    family, peers, society, leaders, businessmen, heroes, kings,\n    artists, philosophers, addicts and criminals.\n\n\nReferences\n==========\n* <a href=\"http://www.robertpepperell.com/papers/Towards%20a%20Theory%20of.pdf\">Zen and Neuroscience</a>\n* <a href=\"https://en.wikipedia.org/wiki/Bereitschaftspotential\">Action preceeds thought</a>\n* <a href=\"http://www.radicalconstructivism.com\">Radical Constructivism</a>\n* <a href=\"https://en.wikipedia.org/wiki/Second-order_cybernetics\">Cybernetics</a>\n* <a href=\"https://en.wikipedia.org/wiki/General_semantics\">GS</a>\n* <a href=\"http://www.utwente.nl/bms/wijsb/organization/aydin/pdfs/N-will-to-power.pdf\">Will To Power</a>\n* <a href=\"http://pure.rhul.ac.uk/portal/files/6387874/GrayJ_2012_HamannNietzscheWittgenstein.pdf\">Language Philosophers</a>\n\ntl;dr\n\"I\" is an echo.\nAll memory is dogma.\nThe goal of the mind is doomed.\n\nCREDITS\n=======\n\n<a href=\"https://twitter.com/tuxcanfly\">@tuxcanfly</a> and nix for putting up with the drafts of this !\n\n\n","front_matter":"---\ntitle: Mirror Ontology\nauthor: foobar\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"mirror","mtime":"2015-12-10T08:01:52.437Z","mime":"text/plain","html":"\n\nThe principles shall now be explained,\nEarth, water, fire and air are the principles.\nBy whom came this variety ? from their own nature was it born !\n\nPerception is the only valid source of knowledge.\nThe body is the source of consciousness; not an imperceptible soul.\nAs no other world entities are seen, there is no other world.\n\nWhile life is yours, live joyously !\nEven freed from fear,\nNone can escape Death's searching eye.\n\n-- Epicurus\n\n1. The world is made of self-similar structures.\n\n    Atom\n    Star\n\n    DNA\n    Nature\n\n    Microbes\n    Plants\n\n    Animal\n    Man\n\n    Words\n    World\n\n    Each is built on top of the other. It is difficult to pin-point where\n    an atom ends and a star begins.\n\n2. The human body is completely automatic.\n\n   There is no \"free will\" in\n\n    Growth\n    Sex\n    Sleep\n    Disease\n\n3.\n\n<img src=\"images/mind.svg\"/>\n\n   Various delays and feedback loops come into the picture.\n\n   Additional delays of the following are also applicable\n        light\n        sound\n        heat\n        pressure\n        motor control\n        speech\n        sense processing\n        recollection\n\n   Not only delays, memory can decay.\n\n4. The \"I\" that an individual perceives is an echo.\n   It can't be eliminated.\n\n5. The mind is a mirror, an imperfect one of REALITY.\n\n6. What \"is\" can be divided into\n\n   Reality is the content of individual memory.\n   Social Reality, the least common denominator of realities.\n   REALITY = Sum(Reality)\n\n   What this implies in raw numbers is that, the total number of\n   realities at any given moment is (Individuals x Societies) + 1.\n\n   The number is obviously merely for demonstration purposes.\n   \"Mad\" people have been know to experience more than one reality at once.\n\n7. Will is ability of an individual to hold power relations with REALITY.\n   Dynamics of REALITY is nothing but Will to Power.\n\n8. As Social Reality is nothing but memory, all revolutions and revelations are just\n   memory experiences cruelly enforced.\n\n  For example, if `0 - 2 = 0 and 0 + 2 = 0` is valid for a number system.\n  Teachers won't be apologetic for the children they beat.\n  New teachers will certainly beat the children who give a wrong answer now.\n\n  If the earth started having regular \"mini\" earthquakes, no one would\n  be able to demonstrate \"Simple Harmonic Motion\".\n\n  Seen this way, there is no private memory which is a much harsher restatement of\n  Wittgenstein's \"there is no private language\".\n\n9. Mind is a mere minder of senses.\n\n   Mind can never study itself completely.\n   A mirror can never look at itself by using another mirror.\n\n   Minding about the mind gives rise to infinite loops, infinite reflections.\n   Such infinites manifest just like a mirror as -- \"Mind seeing itself everywhere\".\n\n   Mind can't study any of self-similiar structures in 1 except in relation to will.\n\n10. All that can be said of the mirror by the mirror, if the mirror had any sentience\n    is -- \"I seem to exist. I can mirror\".\n\n11. If 10 were indeed the case, then AI is simply not possible on a human level.\n\n12. Intelligent Robots will have a level of self-conscience a human can never have.\n\n    This means that robots will simply not pollute nature.\n    If one robot discovers that polluting is \"bad\", then all robots upgrade to do \"good\"\n    and plant more trees.\n\n    Such a robot is more beautiful than a petulant human who even after 100_000\n    religions, movies, songs ... changed radically.\n\n    Maybe self-aware robots are man's gift to Nature ?\n\n13. All delusions, anxieties, obsessions, phobias, hate, love are multiplicative\n    feedback loops unto the Mind.\n\n   If a microphone is not insulated from the speakers, a musician will not be able\n   to play his guitar.\n\n   Thus therapy is avoiding too much \"feedback loops\" by focusing only on senses or\n   memory or mind but never in combination.\n\n14. Memory as a drug is sold in the marketplace as \"Becoming\".\n    There is no \"Becoming\".\n\n    If two computers swap hard disks,\n    Have the operating miseries changed ?\n\n15. Memory makes second order cybernetics needless.\n\n16. Memory as time-binding is useful as long as it maps to the structure of REALITY.\n\n17. Memory is conditioning.\n    Language is the condition.\n\n    Mind is conditioning moving towards pleasure.\n    A Perfect Mind is postulated as more pleasurable than an inferior one.\n\n    What then is pleasure ?\n\n    It is an abormal condition of the body.\n\n    It is alluded and exists only in allusion as images of content and smiling\n    family, peers, society, leaders, businessmen, heroes, kings,\n    artists, philosophers, addicts and criminals.\n\n\nReferences\n==========\n* <a href=\"http://www.robertpepperell.com/papers/Towards%20a%20Theory%20of.pdf\">Zen and Neuroscience</a>\n* <a href=\"https://en.wikipedia.org/wiki/Bereitschaftspotential\">Action preceeds thought</a>\n* <a href=\"http://www.radicalconstructivism.com\">Radical Constructivism</a>\n* <a href=\"https://en.wikipedia.org/wiki/Second-order_cybernetics\">Cybernetics</a>\n* <a href=\"https://en.wikipedia.org/wiki/General_semantics\">GS</a>\n* <a href=\"http://www.utwente.nl/bms/wijsb/organization/aydin/pdfs/N-will-to-power.pdf\">Will To Power</a>\n* <a href=\"http://pure.rhul.ac.uk/portal/files/6387874/GrayJ_2012_HamannNietzscheWittgenstein.pdf\">Language Philosophers</a>\n\ntl;dr\n\"I\" is an echo.\nAll memory is dogma.\nThe goal of the mind is doomed.\n\nCREDITS\n=======\n\n<a href=\"https://twitter.com/tuxcanfly\">@tuxcanfly</a> and nix for putting up with the drafts of this !\n\n\n"},{"title":"Module Pattern","author":"foobar","tags":["js","programming"],"copyright":"CC BY-NC","__content":"\n\nFor nodejs,\n\n```module.js\nexports.thingy = function (x, y, z) {\n    ...\n};\n```\n\nFor browsers,\n\n<div class=\"autospace\">\n<script src=\"https://gist.github.com/harsha-mudi/20781b805c0967e9be35.js\"></script>\n</div>\n\n","front_matter":"---\ntitle: \"Module Pattern\"\nauthor: foobar\ntags: [js, programming]\ncopyright: CC BY-NC\n---","filename":"module-pattern","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nFor nodejs,\n\n```module.js\nexports.thingy = function (x, y, z) {\n    ...\n};\n```\n\nFor browsers,\n\n<div class=\"autospace\">\n<script src=\"https://gist.github.com/harsha-mudi/20781b805c0967e9be35.js\"></script>\n</div>\n\n"},{"title":"The Myth of Software Reuse","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\nThe Myth of Software Reuse gives you the following claims\n\n- Easier to use\n- Maintainable\n- Cheap components / plugins / modules\n\nI have a Gameboy ~~ 10 years.\nA bike ~~ 7 years.\nA watch ~~ 12 years.\n\nEach of them has good cheaply available parts which can be used for\n\n- Decoration\n- Maintenance\n- Upgrades\n\nIt is on the success of Engineering, Software Engineers make the\nclaims of reuse.\n\nSadly most claims remain more exaggerated than true.\n\nFor example, the Factory Pattern doesn't have the notion of pipelines\nand yet it is supposed to help us somehow into making the \"car\" objects.\n\nCan we be inspired by Engineering to do better ?\n\nCars\n====\n\nEngineering products typically have series and each series typically has generations.\n\nFor a car company, we can imagine a A series and a B series.\n\nA1\nA2\nwithin A.\n\nB1\nB2\nB3\nB4\nwithin B.\n\nFirstly A and B can be so different, the only thing common between them is primitives\nand designs ideas.\n\nFor Software this is,\n\n- Primitives\n- Data Structures\n- Algorithms\n- Patterns\n\nFor A and B, the manufacturing pipeline can be common.\n\n- Build Process\n\nBetween A and B\n\n- User Interfaces can be shared, upgraded and themed.\n\nWithin\n\nA1\nA2\n\nOld components can be\n\n* Reused\n* Replaced\n* Modified internally\n\n- Module Set\n\nModule Set\n==========\n\nThe maximum reuse happen at Primitives, Data Structures ...\nImportant reuse goes into to Architectural/Design Patterns.\n\nFor flexible UI, create common and flexible Interfaces.\n\nThe most ignored is the \"Module Set\".\nWith the help of such a set we get easy Build Steps and Internal reuses.\n\n<b>What is a Module ?</b>\n\nA Module has\n1. input\n2. output\n3. reconfigurability\n4. connectivity\n\nTo create a Module Set is a Creative Process.\n\n** It is a skill, not a framework **\n\nThe Set can be divided into two aspects.\nData Flow and Control Flow.\n\nData Flow is made up of Data Paths and Transformations.\n\nControl Flow represents\n1. Steps\n2. Sequencing\n\nSteps and Transformations are easy to Modularise.\nSequencing can be modularized with the help of decision trees.\n\nSummary\n=======\n\nTo reuse, just stick to off-the-shelf\n\n* Primitives\n* Patterns\n\nEach should however be implementable by-hand, when absent as a library.\nIn fact the library should not be different from a hypothetical implementation by-hand.\nAny fluff just muddles the pure Design Concepts.\n\nLearn Module Decomposition.\n\nA litmus test for a programmer understanding modularity\nis whether he can implement a plugin system.\n\n","front_matter":"---\ntitle: \"The Myth of Software Reuse\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"myth-of-reuse","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\nThe Myth of Software Reuse gives you the following claims\n\n- Easier to use\n- Maintainable\n- Cheap components / plugins / modules\n\nI have a Gameboy ~~ 10 years.\nA bike ~~ 7 years.\nA watch ~~ 12 years.\n\nEach of them has good cheaply available parts which can be used for\n\n- Decoration\n- Maintenance\n- Upgrades\n\nIt is on the success of Engineering, Software Engineers make the\nclaims of reuse.\n\nSadly most claims remain more exaggerated than true.\n\nFor example, the Factory Pattern doesn't have the notion of pipelines\nand yet it is supposed to help us somehow into making the \"car\" objects.\n\nCan we be inspired by Engineering to do better ?\n\nCars\n====\n\nEngineering products typically have series and each series typically has generations.\n\nFor a car company, we can imagine a A series and a B series.\n\nA1\nA2\nwithin A.\n\nB1\nB2\nB3\nB4\nwithin B.\n\nFirstly A and B can be so different, the only thing common between them is primitives\nand designs ideas.\n\nFor Software this is,\n\n- Primitives\n- Data Structures\n- Algorithms\n- Patterns\n\nFor A and B, the manufacturing pipeline can be common.\n\n- Build Process\n\nBetween A and B\n\n- User Interfaces can be shared, upgraded and themed.\n\nWithin\n\nA1\nA2\n\nOld components can be\n\n* Reused\n* Replaced\n* Modified internally\n\n- Module Set\n\nModule Set\n==========\n\nThe maximum reuse happen at Primitives, Data Structures ...\nImportant reuse goes into to Architectural/Design Patterns.\n\nFor flexible UI, create common and flexible Interfaces.\n\nThe most ignored is the \"Module Set\".\nWith the help of such a set we get easy Build Steps and Internal reuses.\n\n<b>What is a Module ?</b>\n\nA Module has\n1. input\n2. output\n3. reconfigurability\n4. connectivity\n\nTo create a Module Set is a Creative Process.\n\n** It is a skill, not a framework **\n\nThe Set can be divided into two aspects.\nData Flow and Control Flow.\n\nData Flow is made up of Data Paths and Transformations.\n\nControl Flow represents\n1. Steps\n2. Sequencing\n\nSteps and Transformations are easy to Modularise.\nSequencing can be modularized with the help of decision trees.\n\nSummary\n=======\n\nTo reuse, just stick to off-the-shelf\n\n* Primitives\n* Patterns\n\nEach should however be implementable by-hand, when absent as a library.\nIn fact the library should not be different from a hypothetical implementation by-hand.\nAny fluff just muddles the pure Design Concepts.\n\nLearn Module Decomposition.\n\nA litmus test for a programmer understanding modularity\nis whether he can implement a plugin system.\n\n"},{"title":"Name Coupling","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n[DRAFT]\n\nAll programming pathologically suffers from name-coupling.\n\nBy name coupling what I imply is how a function has to know the name of\nthe function or object it would like to call.\n\nHence there is a need extra for indirections to achieve basic modularity\n\n* Function Pointers\n* Dynamic Namespaces (packages in lisp)\n* Mediator / Messaging / Interceptor / Reflection / Dependency Injection / Service Locator / Proxy ...\n* REST APIs\n* DLLs\n* Actors\n* Active Objects\n* <a href=\"http://noflojs.org\">Components</a>\n\nElectronics is the most visible example of nameless coupling.\n\nEvery so-called \"Very High Level beyond Functional\" language as of 2014\nimplements static bindings for names as the default.\n\nContrast to this, Assembly programming languages don't need any complex\nindirections like above because of the notion of indirect jumps or computed gotos.\n\nSPARC:  jmpl %o7\nMIPS:   jal $ra\nX86:    jmp *%eax\nARM:    mov pc, r2\nIA64:   br.ret.sptk.few rp\n6502:   jmp ($0DEA)\n65C02:  jmp ($0DEA,X)\n65C816: jsr ($0DEA,X)\n\nThis is an instruction level Proxy Pattern which naturally gives rise to modularity\nand even self-modifying code.\n\nProgramming language designers are doomed to reinvent what is useful and forgotten with stupid names.\n\n","front_matter":"---\ntitle: \"Name Coupling\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"name-coupling","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n[DRAFT]\n\nAll programming pathologically suffers from name-coupling.\n\nBy name coupling what I imply is how a function has to know the name of\nthe function or object it would like to call.\n\nHence there is a need extra for indirections to achieve basic modularity\n\n* Function Pointers\n* Dynamic Namespaces (packages in lisp)\n* Mediator / Messaging / Interceptor / Reflection / Dependency Injection / Service Locator / Proxy ...\n* REST APIs\n* DLLs\n* Actors\n* Active Objects\n* <a href=\"http://noflojs.org\">Components</a>\n\nElectronics is the most visible example of nameless coupling.\n\nEvery so-called \"Very High Level beyond Functional\" language as of 2014\nimplements static bindings for names as the default.\n\nContrast to this, Assembly programming languages don't need any complex\nindirections like above because of the notion of indirect jumps or computed gotos.\n\nSPARC:  jmpl %o7\nMIPS:   jal $ra\nX86:    jmp *%eax\nARM:    mov pc, r2\nIA64:   br.ret.sptk.few rp\n6502:   jmp ($0DEA)\n65C02:  jmp ($0DEA,X)\n65C816: jsr ($0DEA,X)\n\nThis is an instruction level Proxy Pattern which naturally gives rise to modularity\nand even self-modifying code.\n\nProgramming language designers are doomed to reinvent what is useful and forgotten with stupid names.\n\n"},{"title":"OM","author":"foobar","tags":["programming","clojure","clojurescript","async","goroutines"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"https://github.com/swannodette/om/wiki/Documentation\">Om</a> is built on three ideas to deal with <a href=\"http://tech.pro/blog/1402/five-patterns-to-help-you-tame-asynchronous-javascript\">async</a> shit in clojurescript.\n\n1) Messaging\n2) State Management\n3) Reactive UI\n\ntl;dr UI -> EVENTS -> STATE -> UI\n\n## Reactive UI\n\nThis is built on top of ReactJS.\nUI is divided into components.\n\nEach component takes a cursor(more on that later).\nAnd has some,\n* rendering code\n  rendering code can look like dom/div(default), :div(hiccup) or enlive\n* life cycle hooks where you can place dom event listeners and state change listeners\n\nInitialization of component calls,\n    IInitState\n    IWillMount\n    IDidMount.\n\nEvery time a cursor's state changes a component is rendered, as per the life cycle,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nComponents are organized as a tree for some fancy optimization purposes.\nSee,\n    root - builds the first component\n    build\n    component\n    graft.\n\n## State Management\n\nThe entire application state and data is an atom blob.\nOm gives you cursors which are pointers(paths) to a subset of the blob.\n\nOm also has component local states, which are not stored in the blob.\nSee,\n    set-state!\n    get-state!\n    props.\n\nIt is much simpler to depend on cursors for everything, IMHO.\n\nOm also has truly global state sharing with,\n    get-shared which gets the :shared argument passed to root.\n\nCursors are manipulated safely by om API,\n    update!\n    transact! you can use a :tx-listen while building root to listen to all transactions\n    and get-in, assoc-in from clojurescript.\n\nYou can extend the ICursor Protocol to come up with your own idea of cursors.\n\n## Messaging\n\nMessaging is possible because of core.async, which provides channels and goroutines.\nThere is no <a href=\"http://swannodette.github.io/2013/08/02/100000-processes/\">limit</a> to the number of channels and goroutines unless you are using old browsers.\ngoroutines look alot like threads.\n\nEvery component can have channels or channels can be global.\nGlobal channels and goroutines makes it easier to refactor code into multimethods later, IMHO.\n\nInstead of dealing with callbacks in dom event listeners you put! things into channels as events.\nIn a goroutine you &lt;! on a channel to listen to all the events and act upon them.\n\nEvents are acted upon and send further events, finally making changes to the state which call,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nGood place to start go(routines),\n    IWillMount.\n\nTesting and Mocking are greatly simplified using the messaging paradigm.\n\n","front_matter":"---\ntitle: \"OM\"\nauthor: foobar\ntags: [programming, clojure, clojurescript, async, goroutines]\ncopyright: CC BY-NC\n---","filename":"om","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n<a href=\"https://github.com/swannodette/om/wiki/Documentation\">Om</a> is built on three ideas to deal with <a href=\"http://tech.pro/blog/1402/five-patterns-to-help-you-tame-asynchronous-javascript\">async</a> shit in clojurescript.\n\n1) Messaging\n2) State Management\n3) Reactive UI\n\ntl;dr UI -> EVENTS -> STATE -> UI\n\n## Reactive UI\n\nThis is built on top of ReactJS.\nUI is divided into components.\n\nEach component takes a cursor(more on that later).\nAnd has some,\n* rendering code\n  rendering code can look like dom/div(default), :div(hiccup) or enlive\n* life cycle hooks where you can place dom event listeners and state change listeners\n\nInitialization of component calls,\n    IInitState\n    IWillMount\n    IDidMount.\n\nEvery time a cursor's state changes a component is rendered, as per the life cycle,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nComponents are organized as a tree for some fancy optimization purposes.\nSee,\n    root - builds the first component\n    build\n    component\n    graft.\n\n## State Management\n\nThe entire application state and data is an atom blob.\nOm gives you cursors which are pointers(paths) to a subset of the blob.\n\nOm also has component local states, which are not stored in the blob.\nSee,\n    set-state!\n    get-state!\n    props.\n\nIt is much simpler to depend on cursors for everything, IMHO.\n\nOm also has truly global state sharing with,\n    get-shared which gets the :shared argument passed to root.\n\nCursors are manipulated safely by om API,\n    update!\n    transact! you can use a :tx-listen while building root to listen to all transactions\n    and get-in, assoc-in from clojurescript.\n\nYou can extend the ICursor Protocol to come up with your own idea of cursors.\n\n## Messaging\n\nMessaging is possible because of core.async, which provides channels and goroutines.\nThere is no <a href=\"http://swannodette.github.io/2013/08/02/100000-processes/\">limit</a> to the number of channels and goroutines unless you are using old browsers.\ngoroutines look alot like threads.\n\nEvery component can have channels or channels can be global.\nGlobal channels and goroutines makes it easier to refactor code into multimethods later, IMHO.\n\nInstead of dealing with callbacks in dom event listeners you put! things into channels as events.\nIn a goroutine you &lt;! on a channel to listen to all the events and act upon them.\n\nEvents are acted upon and send further events, finally making changes to the state which call,\n    IWillUpdate\n    IRender or IRenderState\n    IDidUpdate.\n\nGood place to start go(routines),\n    IWillMount.\n\nTesting and Mocking are greatly simplified using the messaging paradigm.\n\n"},{"title":"OOP","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n“There's a good part of Computer Science that's like magic.\nUnfortunately there's a bad part of Computer Science that's like religion.”\n― Hal Abelson\n\nOOP / OOAD is intrinsically tied to an object's life cycle.\n\nOne can distinguish between two life cycles\n\n1. Flat\n\na creates b\na uses b\na closes b\n\nThis facilitates layered Architecture.\n\nModel View Controller\nDomain Application Service\n\nThis is OK till you need Workflow Processing (Checkout).\nA typical Workflow spans more than 2 disjointed or concurrent steps.\n\nAlso, building a new layer is a long process.\n\n2. Nested\n\nAn object sent n-levels down may gives rise to\n\n* Circular References\n* Memory Leaks\n* Data Corruption\n* Inability to add new operations since it's already entrenched.\n\nIt is a major pain to debug.\n\nAnother problem is two-way, or even one-way communication with previous levels.\n**Legacy code is sprinkled with using exceptions as one-way communication.**\n\nReligiosity\n===========\n\nPractitioner: How can objects have sex ?\nPriest:       You need a Factory to pray to and then it will deliver.\nPractitioner: I don't have one ...\nPriest:       You need a Factory to pray to and then it will deliver.\n\n$$ Practitioner works on his code\n\nPractitioner: I have a Factory. Can objects have sex now ?\nPriest:       Sex is sin. I pray for your AbstractController.\nPractitioner: ...\n\nDesign patterns hide the problems.\n\n<b>It is not difficult to spot religiosity</b>\n\n* Incapacity is explained as Evil and an obfuscated explanation\n  with moral and miraculous connotations is given.\n\n&gt;  Children are a gift from god.\n&gt;  Dependency Injection will give you the answer.\n&gt;  Use an Applicative Functor, State is evil.\n\n* Judgement Day\n\n&gt;  You will suffer because you sin. You will be judged at the end.\n&gt;  You did not use OOAD DDD DI MVC MVP MVVM ABC properly.\n      Your project will be a maintenance nightmare.\n\n* No criticism of the Elite\n\nHow many times in history have the priests held the king accountable ?\nThey will attack the commoners and collude with the kings.\nThis is because the Elite never needed a religion.\nReligion is always a proxy for them.\n\nA company X and a priest Y will announce a Framework Z.\nAfter 5 years the company will ditch Z and use W.\n\nImagining what will happen next is upto you.\n\nEngineering\n===========\n\nRaw Material -> A Real Factory\n                -> Assembly Line\n                    -> Construction\n                        -> Split Raw Materials\n                          -> Make Parts Concurrently\n                        -> Assemble\n                    -> Quality Check\n                -> Product\n                -> Package Product\n\nAn Engineering Product stands for itself.\nOnly Game Programmers come close to this.\n\nThe irony is, Assembly Programmers used these techniques.\n\nAssembly Programmers dealt with primitive indestructible values\nand Pointers.\n\n* Storage Management\n* Memory <-> Processes <-> Device\n\nThe `Device` part is where (Flat) OOP is a great fit.\n(infact a file interface is all you need)\n\nThe `Storage Management` part is where OOP is OK.\nThe `Memory <-> Process` part is where OOP fails.\n\nThis can be solved by Data Process Patterns\n\n* Micro Kernel\n\nUsed in Real Factory Controllers.\n\n* Entity Systems\n\nThe Game Programming way.\n\n* Data Flow\n\nUsed in domains like Avionics, Electronics Softwares.\n\n* Stream Processing\n\nXML / Unix\n\n* Actor Model\n\nUsed in Telecommunications, WhatsAPP.\ngolang.\n\n* Workflow Engine\n* Active Object Pattern\n\nInevitably, in \"Enterprises\".\n\n* PAC\n\nDrupal. Yes Drupal.\n\n* MVC + Smalltalk\n\nIt is pointless to talk of MVC-smalltalk without smalltalk.\nsmalltalk has a very elegant and actor-like object communication model.\n\n* Co-routines\n\nSimula had it. Why on earth this was wasn't included in C++ baffles me.\n\n* Hierarchical Control Systems / Agent Oriented Programming\n\n---\nand many many more !\nsee <a href=\"http://www.dataorienteddesign.com/dodmain/\">Data-Oriented Design</a>\n---\n\n## What is the bloody point of all this ?\n\nIf you want to be a Software Engineer\n\n1. Use OOP, if you have to, for low level layers\n\n2. Don't fall into SP, OOP, OOAD, DDD, FP or any religion\n\n3. Engineering is about building complete Products with\n   - Systems\n   - Sub Systems\n   - Inout / Output\n\n   There is a huge creativity here, doing this efficiently.\n   Don't let the framework rob this from you.\n\n4. A Lot of programmers have built complex reliable Systems without\n   without OOAD or FP in tiny teams.\n\n   Consider the screenplay for <a href=\"http://johnaugust.com/2004/how-many-lines-per-page\">Schindlers list</a>. It has ~~ 6k lines, written\n   by one guy probably.\n\n   A 16kb total-scripts-size can be a good upper limit for a single programmer.\n\n5. Pick new Data Process pattern and make it your own.\n\nThe point is, you can do Engineering and it's not that difficult.\n\n$ cat log.txt | grep foo | wc -l\n\nYou already use engineered components that work together, everyday.\n\n\n","front_matter":"---\ntitle: \"OOP\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"oop","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n“There's a good part of Computer Science that's like magic.\nUnfortunately there's a bad part of Computer Science that's like religion.”\n― Hal Abelson\n\nOOP / OOAD is intrinsically tied to an object's life cycle.\n\nOne can distinguish between two life cycles\n\n1. Flat\n\na creates b\na uses b\na closes b\n\nThis facilitates layered Architecture.\n\nModel View Controller\nDomain Application Service\n\nThis is OK till you need Workflow Processing (Checkout).\nA typical Workflow spans more than 2 disjointed or concurrent steps.\n\nAlso, building a new layer is a long process.\n\n2. Nested\n\nAn object sent n-levels down may gives rise to\n\n* Circular References\n* Memory Leaks\n* Data Corruption\n* Inability to add new operations since it's already entrenched.\n\nIt is a major pain to debug.\n\nAnother problem is two-way, or even one-way communication with previous levels.\n**Legacy code is sprinkled with using exceptions as one-way communication.**\n\nReligiosity\n===========\n\nPractitioner: How can objects have sex ?\nPriest:       You need a Factory to pray to and then it will deliver.\nPractitioner: I don't have one ...\nPriest:       You need a Factory to pray to and then it will deliver.\n\n$$ Practitioner works on his code\n\nPractitioner: I have a Factory. Can objects have sex now ?\nPriest:       Sex is sin. I pray for your AbstractController.\nPractitioner: ...\n\nDesign patterns hide the problems.\n\n<b>It is not difficult to spot religiosity</b>\n\n* Incapacity is explained as Evil and an obfuscated explanation\n  with moral and miraculous connotations is given.\n\n&gt;  Children are a gift from god.\n&gt;  Dependency Injection will give you the answer.\n&gt;  Use an Applicative Functor, State is evil.\n\n* Judgement Day\n\n&gt;  You will suffer because you sin. You will be judged at the end.\n&gt;  You did not use OOAD DDD DI MVC MVP MVVM ABC properly.\n      Your project will be a maintenance nightmare.\n\n* No criticism of the Elite\n\nHow many times in history have the priests held the king accountable ?\nThey will attack the commoners and collude with the kings.\nThis is because the Elite never needed a religion.\nReligion is always a proxy for them.\n\nA company X and a priest Y will announce a Framework Z.\nAfter 5 years the company will ditch Z and use W.\n\nImagining what will happen next is upto you.\n\nEngineering\n===========\n\nRaw Material -> A Real Factory\n                -> Assembly Line\n                    -> Construction\n                        -> Split Raw Materials\n                          -> Make Parts Concurrently\n                        -> Assemble\n                    -> Quality Check\n                -> Product\n                -> Package Product\n\nAn Engineering Product stands for itself.\nOnly Game Programmers come close to this.\n\nThe irony is, Assembly Programmers used these techniques.\n\nAssembly Programmers dealt with primitive indestructible values\nand Pointers.\n\n* Storage Management\n* Memory <-> Processes <-> Device\n\nThe `Device` part is where (Flat) OOP is a great fit.\n(infact a file interface is all you need)\n\nThe `Storage Management` part is where OOP is OK.\nThe `Memory <-> Process` part is where OOP fails.\n\nThis can be solved by Data Process Patterns\n\n* Micro Kernel\n\nUsed in Real Factory Controllers.\n\n* Entity Systems\n\nThe Game Programming way.\n\n* Data Flow\n\nUsed in domains like Avionics, Electronics Softwares.\n\n* Stream Processing\n\nXML / Unix\n\n* Actor Model\n\nUsed in Telecommunications, WhatsAPP.\ngolang.\n\n* Workflow Engine\n* Active Object Pattern\n\nInevitably, in \"Enterprises\".\n\n* PAC\n\nDrupal. Yes Drupal.\n\n* MVC + Smalltalk\n\nIt is pointless to talk of MVC-smalltalk without smalltalk.\nsmalltalk has a very elegant and actor-like object communication model.\n\n* Co-routines\n\nSimula had it. Why on earth this was wasn't included in C++ baffles me.\n\n* Hierarchical Control Systems / Agent Oriented Programming\n\n---\nand many many more !\nsee <a href=\"http://www.dataorienteddesign.com/dodmain/\">Data-Oriented Design</a>\n---\n\n## What is the bloody point of all this ?\n\nIf you want to be a Software Engineer\n\n1. Use OOP, if you have to, for low level layers\n\n2. Don't fall into SP, OOP, OOAD, DDD, FP or any religion\n\n3. Engineering is about building complete Products with\n   - Systems\n   - Sub Systems\n   - Inout / Output\n\n   There is a huge creativity here, doing this efficiently.\n   Don't let the framework rob this from you.\n\n4. A Lot of programmers have built complex reliable Systems without\n   without OOAD or FP in tiny teams.\n\n   Consider the screenplay for <a href=\"http://johnaugust.com/2004/how-many-lines-per-page\">Schindlers list</a>. It has ~~ 6k lines, written\n   by one guy probably.\n\n   A 16kb total-scripts-size can be a good upper limit for a single programmer.\n\n5. Pick new Data Process pattern and make it your own.\n\nThe point is, you can do Engineering and it's not that difficult.\n\n$ cat log.txt | grep foo | wc -l\n\nYou already use engineered components that work together, everyday.\n\n\n"},{"title":"Pause","author":"foobar","tags":["linguistics"],"copyright":"CC BY-NC","__content":"\n\nMy writing can't be understood by the pedantic.\n\nHave you observed, the pedantic can never write anything original ?\nThat's no coincidence. For the obsessive compulsive pedantic,\nwriting is a sin.\n\nI try to follow Grammar for its prosodic flows.\n\nPauses are crucial for prosody.\n\nHere are a few ways to create a pause, in ascending order of\nduration\n\n-\n|space|\n,\n;\n.\n--\n*\n|newline|\n\n|quote|\nitalic\nbold\n\n","front_matter":"---\ntitle: \"Pause\"\nauthor: foobar\ntags: [linguistics]\ncopyright: CC BY-NC\n---","filename":"pause","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nMy writing can't be understood by the pedantic.\n\nHave you observed, the pedantic can never write anything original ?\nThat's no coincidence. For the obsessive compulsive pedantic,\nwriting is a sin.\n\nI try to follow Grammar for its prosodic flows.\n\nPauses are crucial for prosody.\n\nHere are a few ways to create a pause, in ascending order of\nduration\n\n-\n|space|\n,\n;\n.\n--\n*\n|newline|\n\n|quote|\nitalic\nbold\n\n"},{"title":"Personality Types","author":"foobar","tags":["philosophy"],"copyright":"CC BY-NC","__content":"\n\"Anyone who wants to know the human psyche will learn next to nothing\nfrom experimental psychology. He would be better advised to abandon exact\nscience, put away his scholar's gown, bid farewell to his study, and wander\nwith human heart throught the world. There in the horrors of prisons, lunatic\nasylums and hospitals, in drab suburban pubs, in brothels and gambling-hells,\nin the salons of the elegant, the Stock Exchanges, socialist meetings,\nchurches, revivalist gatherings and ecstatic sects, through love and hate,\nthrough the experience of passion in every form in his own body, he would reap\nricher stores of knowledge than text-books a foot thick could give him, and he\nwill know how to doctor the sick with a real knowledge of the human soul.\"\n\n-- Carl Jung\n\nThere are multiple systems for personality types.\n\n1. MBTI / Socionics\n2. Enneagram\n3. Four Temperments\n4. Elemental\n\nIs it possible to realize these types from the physiology of the brain ?\n\n<img src=\"images/mind.svg\"/>\n\nConsider the information pathways,\n\n1. Thinker (Earth, Melancholic, Rationals)\n2. Sensor (Wind, Phlegmatic, Artisans)\n3. Controller (Fire, Choleric, Guardians)\n4. Intuition (Water, Sanguine, Idealists)\n\nTotal personalities = 4 + 6 + 4 + 1 = 15.\n\n5. Instinct\n\nAnimals\n=======\n\nDeer (T)\nEagle (S)\nLion (C)\nTiger (I)\nSnake (N)\n\nThinking Styles\n===============\n\nAnalytical (T)\nSequential (S)\nInterpersonal (C)\nImaginative (I)\nAnimal (N)\n\nLearning Styles\n===============\n\nExploration (T)\nPerspectives (S)\nExperience (C)\nHistory (I)\nPractice (N)\n\nRomance Styles\n==============\n\nPlatonic (T)\nSensual (S)\nRomantic (C)\nCreative (I)\nAnimal (N)\n\nDecission Making Styles\n=======================\n\nAccuracy (T)\nHarmony (S)\nEffectiveness (C)\nAuthenticity (I)\nPower (N)\n\nFears\n=====\n\nIncompetence, Worthlessness  (T)\nTrapped, Harmed (S)\nImbalance, Corruption (C)\nInsignificance, Violated (I)\n\nFear of Loss, Separation, Control (N)\n\nMarriage with MBTI\n==================\nIntroverted Thinking  - T ( Systems )\nExtroverted Thinking - CT ( Facts )\nIntroverted Sensing - CS ( Taste )\nExtroverted Sensing - S ( Texture )\nExtroverted Intuition - CI ( Multiverse )\nIntroverted Intuition - I ( Imagination )\nExtroverted Feeling - CN ( Values )\nIntroverted Feeling - N ( Virtues )\n\nExtroversion, Introversion is mapped to Controller\nFeeling, Judging is mapped to Instinct\nPerceptiveness is mapped to sensing.\n\nActive Controller,\n\n1. Multiplies Sense Feedback\n2. Makes Thinking more Objective (ET)\n3. Filters Senses\n4. Forces the Intuition / Imagination to take reality into account.\n\nController is essentially Mind over Body.\nInstinct is Body over Mind.\n\nMisc\n====\n\n1. Best way to converse with people N, S C, I T followed by the others depending on the setting.\n   In other words give a feeling of assurance, talk sensually and objectivitly followed by anecodes of experience and logic.\n\n2. An unbalanced personality has weaknesses in one or more of the items.\n   With age, meeting different personality types, work partners this gets\n   blanced out in the end.\n\n3. This aspects that are least developed are usually called Inner Child / Shadow / Id\n   respectively.\n\n4. Reprression pushes things into intuition.\n\n5. Best way to work CT, CN, T, CI, C\n   In other words forget virtues, stick to values and facts, mould all possibilities to the single vision and taste victory.\n\n6.  Best way to evaluate S, I, CS, N\n    In other words see the texture, test its virtues, is it refined, does it tirgger the imagination ?\n\n1. <a href=\"http://www.personalityhacker.com/\">Personality Hacker</a>\n2. <a href=\"http://www.socionics.com/rel/relcht.htm\">Socionics</a>\n3. <a href=\"https://sites.google.com/site/godlypersonalities/\">Godly Personalities</a>\n4. <a href=\"http://www.humanmetrics.com/\">Human Metrics</a>\n5. <a href=\"http://www.cognitiveprocesses.com/\">Cognitive Processes</a>\n6. <a href=\"https://en.wikipedia.org/wiki/Keirsey_Temperament_Sorter\">Temperment Sorte</a>\n7. <a href=\"http://subjectobjectmichaelpierce.blogspot.ca/2015/06/the-cheat-sheet.html\">Cheatsheet MBTI</a>\n","front_matter":"---\ntitle : Personality Types\nauthor: foobar\ntags: [philosophy]\ncopyright: CC BY-NC\n---","filename":"personality-types","mtime":"2015-12-10T11:57:09.770Z","mime":"text/plain","html":"\n\"Anyone who wants to know the human psyche will learn next to nothing\nfrom experimental psychology. He would be better advised to abandon exact\nscience, put away his scholar's gown, bid farewell to his study, and wander\nwith human heart throught the world. There in the horrors of prisons, lunatic\nasylums and hospitals, in drab suburban pubs, in brothels and gambling-hells,\nin the salons of the elegant, the Stock Exchanges, socialist meetings,\nchurches, revivalist gatherings and ecstatic sects, through love and hate,\nthrough the experience of passion in every form in his own body, he would reap\nricher stores of knowledge than text-books a foot thick could give him, and he\nwill know how to doctor the sick with a real knowledge of the human soul.\"\n\n-- Carl Jung\n\nThere are multiple systems for personality types.\n\n1. MBTI / Socionics\n2. Enneagram\n3. Four Temperments\n4. Elemental\n\nIs it possible to realize these types from the physiology of the brain ?\n\n<img src=\"images/mind.svg\"/>\n\nConsider the information pathways,\n\n1. Thinker (Earth, Melancholic, Rationals)\n2. Sensor (Wind, Phlegmatic, Artisans)\n3. Controller (Fire, Choleric, Guardians)\n4. Intuition (Water, Sanguine, Idealists)\n\nTotal personalities = 4 + 6 + 4 + 1 = 15.\n\n5. Instinct\n\nAnimals\n=======\n\nDeer (T)\nEagle (S)\nLion (C)\nTiger (I)\nSnake (N)\n\nThinking Styles\n===============\n\nAnalytical (T)\nSequential (S)\nInterpersonal (C)\nImaginative (I)\nAnimal (N)\n\nLearning Styles\n===============\n\nExploration (T)\nPerspectives (S)\nExperience (C)\nHistory (I)\nPractice (N)\n\nRomance Styles\n==============\n\nPlatonic (T)\nSensual (S)\nRomantic (C)\nCreative (I)\nAnimal (N)\n\nDecission Making Styles\n=======================\n\nAccuracy (T)\nHarmony (S)\nEffectiveness (C)\nAuthenticity (I)\nPower (N)\n\nFears\n=====\n\nIncompetence, Worthlessness  (T)\nTrapped, Harmed (S)\nImbalance, Corruption (C)\nInsignificance, Violated (I)\n\nFear of Loss, Separation, Control (N)\n\nMarriage with MBTI\n==================\nIntroverted Thinking  - T ( Systems )\nExtroverted Thinking - CT ( Facts )\nIntroverted Sensing - CS ( Taste )\nExtroverted Sensing - S ( Texture )\nExtroverted Intuition - CI ( Multiverse )\nIntroverted Intuition - I ( Imagination )\nExtroverted Feeling - CN ( Values )\nIntroverted Feeling - N ( Virtues )\n\nExtroversion, Introversion is mapped to Controller\nFeeling, Judging is mapped to Instinct\nPerceptiveness is mapped to sensing.\n\nActive Controller,\n\n1. Multiplies Sense Feedback\n2. Makes Thinking more Objective (ET)\n3. Filters Senses\n4. Forces the Intuition / Imagination to take reality into account.\n\nController is essentially Mind over Body.\nInstinct is Body over Mind.\n\nMisc\n====\n\n1. Best way to converse with people N, S C, I T followed by the others depending on the setting.\n   In other words give a feeling of assurance, talk sensually and objectivitly followed by anecodes of experience and logic.\n\n2. An unbalanced personality has weaknesses in one or more of the items.\n   With age, meeting different personality types, work partners this gets\n   blanced out in the end.\n\n3. This aspects that are least developed are usually called Inner Child / Shadow / Id\n   respectively.\n\n4. Reprression pushes things into intuition.\n\n5. Best way to work CT, CN, T, CI, C\n   In other words forget virtues, stick to values and facts, mould all possibilities to the single vision and taste victory.\n\n6.  Best way to evaluate S, I, CS, N\n    In other words see the texture, test its virtues, is it refined, does it tirgger the imagination ?\n\n1. <a href=\"http://www.personalityhacker.com/\">Personality Hacker</a>\n2. <a href=\"http://www.socionics.com/rel/relcht.htm\">Socionics</a>\n3. <a href=\"https://sites.google.com/site/godlypersonalities/\">Godly Personalities</a>\n4. <a href=\"http://www.humanmetrics.com/\">Human Metrics</a>\n5. <a href=\"http://www.cognitiveprocesses.com/\">Cognitive Processes</a>\n6. <a href=\"https://en.wikipedia.org/wiki/Keirsey_Temperament_Sorter\">Temperment Sorte</a>\n7. <a href=\"http://subjectobjectmichaelpierce.blogspot.ca/2015/06/the-cheat-sheet.html\">Cheatsheet MBTI</a>\n"},{"title":"Programmers are terrible","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\nAdjectives you can use to describe them,\n\n1. du·plic·i·tous\n2. mas·och·is·tic\n3. zeal·ots\n4. cree·py\n5. ar·ro·gant\n6. angsty\n7. pe·dan·tic\n7. cryp·tic\n8. e·van·ge·list\n9. sen·sa·tion·al·ist\n10. slop·py\n\nAnd most sadly,\n\n1. blind op·ti·mists\n\n","front_matter":"---\ntitle: \"Programmers are terrible\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"programmers-are-terrible","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nAdjectives you can use to describe them,\n\n1. du·plic·i·tous\n2. mas·och·is·tic\n3. zeal·ots\n4. cree·py\n5. ar·ro·gant\n6. angsty\n7. pe·dan·tic\n7. cryp·tic\n8. e·van·ge·list\n9. sen·sa·tion·al·ist\n10. slop·py\n\nAnd most sadly,\n\n1. blind op·ti·mists\n\n"},{"title":"Reactive Data Processing (The Story)","author":"foobar","tags":["programming","future"],"copyright":"CC BY-NC","__content":"\n\n<a href=\"https://github.com/harsha-mudi/rdp\">RDP</a>\n<a href=\"https://github.com/harsha-mudi/rdp/issues\">Issues / Feedback</a>\n\n<h3>Genesis</h3>\nI came across <a href=\"http://puredata.info/\">Pure Data</a> ~ 2 years back.\n\nThis year I came across the notions of asset pipelines and streams\nthanks to node.js and gulp.\n\nThis struck me as peculiar as pipelines are a part of shell\nprogramming as well.\n\nI investigated further and I found a multitude of names like\n\n1. Pipes and Filters\n1.1 Streams\n2. Component Oriented Programming\n3. Data Flow Programming\n\nThe following seemed related as well\n\n4. Event Oriented Programming\n4.1 State Machines\n5. Workflow Engines\n6. Messaging\n6.1 OOP\n6.2 Parallelism\n7. Spreadsheets\n\nMore importantly, in existing Engineering domains\nData Flow is the norm.\n\n8. Electronics\n8.1 DSP\n9. Avionics\n\nMaking Music has taught me a bit of DSP.\nI had to learn hands-on what tweaking a DSP filter <i>felt</i> like.\nI had an understanding of effect chains and mutli-track recording.\n\nI found some free time in my hands so I decided to implement a\ntiny framework for Data Flow.\n\nI read <a href=\"https://github.com/tailrecursion/javelin\">javelin's</a> source code and felt confident enough to attempt\nthis. javelin implements a powerful Spreadsheet Engine in very\nfew lines. It is a part of <a href=\"https://github.com/tailrecursion/hoplon\">hoplon webframework</a>.\n\nI decided to call it Data Processing rather than Data Flow Processing\nas a homage to the pre-computing Data Processing Machines of IBM.\n\nI disliked Software at this point, having found that most\nMusic Softwares pale in comparison to the feel of Hardware Synths.\nI used Breadboard and Electronics analogies instead Software's.\n\nI set out to answer\n\n* Can Low Level ideas Scale ?\n* Are they Readable ?\n\nAs of now, I believe <b>Low > High</b> on even more accounts.\n\n<h3>Implementation</h3>\nI scanned Pure Data's implementation and implemented\ninlets/outlets and objects(Systems) in js.\n\nI added abstractions of Namespace and Symbol, taken from Lisp, for addressability.\n\nAt this point I felt a dire need for State and Data Storage handling.\n\nHaving implemented a <a href=\"https://github.com/harsha-mudi/botes\">prototype of Entity Systems</a> earlier\nI added it to RDP.\n\nState was simply implemented as `this[\"foo\"] = ...` since\nSystems are Live Objects.\n\nI started writing an example app called Esti.\n\nThe first challenge was to define Data.\nI settled on the definition of Data as a Map&lt;Slot, Scalar&gt;.\n\nSlot is a string.\nI modelled Scalar after Lisp / Perl.\n\nThe second challenge was UI development.\n\nAlthough I love Pure Data's visual <a href=\"https://www.youtube.com/watch?v=NuJkKtlD4OE\">Live Object Oriented Programming</a>,\nI decided for a more traditional UI with Reactjs. DSP like Data Flow can be done\nin a traditional UI. Music Softwares are example of that.\n\nI added a Message Bus for decoupling UI from Data Flow.\nWhen Systems were done processing Data they could trigger an Impulse on the Bus.\nThe Bus would then interrupt another System.\n\nIn Electronics terms, messages are like Discrete Signals.\nPure Data also has a similar notion.\n\nThe Application was pretty straightforward.\nIt had a readable list if/else statements in one place, unlike OOP.\n\nDuring development, I discovered many important properties of Data flow based design\n\n1. Diagram Generation\n\n<a title=\"click for source\" href=\"https://github.com/harsha-mudi/esti/blob/master/source/js/diagrams.js\"><img src=\"images/esti.png\"/></a>,\nIt is difficult to explain to a stranger about what is happening here.\nBut to someone who is co-developer / manager ?\n\nOne can easily point out things like\n\n* What systems are working\n* Where the problems are\n* How does the data flow\n* Where new ones are needed\n\n2. Simulation\n\n<a href=\"https://github.com/harsha-mudi/esti/blob/master/sim.xml\">This.</a>\n\n<a href=\"https://github.com/harsha-mudi/esti/blob/master/source/js/simulations.js#24\">That's 330 task events, each of which has a clock that ran atleast\nrandomInt(3600, 7200) ticks to simulate the app in ~ 100 lines of js</a>.\n\nSince Data between Systems is communicated explicitly, it is very easy to fake it.\nThis advantage is also gotten with pure Messaging.\n\n3. Step Debugging ?\n\n<iframe src=\"//player.vimeo.com/video/102414660\" width=\"500\" height=\"375\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nThis is like an Electronics Engineer reading the input and output\nsignals of a Component.\n\nI feel\n\n<b>Electronics is like Broadway and Software is more of a Movie.</b>\n\n4. RPC\n\n<iframe src=\"//player.vimeo.com/video/102371548\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nI call this \"mirroring\" where Signals are spread across interested Systems.\nIn this case, Signals by the User.\n\n<hr>\nI picked a Japanese symbol (~ transfer) for a logo.\n\n<h1>迁</h1>\n<hr>\n<h3>Limbo</h3>\nAt this point, I discovered\n\n1. <a href=\"http://dataflowbook.com/cms/\">A book</a>\n2. <a href=\"https://noflojs.org\">NoFlo</a>\n3. <a href=\"http://www.jpaulmorrison.com/fbp/\">fbp</a>\n\nI interacted with the fbp community and discovered\nthat RDP comes under the reactive spectrum.  Noflo is\nboth reactive and classic.\n\n<h3>Hole in the Flow</h3>\nRDP 0.3 has a major flaw.\n\nAs I used `this` to hold State, A System could only be a part of\none Data Flow at a time.\n\nThis seems fine for single user applications but for\nmulti user applications (servers, games ..) it causes data corruption.\n\nMaking RDP functional felt like yet another puritan way of avoiding the problem.\n\nIt was hopeless until I found out about <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.1645\">Monsoon: an explicit token-store architecture</a>.\n\n<b>TL;DR Systems can have as much State as they want want\nas long as a new Token is issued for each Data Flow.</b>\n\nA Token has a Frame analogous to a\n\n1. A Session Object (more)\n2. A Stackframe (less)\n3. A Continuation (lesser)\n\nThis makes RDP unique as it implements Data Flow Programming on top\nof a Data Flow Processor Architecture.\n\n<h3>Nojs</h3>\nC++ style inheritance is needed for RDP.\njs sucks for this.\n\nCoffeescript's model of OOP doesn't translate well\nfor other js programmers.\n\nI ported to ruby because of this.\nThanks to <a href=\"https://github.com/opal/opal\">opal</a> I can target js as well.\n\nI renamed Data to Datron.\nIt has a merge method `d1.merge(d2)`, which I hope makes it more like electrons.\n\n<h3>Viva Low Level!</h3>\nThe move from Assembly to High Level has resulted in a\nloss of significant number of Abstractions\n\n1. Memory Management\n\nManual management and Layout leads to efficient Data Structures.\nHigh Level languages are plagued by overuse of Maps.\n\nLow Level programmers are more keenly aware of Memory Corruption, Leaks\nEstimation and Calculation.\n\nSince a good Data Structure can reduce Algorithmic Complexity,\nMemory Management can affect perceived Speed and Power Consumption.\n\n2. Interrupts\n\nAssembly languages have First Class Event Oriented Programming built-in.\nHigh Level languages use external APIs.\n\nIn this sense, Go's Channels are a step backward.\n\n3. Advanced Data Structures\n\nBuilt-in support for matrices, queues, stacks, bounded buffers, caches ...\n\nAren't High Level languages narrow in providing just \nArray operations ?\n\n4. Awareness of OS and Concurrency\n\nAgain, built-in support.\nHigh Level languages create a rigid shield between the programmer\nfrom the very system they are trying to code.\n\n5. 1-1 Mapping with the Host\n\nNo action at a distance.\nThis makes Debugging straightforward.\n<hr>\n\nCo-routines are of the highest order of flexibility\nand it's just one of Assembly Programmer's Hacks.\n\n<a href=\"http://pdos.csail.mit.edu/~rsc/kahn77parallel.pdf\"><b>Have we forgotten how the Wheel was Invented ?</b></a></article>\n\n\n","front_matter":"---\ntitle: \"Reactive Data Processing (The Story)\"\nauthor: foobar\ntags: [programming, future]\ncopyright: CC BY-NC\n---","filename":"rdp","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n<a href=\"https://github.com/harsha-mudi/rdp\">RDP</a>\n<a href=\"https://github.com/harsha-mudi/rdp/issues\">Issues / Feedback</a>\n\n<h3>Genesis</h3>\nI came across <a href=\"http://puredata.info/\">Pure Data</a> ~ 2 years back.\n\nThis year I came across the notions of asset pipelines and streams\nthanks to node.js and gulp.\n\nThis struck me as peculiar as pipelines are a part of shell\nprogramming as well.\n\nI investigated further and I found a multitude of names like\n\n1. Pipes and Filters\n1.1 Streams\n2. Component Oriented Programming\n3. Data Flow Programming\n\nThe following seemed related as well\n\n4. Event Oriented Programming\n4.1 State Machines\n5. Workflow Engines\n6. Messaging\n6.1 OOP\n6.2 Parallelism\n7. Spreadsheets\n\nMore importantly, in existing Engineering domains\nData Flow is the norm.\n\n8. Electronics\n8.1 DSP\n9. Avionics\n\nMaking Music has taught me a bit of DSP.\nI had to learn hands-on what tweaking a DSP filter <i>felt</i> like.\nI had an understanding of effect chains and mutli-track recording.\n\nI found some free time in my hands so I decided to implement a\ntiny framework for Data Flow.\n\nI read <a href=\"https://github.com/tailrecursion/javelin\">javelin's</a> source code and felt confident enough to attempt\nthis. javelin implements a powerful Spreadsheet Engine in very\nfew lines. It is a part of <a href=\"https://github.com/tailrecursion/hoplon\">hoplon webframework</a>.\n\nI decided to call it Data Processing rather than Data Flow Processing\nas a homage to the pre-computing Data Processing Machines of IBM.\n\nI disliked Software at this point, having found that most\nMusic Softwares pale in comparison to the feel of Hardware Synths.\nI used Breadboard and Electronics analogies instead Software's.\n\nI set out to answer\n\n* Can Low Level ideas Scale ?\n* Are they Readable ?\n\nAs of now, I believe <b>Low > High</b> on even more accounts.\n\n<h3>Implementation</h3>\nI scanned Pure Data's implementation and implemented\ninlets/outlets and objects(Systems) in js.\n\nI added abstractions of Namespace and Symbol, taken from Lisp, for addressability.\n\nAt this point I felt a dire need for State and Data Storage handling.\n\nHaving implemented a <a href=\"https://github.com/harsha-mudi/botes\">prototype of Entity Systems</a> earlier\nI added it to RDP.\n\nState was simply implemented as `this[\"foo\"] = ...` since\nSystems are Live Objects.\n\nI started writing an example app called Esti.\n\nThe first challenge was to define Data.\nI settled on the definition of Data as a Map&lt;Slot, Scalar&gt;.\n\nSlot is a string.\nI modelled Scalar after Lisp / Perl.\n\nThe second challenge was UI development.\n\nAlthough I love Pure Data's visual <a href=\"https://www.youtube.com/watch?v=NuJkKtlD4OE\">Live Object Oriented Programming</a>,\nI decided for a more traditional UI with Reactjs. DSP like Data Flow can be done\nin a traditional UI. Music Softwares are example of that.\n\nI added a Message Bus for decoupling UI from Data Flow.\nWhen Systems were done processing Data they could trigger an Impulse on the Bus.\nThe Bus would then interrupt another System.\n\nIn Electronics terms, messages are like Discrete Signals.\nPure Data also has a similar notion.\n\nThe Application was pretty straightforward.\nIt had a readable list if/else statements in one place, unlike OOP.\n\nDuring development, I discovered many important properties of Data flow based design\n\n1. Diagram Generation\n\n<a title=\"click for source\" href=\"https://github.com/harsha-mudi/esti/blob/master/source/js/diagrams.js\"><img src=\"images/esti.png\"/></a>,\nIt is difficult to explain to a stranger about what is happening here.\nBut to someone who is co-developer / manager ?\n\nOne can easily point out things like\n\n* What systems are working\n* Where the problems are\n* How does the data flow\n* Where new ones are needed\n\n2. Simulation\n\n<a href=\"https://github.com/harsha-mudi/esti/blob/master/sim.xml\">This.</a>\n\n<a href=\"https://github.com/harsha-mudi/esti/blob/master/source/js/simulations.js#24\">That's 330 task events, each of which has a clock that ran atleast\nrandomInt(3600, 7200) ticks to simulate the app in ~ 100 lines of js</a>.\n\nSince Data between Systems is communicated explicitly, it is very easy to fake it.\nThis advantage is also gotten with pure Messaging.\n\n3. Step Debugging ?\n\n<iframe src=\"//player.vimeo.com/video/102414660\" width=\"500\" height=\"375\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nThis is like an Electronics Engineer reading the input and output\nsignals of a Component.\n\nI feel\n\n<b>Electronics is like Broadway and Software is more of a Movie.</b>\n\n4. RPC\n\n<iframe src=\"//player.vimeo.com/video/102371548\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\nI call this \"mirroring\" where Signals are spread across interested Systems.\nIn this case, Signals by the User.\n\n<hr>\nI picked a Japanese symbol (~ transfer) for a logo.\n\n<h1>迁</h1>\n<hr>\n<h3>Limbo</h3>\nAt this point, I discovered\n\n1. <a href=\"http://dataflowbook.com/cms/\">A book</a>\n2. <a href=\"https://noflojs.org\">NoFlo</a>\n3. <a href=\"http://www.jpaulmorrison.com/fbp/\">fbp</a>\n\nI interacted with the fbp community and discovered\nthat RDP comes under the reactive spectrum.  Noflo is\nboth reactive and classic.\n\n<h3>Hole in the Flow</h3>\nRDP 0.3 has a major flaw.\n\nAs I used `this` to hold State, A System could only be a part of\none Data Flow at a time.\n\nThis seems fine for single user applications but for\nmulti user applications (servers, games ..) it causes data corruption.\n\nMaking RDP functional felt like yet another puritan way of avoiding the problem.\n\nIt was hopeless until I found out about <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.1645\">Monsoon: an explicit token-store architecture</a>.\n\n<b>TL;DR Systems can have as much State as they want want\nas long as a new Token is issued for each Data Flow.</b>\n\nA Token has a Frame analogous to a\n\n1. A Session Object (more)\n2. A Stackframe (less)\n3. A Continuation (lesser)\n\nThis makes RDP unique as it implements Data Flow Programming on top\nof a Data Flow Processor Architecture.\n\n<h3>Nojs</h3>\nC++ style inheritance is needed for RDP.\njs sucks for this.\n\nCoffeescript's model of OOP doesn't translate well\nfor other js programmers.\n\nI ported to ruby because of this.\nThanks to <a href=\"https://github.com/opal/opal\">opal</a> I can target js as well.\n\nI renamed Data to Datron.\nIt has a merge method `d1.merge(d2)`, which I hope makes it more like electrons.\n\n<h3>Viva Low Level!</h3>\nThe move from Assembly to High Level has resulted in a\nloss of significant number of Abstractions\n\n1. Memory Management\n\nManual management and Layout leads to efficient Data Structures.\nHigh Level languages are plagued by overuse of Maps.\n\nLow Level programmers are more keenly aware of Memory Corruption, Leaks\nEstimation and Calculation.\n\nSince a good Data Structure can reduce Algorithmic Complexity,\nMemory Management can affect perceived Speed and Power Consumption.\n\n2. Interrupts\n\nAssembly languages have First Class Event Oriented Programming built-in.\nHigh Level languages use external APIs.\n\nIn this sense, Go's Channels are a step backward.\n\n3. Advanced Data Structures\n\nBuilt-in support for matrices, queues, stacks, bounded buffers, caches ...\n\nAren't High Level languages narrow in providing just \nArray operations ?\n\n4. Awareness of OS and Concurrency\n\nAgain, built-in support.\nHigh Level languages create a rigid shield between the programmer\nfrom the very system they are trying to code.\n\n5. 1-1 Mapping with the Host\n\nNo action at a distance.\nThis makes Debugging straightforward.\n<hr>\n\nCo-routines are of the highest order of flexibility\nand it's just one of Assembly Programmer's Hacks.\n\n<a href=\"http://pdos.csail.mit.edu/~rsc/kahn77parallel.pdf\"><b>Have we forgotten how the Wheel was Invented ?</b></a></article>\n\n\n"},{"title":"Renoise + Plugins","author":"foobar","tags":["music"],"copyright":"CC BY","__content":"\n<a href=\"https://soundcloud.com/mr-foobar/journey\">Made my third renoise track.</a>\n\nUp until now I have been using renoise for post production EQ-ing.\nRenoise is surprisingly good at that.\n\nOne of the advantages of Electribe is the intuitive feel of it all.\nRenoise however allows more complex editing to take place.\n\nNote for purists: I intend to make renoise workflow like hardware.\nI want to produce the tracks imporvised live much like Electribe.\n\nRenoise Plugins\n===============\n\n1. Grid Pie\n2. Step Sequencer\n\nI tried meddling with Renoise automation with keyboards.\nI'll stick to MIDI I guess.\n\nVST Plugins\n===========\nRenoise is already good with sampling comes with 909 samples.\n\nReverb + Delay are too complicated in renoise.\nThankfully TAL has good plugins here.\n\nVSTi\n====\nTAL Juno vst.\nCustom Wave Generator is a nice renoise plugin for some Saws.\n\nLive\n====\n\nUsing Grid Pie, Audio Hijack for System audio capture and MIDI I was able to do the whole track live.\nI had to bend over backwards to control MIDI knobs and the mouse.\n\nThis setup can definitely be used for long sessions.\nGrid Pie comes with 8x8 which should do quite well.\n\nIssues\n======\n\nVST windows and Grid Pie don't work well together.\n\n","front_matter":"---\ntitle: \"Renoise + Plugins\"\nauthor: foobar\ntags: [music]\ncopyright: CC BY\n---","filename":"renoise","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n<a href=\"https://soundcloud.com/mr-foobar/journey\">Made my third renoise track.</a>\n\nUp until now I have been using renoise for post production EQ-ing.\nRenoise is surprisingly good at that.\n\nOne of the advantages of Electribe is the intuitive feel of it all.\nRenoise however allows more complex editing to take place.\n\nNote for purists: I intend to make renoise workflow like hardware.\nI want to produce the tracks imporvised live much like Electribe.\n\nRenoise Plugins\n===============\n\n1. Grid Pie\n2. Step Sequencer\n\nI tried meddling with Renoise automation with keyboards.\nI'll stick to MIDI I guess.\n\nVST Plugins\n===========\nRenoise is already good with sampling comes with 909 samples.\n\nReverb + Delay are too complicated in renoise.\nThankfully TAL has good plugins here.\n\nVSTi\n====\nTAL Juno vst.\nCustom Wave Generator is a nice renoise plugin for some Saws.\n\nLive\n====\n\nUsing Grid Pie, Audio Hijack for System audio capture and MIDI I was able to do the whole track live.\nI had to bend over backwards to control MIDI knobs and the mouse.\n\nThis setup can definitely be used for long sessions.\nGrid Pie comes with 8x8 which should do quite well.\n\nIssues\n======\n\nVST windows and Grid Pie don't work well together.\n\n"},{"title":"Shell Programming","author":"foobar","tags":["programming","scripting"],"copyright":"CC BY","__content":"\n\nI have difficulty remembering bash/sh/zsh syntax.\nI can perl.\n\n```.zshrc\ncommand_not_found_handler () {\n    ~/bin/zsh.pl $*\n}\n```\n\nYou can see my dotfiles <a href=\"https://github.com/harsha-mudi/dotfiles\">here</a>.\n\n","front_matter":"---\ntitle: \"Shell Programming\"\nauthor: foobar\ntags: [programming , scripting]\ncopyright: CC BY\n---","filename":"shell-programming","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nI have difficulty remembering bash/sh/zsh syntax.\nI can perl.\n\n```.zshrc\ncommand_not_found_handler () {\n    ~/bin/zsh.pl $*\n}\n```\n\nYou can see my dotfiles <a href=\"https://github.com/harsha-mudi/dotfiles\">here</a>.\n\n"},{"title":"Safe Free Speech","author":"foobar","tags":["programming","philosophy"],"copyright":"CC BY NC","__content":"\n\nOpen Source Programming is heavily dependent on communication\nchannels.\n\nIRC, Mailing Lists, Conferences, Web ...\n\nBecause of its global nature, it's very difficult to obey\nall legal laws.\n\nThere are some controversies w.r.t the names and abbreviations\nused in <a href=\"https://gist.github.com/omega8cc/fa97ea1d471e1108ab35\">public code.</a>\n\nBesides, Newspeak is a terrible (programming) language.\n\nEach community is coming up with its own S.O.C's but they are too\nnarrow or too obvious.\n\nTo avoid unnecessary flamings, here are some guidelines for\nSafe Free Speech, for the Individual.\n\n0. There are no rules.\n1. If you can use clean language, prefer it.\n   If you have to be dirty, add a bit of context.\n2. If you have to discuss grey-areas, prefer using existing\n   legal protections.\n3. Avoid Discrimination. Exceptions can always be found.\n4. Hug before you hate.\n\n","front_matter":"---\ntitle: \"Safe Free Speech\"\nauthor: foobar\ntags: [programming, philosophy]\ncopyright: CC BY NC\n---","filename":"soc","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nOpen Source Programming is heavily dependent on communication\nchannels.\n\nIRC, Mailing Lists, Conferences, Web ...\n\nBecause of its global nature, it's very difficult to obey\nall legal laws.\n\nThere are some controversies w.r.t the names and abbreviations\nused in <a href=\"https://gist.github.com/omega8cc/fa97ea1d471e1108ab35\">public code.</a>\n\nBesides, Newspeak is a terrible (programming) language.\n\nEach community is coming up with its own S.O.C's but they are too\nnarrow or too obvious.\n\nTo avoid unnecessary flamings, here are some guidelines for\nSafe Free Speech, for the Individual.\n\n0. There are no rules.\n1. If you can use clean language, prefer it.\n   If you have to be dirty, add a bit of context.\n2. If you have to discuss grey-areas, prefer using existing\n   legal protections.\n3. Avoid Discrimination. Exceptions can always be found.\n4. Hug before you hate.\n\n"},{"title":"Software Development Is Not Engineering","author":"foobar","tags":["engineering","quote"],"copyright":"CC BY-NC","__content":"\n\n<blockquote>\n<b>Security:</b> The principle that every syntactically incorrect\nprogram should be rejected by the compiler and that every syntactically\ncorrect program should give a result or an error message that was\npredictable and comprehensible in terms of the source language\nprogram itself. Thus no core dumps should ever be necessary. It was\nlogically impossible for any source language program to cause the\ncomputer to run wild, either at compile time or at run time. A\nconsequence of this principle is that every occurrence of every\nsubscript of every subscripted variable was on every occasion checked\nat run time against both the upper and the lower declared bounds\nof the array. Many years later we asked our customers whether they\nwished us to provide an option to switch off these checks in the\ninterests of efficiency on production runs.  Unanimously, they urged\nus not to - they already knew how frequently subscript errors occur\non production runs where failure to detect them could be disastrous.\nI note with fear and horror that even in 1980, language designers\nand users have not learned this lesson. In any respectable branch\nof engineering, failure to observe such elementary precautions would\nhave long been against the law.</blockquote>\n    <i>From The Emperor's Old Clothes,\n    By C.A.R. Hoare,\n    Communications of the ACM, 1981. </i>\n\nSoftware developers should stop calling themselves Engineers.\nEngineering means <a href=\"http://heartbleed.com/\">Reliability</a>.\n\n","front_matter":"---\ntitle: \"Software Development Is Not Engineering\"\nauthor: foobar\ntags: [engineering, quote]\ncopyright: CC BY-NC\n---","filename":"software-dev-is-not-engineering","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n<blockquote>\n<b>Security:</b> The principle that every syntactically incorrect\nprogram should be rejected by the compiler and that every syntactically\ncorrect program should give a result or an error message that was\npredictable and comprehensible in terms of the source language\nprogram itself. Thus no core dumps should ever be necessary. It was\nlogically impossible for any source language program to cause the\ncomputer to run wild, either at compile time or at run time. A\nconsequence of this principle is that every occurrence of every\nsubscript of every subscripted variable was on every occasion checked\nat run time against both the upper and the lower declared bounds\nof the array. Many years later we asked our customers whether they\nwished us to provide an option to switch off these checks in the\ninterests of efficiency on production runs.  Unanimously, they urged\nus not to - they already knew how frequently subscript errors occur\non production runs where failure to detect them could be disastrous.\nI note with fear and horror that even in 1980, language designers\nand users have not learned this lesson. In any respectable branch\nof engineering, failure to observe such elementary precautions would\nhave long been against the law.</blockquote>\n    <i>From The Emperor's Old Clothes,\n    By C.A.R. Hoare,\n    Communications of the ACM, 1981. </i>\n\nSoftware developers should stop calling themselves Engineers.\nEngineering means <a href=\"http://heartbleed.com/\">Reliability</a>.\n\n"},{"title":"Stateful Dataflow","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\nData Flow is represented by a Graph.\n\nGraph = Nodes + Connections.\n\nState in Data Flow\n\n1. Stateless\n\n2. Global\n\nCorruption is easy.\n\n3. Parent / Child\n\n4. Node Local\n\nNode becomes a co-routine.\nDestruction of the state is problematic.\n\n5. Concurrent\n\nGraph becomes an OS.\nNode becomes a Process.\n\nState Machines\n==============\n\nI should be more mathematical, but fuck mathematicians.\nIf a mathematician ever asks me to add two numbers I will gladly give him <a href=\"https://code.jquery.com/jquery-1.11.1.min.js\">this</a>.\n\nState Machines are like depressed data flows.\nData Flow graph gets giddy and excited on receiving events whereas\nState Machines think and brood.\n\nThey consult the\n    1. Decision table\n    2. Past lives\n    3. The current input dilemma\n    and then commit to an action which begets fruitful data.\n\nThe depressed state machine can't do two tasks at a time because it's past will lose meaning.\nEvery task is like a transaction.\n\ngoto's + global variables is like 2.\nA C function calling another function is like 3.\nA co-routine yielding to another co-routine is 4.\nAnd 5 is Actor Model aka Processes + IPC !\n\nAfter concurrency, State Machines =~ Data Flow Processes.\n\nSigh.\n\nIt's sad to see functional programmers stuck at 1 when in fact assembly programmers had 5\nand Data Driven Style of programming.\n\nIn pure assembly, you can do whatever the fuck you want.\nRAM is a Decision Table and Co-routines / Processes -- 5 -- are just a Context Switch away !\n\nC / Pascal are a step backwards in programming by going from 5 to 3.\n\nAll high level perspectives are flawed.\nForth / Lisp originated in assembly.\nBy far they still represent the most flexible languages.\nI can't even imagine the CPU thrashing done by a real pre-80's Lisp.\nViva Low Level !\n\n","front_matter":"---\ntitle: \"Stateful Dataflow\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"stateful-dataflow","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\nData Flow is represented by a Graph.\n\nGraph = Nodes + Connections.\n\nState in Data Flow\n\n1. Stateless\n\n2. Global\n\nCorruption is easy.\n\n3. Parent / Child\n\n4. Node Local\n\nNode becomes a co-routine.\nDestruction of the state is problematic.\n\n5. Concurrent\n\nGraph becomes an OS.\nNode becomes a Process.\n\nState Machines\n==============\n\nI should be more mathematical, but fuck mathematicians.\nIf a mathematician ever asks me to add two numbers I will gladly give him <a href=\"https://code.jquery.com/jquery-1.11.1.min.js\">this</a>.\n\nState Machines are like depressed data flows.\nData Flow graph gets giddy and excited on receiving events whereas\nState Machines think and brood.\n\nThey consult the\n    1. Decision table\n    2. Past lives\n    3. The current input dilemma\n    and then commit to an action which begets fruitful data.\n\nThe depressed state machine can't do two tasks at a time because it's past will lose meaning.\nEvery task is like a transaction.\n\ngoto's + global variables is like 2.\nA C function calling another function is like 3.\nA co-routine yielding to another co-routine is 4.\nAnd 5 is Actor Model aka Processes + IPC !\n\nAfter concurrency, State Machines =~ Data Flow Processes.\n\nSigh.\n\nIt's sad to see functional programmers stuck at 1 when in fact assembly programmers had 5\nand Data Driven Style of programming.\n\nIn pure assembly, you can do whatever the fuck you want.\nRAM is a Decision Table and Co-routines / Processes -- 5 -- are just a Context Switch away !\n\nC / Pascal are a step backwards in programming by going from 5 to 3.\n\nAll high level perspectives are flawed.\nForth / Lisp originated in assembly.\nBy far they still represent the most flexible languages.\nI can't even imagine the CPU thrashing done by a real pre-80's Lisp.\nViva Low Level !\n\n"},{"title":"My Favorite Syntax Bits","author":"foobar","tags":["programming"],"copyright":"CC BY-NC","__content":"\n\n# C\n++ +=\nif, for, while, struct\nif expr statement\ninfix\n\n# C++ / Java\ncout << \"Hello World\"\nauto\n~Foo\n::\nthis\n\n# Sh\n$vars\n<< 'Here'\n`cmd args`\n\n# Perl\n%hash and =>\n`my $foo = 5` is an expr\ndo, bless\nqw, / /\n'a' .. 'z'\nloop lables\ngoto $label (also in gcc)\n__DATA__\n\n# Perl6\n?? !!\nsay\nmy \\var\njunctions\ncustom operators\n:types\nmultimethods\n\n# Python\n*kwargs\ngenerators\nin is not and or\nnested functions\nyield\nwith\npass\ndecorators\n\n# Ruby\n:symbol\ndo .. end\nswitch\n\"foo\".upcase()\nparen free style\nblocks\nmeta programming\n\"#{interpolation}\"\n\n# Small Talk\nif:\n\n# CL / CLJ\nnames-likes-this\narbitrbary nesting\nmacros\n->\n->>\n\n# go\ndeclaration syntax\ngoroutines\n\n# Template engines\nasp\n\n# *ml, prolog\nNil\n\n# JS\nundefined, null\n\n# Scala\nNull, null, Nil, Nothing, None\n","front_matter":"---\ntitle: \"My Favorite Syntax Bits\"\nauthor: foobar\ntags: [programming]\ncopyright: CC BY-NC\n---","filename":"syntax","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\n# C\n++ +=\nif, for, while, struct\nif expr statement\ninfix\n\n# C++ / Java\ncout << \"Hello World\"\nauto\n~Foo\n::\nthis\n\n# Sh\n$vars\n<< 'Here'\n`cmd args`\n\n# Perl\n%hash and =>\n`my $foo = 5` is an expr\ndo, bless\nqw, / /\n'a' .. 'z'\nloop lables\ngoto $label (also in gcc)\n__DATA__\n\n# Perl6\n?? !!\nsay\nmy \\var\njunctions\ncustom operators\n:types\nmultimethods\n\n# Python\n*kwargs\ngenerators\nin is not and or\nnested functions\nyield\nwith\npass\ndecorators\n\n# Ruby\n:symbol\ndo .. end\nswitch\n\"foo\".upcase()\nparen free style\nblocks\nmeta programming\n\"#{interpolation}\"\n\n# Small Talk\nif:\n\n# CL / CLJ\nnames-likes-this\narbitrbary nesting\nmacros\n->\n->>\n\n# go\ndeclaration syntax\ngoroutines\n\n# Template engines\nasp\n\n# *ml, prolog\nNil\n\n# JS\nundefined, null\n\n# Scala\nNull, null, Nil, Nothing, None\n"},{"title":"this that selves","author":"foobar","tags":["fun","javascript","coffeescript","programming"],"copyright":"CC BY NC","__content":"\n\n> \"How can different things look the same ?\n   I don't know man, I didn't do it.\"\n\nIn OOP, self-reference of the Object is achieved with a\nspecial keyword, typically `this` or `self`.\n\nC++/Java/Ruby/PHP\n=================\n\n`this` resolves to the current object and the parent object.\nLike, `this.parent or super( this ) or $self->SUPER::`.\n\nMultiple Inheritance Or Which This is That\n==========================================\n\nWith multiple parents, `this` can refer to the wrong parent.\n\nSingle inheritance is preferred for this reason.\n\nThis is also called the diamond problem.\n\nC3 solves this problem by taking into the account the ordering\nof the parents.\n\nPython/Perl\n===========\n\nPerl's object model is inspired from python.\n\nRoughly put, Methods == Functions, with a special first argument.\n\nIn perl you `bless $stuff` and in python you have,\n\n```py\nclass Foo(object):\n    pass\n```\n\nthis's confusing !\n==================\n\nIn javascript, every function has a \"this\".\n\nThis means you sometimes do,\n\n```js\nfunction foo() {\n    var that = this;\n    // or var self = this;\n\n    function bar() {\n        that.doSomething();\n    }\n}\n```\n\nWith callback functions, this becomes useful.\n\nIt's painful to write an extra declaration, just like in\nperl or python.\n\nSo I present to you selves, which makes writing declarations\nobligatory.\n\n```js\n<a href=\"https://github.com/harsha-mudi/yx/blob/master/index.js\">var yx = require('yx');</a>\n\nfunction foo() {\n    var selfs = new yx.__selves();\n    selfs(this);\n\n    selfs().i.youShoudHaveDoneThat = function () {\n        return \"I Told You So!\";\n    }\n\n    this.bar = function () {\n        selfs(this);\n        test.equal(selfs().previous.youShoudHaveDoneThat(), \"I Told You So!\");\n\n        this.doSomething = function () {\n            console.log(\"But but ... !\");\n        }\n    }\n}\n```\n\nYou should really be using the => from coffeescript.\nAnother approach is,\n\n```js\nfunction foo() {\n\n    function bar(x,y) {\n        //...\n    }.bind(this);\n}\n```\n\nYou can install <a href=\"https://github.com/harsha-mudi/yx\">[yx]</a> with `npm install yx`.\nyx provides coffeescript's internal methods like __extends for use in js.\n\n::Credits\n\n#perl and #node.js from freednode.\n\n","front_matter":"---\ntitle: \"this that selves\"\nauthor: foobar\ntags: [fun, javascript, coffeescript, programming]\ncopyright: CC BY NC\n---","filename":"this-that-selves","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n> \"How can different things look the same ?\n   I don't know man, I didn't do it.\"\n\nIn OOP, self-reference of the Object is achieved with a\nspecial keyword, typically `this` or `self`.\n\nC++/Java/Ruby/PHP\n=================\n\n`this` resolves to the current object and the parent object.\nLike, `this.parent or super( this ) or $self->SUPER::`.\n\nMultiple Inheritance Or Which This is That\n==========================================\n\nWith multiple parents, `this` can refer to the wrong parent.\n\nSingle inheritance is preferred for this reason.\n\nThis is also called the diamond problem.\n\nC3 solves this problem by taking into the account the ordering\nof the parents.\n\nPython/Perl\n===========\n\nPerl's object model is inspired from python.\n\nRoughly put, Methods == Functions, with a special first argument.\n\nIn perl you `bless $stuff` and in python you have,\n\n```py\nclass Foo(object):\n    pass\n```\n\nthis's confusing !\n==================\n\nIn javascript, every function has a \"this\".\n\nThis means you sometimes do,\n\n```js\nfunction foo() {\n    var that = this;\n    // or var self = this;\n\n    function bar() {\n        that.doSomething();\n    }\n}\n```\n\nWith callback functions, this becomes useful.\n\nIt's painful to write an extra declaration, just like in\nperl or python.\n\nSo I present to you selves, which makes writing declarations\nobligatory.\n\n```js\n<a href=\"https://github.com/harsha-mudi/yx/blob/master/index.js\">var yx = require('yx');</a>\n\nfunction foo() {\n    var selfs = new yx.__selves();\n    selfs(this);\n\n    selfs().i.youShoudHaveDoneThat = function () {\n        return \"I Told You So!\";\n    }\n\n    this.bar = function () {\n        selfs(this);\n        test.equal(selfs().previous.youShoudHaveDoneThat(), \"I Told You So!\");\n\n        this.doSomething = function () {\n            console.log(\"But but ... !\");\n        }\n    }\n}\n```\n\nYou should really be using the => from coffeescript.\nAnother approach is,\n\n```js\nfunction foo() {\n\n    function bar(x,y) {\n        //...\n    }.bind(this);\n}\n```\n\nYou can install <a href=\"https://github.com/harsha-mudi/yx\">[yx]</a> with `npm install yx`.\nyx provides coffeescript's internal methods like __extends for use in js.\n\n::Credits\n\n#perl and #node.js from freednode.\n\n"},{"title":"Uroborosism™","author":"An Individual","tags":["philosophy","religion","theology"],"copyright":"Public Domain","__content":"\n\n<div style=\"font-size:42px\">⟲</div>\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/ZsLFDI3ftM4\" frameborder=\"0\" allowfullscreen></iframe>\n\nMotto            - A Being unto Thyself\nPronounciation   - oo-roh-BOH-roh-sism\nMore Soundtracks - <a class=\"nw\" href=\"#\">play in a new window</a>\n<script class=\"autospace\" type=\"text/javascript\">\n     $(\"a.nw\").on(\"click\", function() {\n         console.log(\"here\");\n         window.open(\"http://bit.ly/1ikFVLJ\", '_blank');\n    });\n</script>\n\nGenesis\n=======\n\n* Uroborosism is the Worship of Creativity and Inspiration in its Primal form,\n  along with the Individual and his Work.\n\n* It is an Individualist Religion with Bullet Points.\n\n* This Religion is half-serious than a complete-joke.\n\n* This Religion is a modern continuation of the <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">Uroboros cult</a>.\n\nBeliefs\n=======\n\n* God as an Artistic interpretation and longing can be used for\n  Humour, Pathos, Catharsis or any other tingeing of Emotion.\n\n  For Example,\n  Jesus weeps when you hit a child.\n\n* The Dialectic in the Heart with Faith or Any lack thereof\n  is up to the Individual.\n\nRankings\n========\n\n* Hero for Courageous deeds.\n** Any soldier by default is a Hero.\n* Angel for Social and Artistic deeds.\n* Genius for Inventors and Creators.\n* Saint for Philosophers par excellence.\n\n(The above are gender neutral terms)\n\nPantheon\n========\n\n* The Muses -- Clio, Thalia, Erato, Euterpe, Polyhymnia, Calliope,\n               Terpsichore, Urania, Melpomene.\n\n* Numbers and the Night Sky.\n\nAncestor Worship\n================\n\n* Remembrance of Individuals who struggled and produced great\n  creative things despite NAYSAYERS.\n\nPrayer\n======\n\n* Solitude, with or without *rugs.\n** Sobriety is encouraged.\n\n* In temples one may Pray for the Strength of the Enemy,\n  so that one can have great Pride in defeating.\n\nChurch\n======\n\n* Reflection\n\nCosmos\n======\n\n* Eternal Return\n\nEthics\n======\n\n* Anti-Censorship\n* Anti-Killing\n* Anti-Torture\n* Old School Virtues\n\nWork Ethics\n===========\n\n* Challenging over Mechanical.\n\nAesthetics\n==========\n\n* Fidelity\n* Honesty\n* Mastery\n* Sublime\n\nSin\n===\n\n* To use Uroborosian in plural forms.\n\nHeaven\n======\n\n* Work well done.\n\nHell\n====\n\n* Other people.\n\nHeresies\n========\n\n* Hypocrisy™\n* Indolence\n\nMarriage\n========\n\n* As dictated by the Heart.\n\nPatron God\n==========\n\n* Dionysus\n\nPatron Animal\n=============\n\n* Levithan\n\nFriendly Religions\n==================\n\n* Zen\n* Stoics\n* Cynics\n* Taoism\n* Discordianism\n\nMonkhood\n========\n\n* <a href=\"https://en.wikipedia.org/wiki/Henry_David_Thoreau\">Self-Reliance</a>\n\nLife After Death\n================\n\n* Worms, Dogs, Vultures, Flies feasting on your dead body and\n  ridicule if you are any good.\n\nLiterature\n==========\n\n* <a href=\"http://www.accesstoinsight.org/\">http://www.accesstoinsight.org</a>\n* <a href=\"http://www.taoism.net/\">http://www.taoism.net/</a>\n* <a href=\"http://hermetic.com/texts/plato/timaeus.html\">Timaeus</a>\n* Autobiographies of &lt;your-favorite-person&gt;\n\nMyths\n=====\n\nI was sitting, writing at my text-book; but the work did not progress;\nmy thoughts were elsewhere. I turned my chair to the fire and dozed.\nAgain the atoms were gamboling before my eyes. This time the smaller\ngroups kept modestly in the background. My mental eye, rendered\nmore acute by the repeated visions of the kind, could now distinguish\nlarger structures of manifold conformation: long rows, sometimes\nmore closely fitted together; all twining and twisting in snake-like\nmotion. But look! What was that? One of the snakes had seized hold\nof its own tail, and the form whirled mockingly before my eyes. As\nif by a flash of lightning I awoke; and this time also I spent the\nrest of the night in working out the consequences of the hypothesis.\n\n-- August Kekulé\n   (discovered benzene)\n\nQuotes\n======\n\nI don't like ass kissers, flag wavers or team players.\nI like people who buck the system. Individualists.\nI often warn people: \"Somewhere along the way, someone is going to tell you,\n'There is no \"I\" in team.' What you should tell them is,\n'Maybe not. But there is an \"I\" in independence, individuality and integrity.'\"\n\n-- George  Carlin\n\n<img src=\"images/your-life.gif\"/>\n","front_matter":"---\ntitle: Uroborosism™\nauthor: An Individual\ntags: [philosophy, religion, theology]\ncopyright: Public Domain\n---","filename":"uroborosism","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n<div style=\"font-size:42px\">⟲</div>\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/ZsLFDI3ftM4\" frameborder=\"0\" allowfullscreen></iframe>\n\nMotto            - A Being unto Thyself\nPronounciation   - oo-roh-BOH-roh-sism\nMore Soundtracks - <a class=\"nw\" href=\"#\">play in a new window</a>\n<script class=\"autospace\" type=\"text/javascript\">\n     $(\"a.nw\").on(\"click\", function() {\n         console.log(\"here\");\n         window.open(\"http://bit.ly/1ikFVLJ\", '_blank');\n    });\n</script>\n\nGenesis\n=======\n\n* Uroborosism is the Worship of Creativity and Inspiration in its Primal form,\n  along with the Individual and his Work.\n\n* It is an Individualist Religion with Bullet Points.\n\n* This Religion is half-serious than a complete-joke.\n\n* This Religion is a modern continuation of the <a href=\"https://en.wikipedia.org/wiki/Ouroboros\">Uroboros cult</a>.\n\nBeliefs\n=======\n\n* God as an Artistic interpretation and longing can be used for\n  Humour, Pathos, Catharsis or any other tingeing of Emotion.\n\n  For Example,\n  Jesus weeps when you hit a child.\n\n* The Dialectic in the Heart with Faith or Any lack thereof\n  is up to the Individual.\n\nRankings\n========\n\n* Hero for Courageous deeds.\n** Any soldier by default is a Hero.\n* Angel for Social and Artistic deeds.\n* Genius for Inventors and Creators.\n* Saint for Philosophers par excellence.\n\n(The above are gender neutral terms)\n\nPantheon\n========\n\n* The Muses -- Clio, Thalia, Erato, Euterpe, Polyhymnia, Calliope,\n               Terpsichore, Urania, Melpomene.\n\n* Numbers and the Night Sky.\n\nAncestor Worship\n================\n\n* Remembrance of Individuals who struggled and produced great\n  creative things despite NAYSAYERS.\n\nPrayer\n======\n\n* Solitude, with or without *rugs.\n** Sobriety is encouraged.\n\n* In temples one may Pray for the Strength of the Enemy,\n  so that one can have great Pride in defeating.\n\nChurch\n======\n\n* Reflection\n\nCosmos\n======\n\n* Eternal Return\n\nEthics\n======\n\n* Anti-Censorship\n* Anti-Killing\n* Anti-Torture\n* Old School Virtues\n\nWork Ethics\n===========\n\n* Challenging over Mechanical.\n\nAesthetics\n==========\n\n* Fidelity\n* Honesty\n* Mastery\n* Sublime\n\nSin\n===\n\n* To use Uroborosian in plural forms.\n\nHeaven\n======\n\n* Work well done.\n\nHell\n====\n\n* Other people.\n\nHeresies\n========\n\n* Hypocrisy™\n* Indolence\n\nMarriage\n========\n\n* As dictated by the Heart.\n\nPatron God\n==========\n\n* Dionysus\n\nPatron Animal\n=============\n\n* Levithan\n\nFriendly Religions\n==================\n\n* Zen\n* Stoics\n* Cynics\n* Taoism\n* Discordianism\n\nMonkhood\n========\n\n* <a href=\"https://en.wikipedia.org/wiki/Henry_David_Thoreau\">Self-Reliance</a>\n\nLife After Death\n================\n\n* Worms, Dogs, Vultures, Flies feasting on your dead body and\n  ridicule if you are any good.\n\nLiterature\n==========\n\n* <a href=\"http://www.accesstoinsight.org/\">http://www.accesstoinsight.org</a>\n* <a href=\"http://www.taoism.net/\">http://www.taoism.net/</a>\n* <a href=\"http://hermetic.com/texts/plato/timaeus.html\">Timaeus</a>\n* Autobiographies of &lt;your-favorite-person&gt;\n\nMyths\n=====\n\nI was sitting, writing at my text-book; but the work did not progress;\nmy thoughts were elsewhere. I turned my chair to the fire and dozed.\nAgain the atoms were gamboling before my eyes. This time the smaller\ngroups kept modestly in the background. My mental eye, rendered\nmore acute by the repeated visions of the kind, could now distinguish\nlarger structures of manifold conformation: long rows, sometimes\nmore closely fitted together; all twining and twisting in snake-like\nmotion. But look! What was that? One of the snakes had seized hold\nof its own tail, and the form whirled mockingly before my eyes. As\nif by a flash of lightning I awoke; and this time also I spent the\nrest of the night in working out the consequences of the hypothesis.\n\n-- August Kekulé\n   (discovered benzene)\n\nQuotes\n======\n\nI don't like ass kissers, flag wavers or team players.\nI like people who buck the system. Individualists.\nI often warn people: \"Somewhere along the way, someone is going to tell you,\n'There is no \"I\" in team.' What you should tell them is,\n'Maybe not. But there is an \"I\" in independence, individuality and integrity.'\"\n\n-- George  Carlin\n\n<img src=\"images/your-life.gif\"/>\n"},{"title":"Mac Remote Desktop","author":"foobar","tags":["programming","mac"],"copyright":"CC BY-NC","__content":"\n\nSteps\n=====\n\n1. Goto System Preferences/users\n2. Add a user with password\n3. Goto System Preferences/sharing\n4. Enable Screen Sharing\n5. Click '+' and add the user you added in step 2\n6. If you are accessing your internet behind your router -- you will have an ipv4\n   address in the range of 10.**** and 192.****\n7. Goto to your router's homepage and unblock ports 5900, 3283, 22\n8. Goto ddg.gg and search for 'ip'\n9. Give this url vnc://<ip-from-step-8> to your friend and also the password from step 2\n\nYour Friend's Steps\n===================\n1. Open finder\n2. Go > Connect to Server\n3. Add the copy-paste the url there\n4. Click connect\n5. voilà ! your friend can see and control your desktop\n\nBonus\n=====\n\n* If your friend repeats these steps, you can see your friend's desktop.\n* You can toggle observe mode in View\n* You can do file transfers from Window\n\n!! Use Activity Monitor to check the bandwidth !!\n\nWelcome to Pair Programming :)\n\n","front_matter":"---\ntitle: \"Mac Remote Desktop\"\nauthor: foobar\ntags: [programming, mac]\ncopyright: CC BY-NC\n---","filename":"vnc","mtime":"2015-11-02T14:52:07.156Z","mime":"text/plain","html":"\n\nSteps\n=====\n\n1. Goto System Preferences/users\n2. Add a user with password\n3. Goto System Preferences/sharing\n4. Enable Screen Sharing\n5. Click '+' and add the user you added in step 2\n6. If you are accessing your internet behind your router -- you will have an ipv4\n   address in the range of 10.**** and 192.****\n7. Goto to your router's homepage and unblock ports 5900, 3283, 22\n8. Goto ddg.gg and search for 'ip'\n9. Give this url vnc://<ip-from-step-8> to your friend and also the password from step 2\n\nYour Friend's Steps\n===================\n1. Open finder\n2. Go > Connect to Server\n3. Add the copy-paste the url there\n4. Click connect\n5. voilà ! your friend can see and control your desktop\n\nBonus\n=====\n\n* If your friend repeats these steps, you can see your friend's desktop.\n* You can toggle observe mode in View\n* You can do file transfers from Window\n\n!! Use Activity Monitor to check the bandwidth !!\n\nWelcome to Pair Programming :)\n\n"},{"title":"Western Music in India","author":"foobar","tags":["music"],"copyright":"CC BY NC","__content":"\n\n= Western Music in India\n\nListenership ~ 2 million\n\n= Producers\n\n* Copycats\n* Playlist DJs\n\nThat shrill sound ?\nThat abrupt break ?\n\nHint: That shouldn't be there every single time.\n\n* Pointless fusionists\n\nThis is unique to india.\n\nConsider Germany.\nImagine if every American / British decent sound,\nis spinelessly copied,\nwith a german classical / folk addition,\nand sold as \"Underground\".\n\nRight, that does not happen.\n\nIndian instruments have very unique sounds.\nBetween classical / folk, I would pick folk.\n\nAfter all, classical musicians are elitist, obfuscating, vowel elongating,\nrote hacks, who singed for the Britishers and the Kings.\n\nYou can find more honesty, from the lower classes, \nsinging, \"The new King is here, time to guard your clothes\".\n\nIn either case, pointless fusion music is the norm, panderered ad-nauseam for more\nlistenership.\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/w2WURHY3D4A\" frameborder=\"0\" allowfullscreen></iframe>\n\n","front_matter":"---\ntitle: \"Western Music in India\"\nauthor: foobar\ntags: [music]\ncopyright: CC BY NC\n---","filename":"western-music-in-india","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\n= Western Music in India\n\nListenership ~ 2 million\n\n= Producers\n\n* Copycats\n* Playlist DJs\n\nThat shrill sound ?\nThat abrupt break ?\n\nHint: That shouldn't be there every single time.\n\n* Pointless fusionists\n\nThis is unique to india.\n\nConsider Germany.\nImagine if every American / British decent sound,\nis spinelessly copied,\nwith a german classical / folk addition,\nand sold as \"Underground\".\n\nRight, that does not happen.\n\nIndian instruments have very unique sounds.\nBetween classical / folk, I would pick folk.\n\nAfter all, classical musicians are elitist, obfuscating, vowel elongating,\nrote hacks, who singed for the Britishers and the Kings.\n\nYou can find more honesty, from the lower classes, \nsinging, \"The new King is here, time to guard your clothes\".\n\nIn either case, pointless fusion music is the norm, panderered ad-nauseam for more\nlistenership.\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/w2WURHY3D4A\" frameborder=\"0\" allowfullscreen></iframe>\n\n"},{"title":"Why I am excited about Entity Systems","author":"foobar","tags":["programming","future"],"copyright":"CC BY-NC","__content":"\n\nComputing is still primitive and Fragile.\n\nFor example, <a href=\"https://en.wikipedia.org/wiki/Typography\">Typography</a> is an ancient profession.\nCSS3 is just cute, compared to what Typographers can do.\n\nIt is haughty to think that computers can do everything, with fidelity.\n\n<a href=\"https://en.wikipedia.org/wiki/Donald_knuth\">Donald Knuth</a> spent a disproportionate amount of time on typesetting,\nand rightfully so.\n\nTo put Entity Systems in context, here is a list of programming\nparadigms as used in the Software Industry.\n\nAutomata Programming\n====================\n\nAutomata/ State Machines are at the heart of all Software.\n\n* Parsers\n* Validation Mechanisms\n* Protocols\n* Circuit Design\n* Industrial Robots\n\nCurrently state machines can be implemented by the following\ntechniques,\n\n1. <a href=\"https://en.wikipedia.org/wiki/State_pattern\">State Pattern</a>\n\n   This is the OO way of doing it.\n\n2. <a href=\"https://en.wikipedia.org/wiki/Dispatch_table\">Dispatch Tables</a>\n\n   This uses function pointers.\n\n3. Goto's\n\n   I find it appalling that gotos are considered a <a href=\"http://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement\">joke</a>.\n\n   Here is a Knuth's defence of <a href=\"http://cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf\">goto</a>. The paper also has a hint of satire,\n   on how programming language designers are complicit in advocating <a href=\"https://en.wikipedia.org/wiki/Newspeak\">Newspeak</a>,\n   for \"safety\".\n\n   Just for a perspective, see the <a href=\"http://svnweb.freebsd.org/base/stable/9/sys/netinet/tcp_input.c?view=markup#l631\">tcp/ipv4</a> code from FreeBSD.\n\n   This code is used by <a href=\"http://www.scei.co.jp/ps4-license/\">Sony</a> and many embedded systems.\n   The Linux implementation is <a href=\"https://github.com/torvalds/linux/blob/master/net/ipv4/tcp.c\">similiar</a>.\n\n<blockquote>The most critical piece of Internet Infrastructure is designed\nas a state machine using goto's.</blockquote>\n\n   Using goto's is hardly different from Dispatch Tables.\n   RAM is a hardware implementation of a table.\n\n   Why is there, no joke on this <a href=\"http://lua-users.org/wiki/GotoStatement\">page</a> ?\n   Probably because it's used in the Electronics Industry.\n\n   Blaming goto's is like blaming a Scalpel.\n\n\nStructured Programming\n======================\n\nThis has the following styles,\n\n1. Procedural Programming\n\n   See <a href=\"http://sunnyday.mit.edu/16.355/wirth-refinement.html\">Program Development by Stepwise Refinement</a>\n   Typically how you write C programs.\n\n2. Objective Programming\n\n   <a href=\"https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)\">Encapsulation</a> for me, is the most important idea here.\n\n3. Modular Programming\n\n   <code>\n   &gt;&gt;&gt; import this\n   ...\n   Namespaces are one honking great idea -- let's do more of those!\n   </code>\n\n4. Functional Programming\n\n   Functional programming structures code around transformations,\n   than state changes.\n\n   It's tricky to do <a href=\"http://prog21.dadgum.com/23.html\">Games</a> in Pure Functional Programming.\n   Impure Functional Programming as seen in Common Lisp, Clojure,\n   Perl, Python, Ruby, OCaml is more successful.\n\nDeclarative Programming\n=======================\n\nThe following are some fine examples,\n\n1. HTML, make\n2. SQL, Logic Programming\n3. DSL's and Scripting Components.\n\n   See <a href=\"http://martinfowler.com/articles/rake.html\">Rake</a>, <a href=\"http://www.blender.org/documentation/blender_python_api_2_70_release\">Blender API</a>\n\n4. Generative Programming\n\n   This includes Lispy Macros, <a href=\"http://dinosaur.compilertools.net/yacc/\">yacc</a>.\n\nEvent Driven Programming\n========================\n\nComputers react to events.\n\n1. Messaging\n\n   <a href=\"http://zeromq.org/\">Zero MQ</a>\n\n2. <a href=\"https://en.wikipedia.org/wiki/Observer_Pattern\">Observers</a>\n3. Callback (Hell)\n4. Services\n\n   See <a href=\"https://en.wikipedia.org/wiki/REST\">REST</a>\n\nData Flow Programming\n=====================\n\nThis is my favorite paradigm.\nImpure Functional programming fits nicely here.\n\n1. Unix <a href=\"http://doc.cat-v.org/unix/pipes/\">Pipes</a>\n\n   Nuff said.\n\n2. Max/Pure Data\n\n   <a href=\"https://www.youtube.com/watch?v=7Y_Tzelw91g\">You just have to see it</a>.\n\n3. Spreadsheets\n\n   Most widely used Programming Language if you ask me.\n\n4. Visual Programming\n\n   A bit of a stretch, but anything from Photoshop layers to Circuit Design goes here.\n\nParallel Programming\n====================\n\n<a href=\"https://en.wikipedia.org/wiki/Erlang_(programming_language)\">Erlang</a> is a great success story.\n\nEntity Systems\n==============\n\nIn a way <a href=\"http://cbpowell.wordpress.com/2012/10/30/entity-component-game-programming-using-jruby-and-libgdx-part-1/\">Entity Systems</a>, takes concepts from every one of the above.\nI am not even sure it's a new Paradigm.\n\nBut the reason I am excited about Entity Systems is, it puts us right back\ninto <a href=\"https://en.wikipedia.org/wiki/Batch_processing\">Batch Computing</a>. Entities are stored centrally and Systems perform batch operations on them.\n\nAnd best of all, it is battle tested by Game Developers.\n\n","front_matter":"---\ntitle: \"Why I am excited about Entity Systems\"\nauthor: foobar\ntags: [programming, future]\ncopyright: CC BY-NC\n---","filename":"why-i-am-excited-about-entity-systems","mtime":"2015-11-02T14:52:07.160Z","mime":"text/plain","html":"\n\nComputing is still primitive and Fragile.\n\nFor example, <a href=\"https://en.wikipedia.org/wiki/Typography\">Typography</a> is an ancient profession.\nCSS3 is just cute, compared to what Typographers can do.\n\nIt is haughty to think that computers can do everything, with fidelity.\n\n<a href=\"https://en.wikipedia.org/wiki/Donald_knuth\">Donald Knuth</a> spent a disproportionate amount of time on typesetting,\nand rightfully so.\n\nTo put Entity Systems in context, here is a list of programming\nparadigms as used in the Software Industry.\n\nAutomata Programming\n====================\n\nAutomata/ State Machines are at the heart of all Software.\n\n* Parsers\n* Validation Mechanisms\n* Protocols\n* Circuit Design\n* Industrial Robots\n\nCurrently state machines can be implemented by the following\ntechniques,\n\n1. <a href=\"https://en.wikipedia.org/wiki/State_pattern\">State Pattern</a>\n\n   This is the OO way of doing it.\n\n2. <a href=\"https://en.wikipedia.org/wiki/Dispatch_table\">Dispatch Tables</a>\n\n   This uses function pointers.\n\n3. Goto's\n\n   I find it appalling that gotos are considered a <a href=\"http://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement\">joke</a>.\n\n   Here is a Knuth's defence of <a href=\"http://cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf\">goto</a>. The paper also has a hint of satire,\n   on how programming language designers are complicit in advocating <a href=\"https://en.wikipedia.org/wiki/Newspeak\">Newspeak</a>,\n   for \"safety\".\n\n   Just for a perspective, see the <a href=\"http://svnweb.freebsd.org/base/stable/9/sys/netinet/tcp_input.c?view=markup#l631\">tcp/ipv4</a> code from FreeBSD.\n\n   This code is used by <a href=\"http://www.scei.co.jp/ps4-license/\">Sony</a> and many embedded systems.\n   The Linux implementation is <a href=\"https://github.com/torvalds/linux/blob/master/net/ipv4/tcp.c\">similiar</a>.\n\n<blockquote>The most critical piece of Internet Infrastructure is designed\nas a state machine using goto's.</blockquote>\n\n   Using goto's is hardly different from Dispatch Tables.\n   RAM is a hardware implementation of a table.\n\n   Why is there, no joke on this <a href=\"http://lua-users.org/wiki/GotoStatement\">page</a> ?\n   Probably because it's used in the Electronics Industry.\n\n   Blaming goto's is like blaming a Scalpel.\n\n\nStructured Programming\n======================\n\nThis has the following styles,\n\n1. Procedural Programming\n\n   See <a href=\"http://sunnyday.mit.edu/16.355/wirth-refinement.html\">Program Development by Stepwise Refinement</a>\n   Typically how you write C programs.\n\n2. Objective Programming\n\n   <a href=\"https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)\">Encapsulation</a> for me, is the most important idea here.\n\n3. Modular Programming\n\n   <code>\n   &gt;&gt;&gt; import this\n   ...\n   Namespaces are one honking great idea -- let's do more of those!\n   </code>\n\n4. Functional Programming\n\n   Functional programming structures code around transformations,\n   than state changes.\n\n   It's tricky to do <a href=\"http://prog21.dadgum.com/23.html\">Games</a> in Pure Functional Programming.\n   Impure Functional Programming as seen in Common Lisp, Clojure,\n   Perl, Python, Ruby, OCaml is more successful.\n\nDeclarative Programming\n=======================\n\nThe following are some fine examples,\n\n1. HTML, make\n2. SQL, Logic Programming\n3. DSL's and Scripting Components.\n\n   See <a href=\"http://martinfowler.com/articles/rake.html\">Rake</a>, <a href=\"http://www.blender.org/documentation/blender_python_api_2_70_release\">Blender API</a>\n\n4. Generative Programming\n\n   This includes Lispy Macros, <a href=\"http://dinosaur.compilertools.net/yacc/\">yacc</a>.\n\nEvent Driven Programming\n========================\n\nComputers react to events.\n\n1. Messaging\n\n   <a href=\"http://zeromq.org/\">Zero MQ</a>\n\n2. <a href=\"https://en.wikipedia.org/wiki/Observer_Pattern\">Observers</a>\n3. Callback (Hell)\n4. Services\n\n   See <a href=\"https://en.wikipedia.org/wiki/REST\">REST</a>\n\nData Flow Programming\n=====================\n\nThis is my favorite paradigm.\nImpure Functional programming fits nicely here.\n\n1. Unix <a href=\"http://doc.cat-v.org/unix/pipes/\">Pipes</a>\n\n   Nuff said.\n\n2. Max/Pure Data\n\n   <a href=\"https://www.youtube.com/watch?v=7Y_Tzelw91g\">You just have to see it</a>.\n\n3. Spreadsheets\n\n   Most widely used Programming Language if you ask me.\n\n4. Visual Programming\n\n   A bit of a stretch, but anything from Photoshop layers to Circuit Design goes here.\n\nParallel Programming\n====================\n\n<a href=\"https://en.wikipedia.org/wiki/Erlang_(programming_language)\">Erlang</a> is a great success story.\n\nEntity Systems\n==============\n\nIn a way <a href=\"http://cbpowell.wordpress.com/2012/10/30/entity-component-game-programming-using-jruby-and-libgdx-part-1/\">Entity Systems</a>, takes concepts from every one of the above.\nI am not even sure it's a new Paradigm.\n\nBut the reason I am excited about Entity Systems is, it puts us right back\ninto <a href=\"https://en.wikipedia.org/wiki/Batch_processing\">Batch Computing</a>. Entities are stored centrally and Systems perform batch operations on them.\n\nAnd best of all, it is battle tested by Game Developers.\n\n"}]